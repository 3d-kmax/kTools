global proc
am_dock()
{

if (`window - exists
am_controlsWin
` )
deleteUI
am_controlsWin;
if (`dockControl - exists
am_controlsDock
` )
deleteUI
am_controlsDock;

// VARIABLES
int $widgetWidth = 275; // 265
float $scale = 1;

int $titleW = ($widgetWidth * .85);
int $collapseButtonW = ($widgetWidth * .15);

window
- t
"Color"
- w($widgetWidth + 10)
-mxb
off
- mnb
on
- resizeToFitChildren
on
- sizeable
on
- menuBar
true
am_controlsWin;

columnLayout;
rowColumnLayout
- numberOfColumns
3
- columnWidth
1 $titleW
   - columnWidth
2
5
- columnWidth
3 $collapseButtonW;
separator - style
"none" - height
20;
separator - style
"none" - height
20;
button - l
"^" - height
20 - c
"am_cdCollapseAll()"
collapseButton;
// setParent..;
// setParent..;

scrollLayout - parent
am_controlsWin
mainColumn;
// WIDGETS / SETTINGS
am_widgetReset(0, $widgetWidth, "mainColumn", $scale); // (int $collapse, int $width, string $parent, float $scale)
am_widgetTransform(0, $widgetWidth, "mainColumn", $scale); // (int $collapse, int $width, string $parent, float $scale)
am_widgetColors(0, $widgetWidth, "mainColumn", $scale, 0); // (
int $collapse, int $width, string $parent, float $scale, int $indexRgb)
am_widgetAddAttr(0, $widgetWidth, "mainColumn", $scale); // (
int $collapse, int $width, string $parent, float $scale, int $indexRgb)
am_widgetAttributes(0, $widgetWidth, "mainColumn", $scale); // (
int $collapse, int $width, string $parent, float $scale, int $indexRgb)


showWindow
am_controlsWin;

dockControl
- area
"left"
- floating
0
- width($widgetWidth + 20)
-content
am_controlsWin
- allowedArea
"left"
- allowedArea
"right"
- label
"Control Dock"
am_controlsDock;

am_loadColors();
}


global proc
am_cdCollapseAll()
{
    string $updown = `button - q - l
collapseButton
`;
if ($updown == "^"){
    button - e - l
"v"
collapseButton;
frameLayout - e - collapse
1
shapesColumn;
frameLayout - e - collapse
1
attributesColumn;
frameLayout - e - collapse
1
colorsColumn;
am_colorframe(0);
frameLayout - e - collapse
1
resetColumn;
frameLayout - e - collapse
1
addAttrFrame;
} else {
    button - e - l
"^"
collapseButton;
frameLayout - e - collapse
0
shapesColumn;
frameLayout - e - collapse
0
attributesColumn;
frameLayout - e - collapse
0
colorsColumn;
am_colorframe(1);
frameLayout - e - collapse
0
resetColumn;
frameLayout - e - collapse
0
addAttrFrame;
}
}



global proc
am_addShape(int $replace ){

    string $selection[] = `ls - sl`;
int $size = `size $selection
`;
if ($size < 1){error
"Select nodes with shapes to add/replace, Then select node with shapes.";}
string $replaceNode = $selection[$size - 1];
string $replaceShapes[] = `listRelatives - s $replaceNode
`;
for ( $i = 0; $i < ($size - 1); $i + + ){
    string $node = $selection[$i];
// duplicate
the
replace
node and get
shapes
string $duplicateNode[] = `duplicate - n
"temp" $replaceNode
`;
string $duplicateShapes[] = `listRelatives - s $duplicateNode[0]
`;

// int $index = `getAttr
                 // Get
rgb
colors
select - r $duplicateNode[0];
float $color[] = am_getRGB(0, 1, 1);
// if replace is on, get rid of the old shapes on each node
if ($replace == 1){
string $shapes[] = `listRelatives -s $node`;
for ($shape in $shapes){
delete $shape;
}
}
// zero out the transformations?
parent $duplicateNode[0] $node;
select -r $duplicateNode[0];
am_zero(0);
int $k=1;
for ($dupShape in $duplicateShapes){
while (`objectExists($node + "Shape" + $k)` == 1){
$k++;
}
parent - r - s $dupShape $node;
rename $dupShape($node + "Shape" + $k);
$k + +;
}
delete $duplicateNode[0];
}
select - r $selection;
select - d $replaceNode;
}


global proc
am_attrShift(int $mode){
    string $obj[] = `channelBox - q - mol
mainChannelBox
`;
int $size = `size $obj
`;
if (`size $obj
`){
    string $attr[] = `channelBox - q - sma
mainChannelBox
`;
if (`size $attr
`){
for ($eachObj in $obj){
string $udAttr[] = `listAttr -ud $eachObj`;
if (!`stringArrayContains $attr[0] $udAttr`){
error "Selected attribute is static and cannot be shifted.";
}

// Temporarily unlock user defined attributes
string $attrLock[] = `listAttr -ud -l $eachObj`;
if (`size $attrLock`){
for ($alck in $attrLock){
setAttr -l false ($eachObj + "." + $alck);
}
}

// Shift down
if ($mode == 0){
string $sort[];
if (`size $attr` > 1){
$sort = kz_reverse($attr);
} else if (`size $attr` == 1){
$sort = $attr;
}
// Remove leaf attributes
$sort =  am_attrParents($sort, $eachObj);
for ($s in $sort){
string $attrLs[] = `listAttr -ud $eachObj`;
// Flatten user defined attributes to compound parents
$attrLs = am_attrParents($attrLs, $eachObj);
int $attrSize = `size $attrLs`;
int $attrPos = stringArrayFind($s, 0, $attrLs);
deleteAttr -at $attrLs[$attrPos] $eachObj;
undo;
int $range = ($attrPos+2);
for ($x=($attrPos+2); $x < $attrSize; $x++){
deleteAttr -at $attrLs[$x];
undo;
}
}
}
// Shift up
if ($mode == 1){
// Remove leaf attributes
$attr =  am_attrParents($attr, $eachObj);
for ($a in $attr){
string $attrLs[] = `listAttr -ud $eachObj`;
$attrLs = am_attrParents($attrLs, $eachObj);
int $attrSize = `size $attrLs`;
int $attrPos = stringArrayFind($a, 0, $attrLs);
if ($attrPos > 0 & & $attrLs[$attrPos-1] != ""){
deleteAttr -at $attrLs[$attrPos-1] $eachObj; //
undo;
}
for ($x = ($attrPos+1); $x < $attrSize; $x++){
deleteAttr -at $attrLs[$x] $eachObj;
undo;
}
}
}
// Relock
if (`size $attrLock`){
for ($alck in $attrLock){
setAttr -l true ($eachObj + "." +  $alck);
}
}
}
}
}
}

global proc
string[]
kz_reverse(string $array[]){
    int $arraySize = `size $array
`;
string $reversedArray[];
for ( $n = 0; $n < $arraySize; $n + + ){
$reversedArray[( $arraySize - 1 - $n )] = $array[$n];
}
return $reversedArray;
}

global proc
string[]
am_attrParents(string $initList[], string $node){
string $returnList[];
int $i = 0;
for ($item in $initList){
string $parentAttr[] = `attributeQuery -node $node -listParent $item`;
// if attribute has a parent, remove the attribute from the list and add the parent, if it's not there already
if (`size $parentAttr`){
if (!stringArrayContains($parentAttr[0], $returnList)){
$returnList[$i] = $parentAttr[0];
$i++;
}
} else {
$returnList[$i] = $item;
$i++;
}

}
return $returnList;
}

global proc
am_cbSep(string $nodes[]){

string $name = "__________";
for ($node in $nodes){
int $i = 0;
for ($i = 0;  $i < 100; $i++){
if ($i == 100) {error "There are more than 20 seperators. Why would you even need that many.";}
if (`attributeExists $name $node`){
$name = stringAddPrefix( "_", $name );
} else {
break;
}
}
string $en = "..................................................................................:";
addAttr - ln $name - at
"enum" - nn $en - en $en - keyable
false $node;
setAttr - keyable
false - channelBox
true($node + "." + $name);
}
}


global proc
am_chain(string $selection[], string $search, string $replace){
                                                              // Search and replace
looks
for other objects in family, and conserves that chain depending on their
// relationship to the selected object.For instance, if "object1_LOC" is somewhere under "object1_GRP",
// "object2_GRP" will be parented under "object1_LOC".
//

int $size = `size $selection`;
string $direction;
if ($size < 2){
error "Not enough objects selected.";
}

string $family[];
int $k = 0;

for ($sel in $selection){
// Check search / replace on all objects
// Skip entirely if both empty
if ($search != "" | | $replace != ""){
// If both fields are filled, do a search and replace
if ($search != "" & & $replace != ""){
$family[$k] = strSearchReplace($selection[$k], $search, $replace);
$k + +;
// If
just
search, add as prefix
} else if ($search != ""){
$family[$k] = ($search + $selection[$k]);
$k + +;
// If
just
replace, add as suffix
} else if ($replace != ""){
$family[$k] = ($selection[$k] + $replace);
$k + +;
}
if ($family[$k] == $sel) {error ("Search/replace string not found in " + $sel + " family.");}
}
}
string $searchDirection = "";
// If everything found, check relationship base on last object selected
if (`size $family` == $size){
// Manually go up the whole list and add all parents because APPARENTLY there's no command for this
string $parents[] = `listRelatives -p $selection[$size-1]`;
int $i=1;
while ($parents[$i-1] != ""){
string $tempParent[] = `listRelatives -p $parents[$i-1]`;
$parents[$i] = $tempParent[0];
$i++;
}
// print "\nParents: \n";
// print $parents;
string $descendents[] = `listRelatives - ad $selection[$size - 1]`;
// print "\nDescendants: \n";
// print $descendents;
if (stringArrayContains($family[$size-1], $parents)){
$searchDirection = "up";
} else if (stringArrayContains($family[$size-1], $descendents)){
$searchDirection = "down";
} else {
warning ("Search/replace string not found in " + $selection[$size-1] + " family.");
}
} else if (`size $family` > 1){
warning
"Orphans found in selection list.";
}

// Unparent
everything
to
world
string $parent[] = `listRelatives - p $selection[0]
`;

for ($i = 0; $i <$size; $i + +){
if ($searchDirection == "" | | $searchDirection == "down"){
string $currentParent[] = `listRelatives -p $selection[$i]`;
if ($currentParent[0] != ""){
parent -world $selection[$i];
}
} else if ($searchDirection == "up"){
string $currentParent[] = `listRelatives -p $family[$i]`;
if ($currentParent[0] != ""){
parent -world $family[$i];
}
}
}

for ($i=1; $i < $size; $i++){
if ($searchDirection == ""){
parent $selection[$i] $selection[$i-1];
} else if ($searchDirection == "up"){
parent $family[$i] $selection[$i-1];
} else if ($searchDirection == "down"){
parent $selection[$i] $family[$i-1];
}
}
select $selection;
}


global proc
string
am_createShape(int $index / *, string $name * / ){
                                                 / *
                                                 0 = cog
1 = circleSprog
2 = circleCross
3 = halfSphere
4 = sphereSprog
5 = sperePin
6 = circleCrossPin
7 = halfSpherePin
8 = xcube
    * /
    string $name = "temp";
string $return;
// COG
if ($index == 0) {
$
return = `createNode
transform - n $name
`;
// setAttr
".t" - type
"double3" - 5.2045517535961636 - 5.4385242937875642e-032 - 0.74186845239299481;
string $curve = `createNode
nurbsCurve - n($name + "Shape") -p $return `;
setAttr
".cc" - type
"nurbsCurve"
1
178
0
no
3
179
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
0.89414346723294358
1.1155625789854212e-018 - 0.0091092597454394131
1.1363751737065813 - 9.3907511623637138e-018
0.076681302469429724
1.1403631618659311 - 1.6169146795103652e-017
0.13203110322389477
1.1373203074653864 - 2.2847855829021314e-017
0.18656690112552354
1.1272654855437936 - 2.9385707793988643e-017
0.23995251377334359
1.1102607816636552 - 3.5742373599887357e-017
0.29185862915554583
1.0864108046756764 - 4.1878671623854151e-017
0.34196530504151657
0.8295668047267255 - 4.0873611783631094e-017
0.33375836863403308
0.80082320915559957 - 4.8718489417748262e-017
0.39781665580368131
0.76714221625676982 - 5.6263005800743581e-017
0.45942230723108146
0.7287315110728545 - 6.3460632363760095e-017
0.51819538831885126
0.6858278880153228 - 7.0267008024838789e-017
0.57377366334327107
0.63869595693067815 - 7.6640162160309857e-017
0.62581441615386346
0.74931643697120953 - 1.0504547599037739e-016
0.85776140568459525
0.71299806578759228 - 1.1018386726675425e-016
0.89971955459703601
0.67228382496138483 - 1.1464293724921406e-016
0.93613062418513593
0.62742480051200045 - 1.1839520734965202e-016
0.96677023474918133
0.57869736670423022 - 1.2141750917628228e-016
0.99144920201333075
0.52640208605415817 - 1.2369124227843196e-016
1.0100156417715755
0.35058919569928959 - 1.0073896432552401e-016
0.82259606929657103
0.28496799048271171 - 1.0379676921450342e-016
0.84756494106521796
0.2175903333787873 - 1.062149122593671e-016
0.86731057749318463
0.14887113722835843 - 1.0797820651223316e-016
0.88170896774001939
0.079234079876525587 - 1.0907578043268897e-016
0.89067133894141381
0.0091085809563770104 - 1.0950087180562788e-016
0.89414247342063558
-0.076681971748468303 - 1.3916567391088342e-016
1.1363739651936866
-0.13203180799623021 - 1.3965406457316792e-016
1.1403619775955036
-0.18656741543973876 - 1.3928141920094483e-016
1.1373190972116856
-0.23995293111769267 - 1.3805007603941825e-016
1.1272644172632802
-0.29185909498482843 - 1.3596759172834169e-016
1.1102596423965476
-0.34196572064505981 - 1.33046839601603e-016
1.0864098913599856
-0.33375863878277739 - 1.0159254743988577e-016
0.82956610437081491
-0.39781673549430607 - 9.8072469026636049e-017
0.80082248281641633
-0.45942224320771319 - 9.3947744114404215e-017
0.76714154791254341
-0.51819526368931645 - 8.9243800265444832e-017
0.72873093146186996
-0.573773429622636 - 8.3989641360560286e-017
0.68582746812417383
-0.62581412182706209 - 7.8217655373203939e-017
0.63869562577277073
-0.85776087847535853 - 9.1764761478030405e-017
0.74931614194329832
-0.89971911178512687 - 8.7317065974741438e-017
0.71299795202612692
-0.93613005584108366 - 8.2331013346315939e-017
0.67228374257490398
-0.96676945473485099 - 7.6837367897142446e-017
0.62742472319888165
-0.99144843237942826 - 7.0869995117187205e-017
0.57869742660928569
-1.0100148825180995 - 6.4465687115704712e-017
0.52640228317738824
-0.82259538102968854 - 4.2934823711203127e-017
0.35058944130745306
-0.84756655473681775 - 3.4898597720844856e-017
0.28496867623499789
-0.86731213229942394 - 2.6647206399178555e-017
0.21759095289949215
-0.8817106298965518 - 1.8231531456297398e-017
0.14887175199405167
-0.89067300109794689 - 9.7034515175011294e-018
0.079234694642218884
-0.89414399360398167 - 1.1155428630004053e-018
0.0091090987522042255
-1.1363758662932724
9.3907633496403099e-018 - 0.076681401986095299
-1.1403639496816824
1.6169157391363678e-017 - 0.13203118974892414
-1.1373209983112718
2.284784903858044e-017 - 0.18656684567736592
-1.127266247376272
2.938569506585597e-017 - 0.23995240984025301
-1.1102616144827269
3.5742354934062892e-017 - 0.2918584767375223
-1.0864116374947481
4.1878652958029687e-017 - 0.34196515262349303
-0.82956751807427065
4.0873590362148033e-017 - 0.33375819371434945
-0.80082387401821187
4.8718459302914802e-017 - 0.39781640989740463
-0.76714302309256888
5.6262963810526534e-017 - 0.45942196435493887
-0.72873228717036898
6.3460580195769633e-017 - 0.51819496233488183
-0.68582885457095721
7.0266952674815028e-017 - 0.57377321137602788
-0.63869696373462093
7.6640090694820878e-017 - 0.62581383259386048
-0.74931782532809188
1.0504537260979507e-016 - 0.85776056151807811
-0.71299962653759619
1.1018377496407512e-016 - 0.89971880088846312
-0.67228541930470431
1.1464282938772835e-016 - 0.93612974342926591
-0.62742634668873687
1.1839507801930234e-016 - 0.96676917868673318
-0.57869906087244671
1.2141739296491758e-016 - 0.9914482530755242
-0.57869906087244671
1.2141739296491758e-016 - 0.9914482530755242
-0.52640382934400765
1.2369110920939045e-016 - 1.0100145551803918
-0.35059063729611706
1.0073885649167269e-016 - 0.82259518876635296
-0.28496983673036563
1.0379694625565743e-016 - 0.84756638671594864
-0.2175921086398479
1.0621509523821289e-016 - 0.86731207162884827
-0.14887285924947397
1.0797839394434779e-016 - 0.88171049823938263
-0.079235717919411308
1.0907596214029914e-016 - 0.89067282269665071
-0.0091100865360999039
1.0950103909538305e-016 - 0.89414383944515219
0.076680117264190051
1.3916587576085307e-016 - 1.1363756134237706
0.13202993101029159
1.3965425179209529e-016 - 1.1403635063540607
0.18656565444371437
1.3928164161964853e-016 - 1.1373209133982289
0.23995114762000769
1.3805028382707969e-016 - 1.1272661139782971
0.29185738247373694
1.35967805453695e-016 - 1.110261387596498
0.34196415184796125
1.3304704622462249e-016 - 1.0864115785649791
0.33375736089527719
1.0159270190280261e-016 - 0.82956736565624789
0.39781555283586589
9.807262508056945e-017 - 0.80082375709348552
0.45942118002079935
9.3947897412679014e-017 - 0.76714279968795251
0.51819430785269582
8.9243952981398559e-017 - 0.72873217848226668
0.57377254651341481
8.398978103648835e-017 - 0.68582860866468032
0.62581337637121726
7.8217789033466944e-017 - 0.63869671719164423
0.85775999362533129
9.1764920131675935e-017 - 0.749317437448628
0.89971824814725787
8.7317220825046154e-017 - 0.71299921647482201
0.93612914394393365
8.2331158183920797e-017 - 0.67228492526370021
0.96676866988499843
7.6837508620752671e-017 - 0.6274258722943622
0.99144768692358354
7.0870128777450259e-017 - 0.57869851802815964
1.010014025392151
6.4465803467240186e-017 - 0.52640323325977567
0.82259480095129889
4.2934909053691005e-017 - 0.35059013818175133
0.84756603526459462
3.48986721966447e-017 - 0.28496928437605451
0.86731175654119363
2.6647273772644573e-017 - 0.21759150304559194
0.88171014852883456
1.8231580434366904e-017 - 0.14887215193033976
0.89067247298610264
9.7034902112036155e-018 - 0.079235010600277267
0.89414346723294358
1.1155625789854212e-018 - 0.0091092597454394131
0.37255970946107042
4.6485025379471211e-019 - 0.0037957903790575287
0.37170907884128868 - 3.116314445316335e-018
0.025446638553140666
0.36856664857594978 - 6.678266132859636e-018
0.054532181340034569
0.36315188753816596 - 1.0199045045445687e-017
0.083281522905597427
0.35549825442346961 - 1.3656945925310786e-017
0.11151742636994832
0.34565271430270317 - 1.703064132612783e-017
0.1390657399177071
0.33367624818122177 - 2.0299342972957472e-017
0.16575671440198647
0.31964247177452865 - 2.3442885422901339e-017
0.1914256864854682
0.30363803621008256 - 2.6441902904901423e-017
0.21591452264694855
0.28576152187598125 - 2.9277889971836984e-017
0.23907211444329413
0.2661232305143072 - 3.1933371877551588e-017
0.26075576974344639
0.24484417176219009 - 3.4391976599000814e-017
0.28083180083388815
0.22205557455680625 - 3.6638542636552402e-017
0.29917640467489548
0.19789790956261616 - 3.8659216719418093e-017
0.31567646072593458
0.17252016844747858 - 4.0441549150220694e-017
0.33023030949313448
0.14607872937055627 - 4.1974537706009963e-017
0.34274811100828639
0.11873655244949333 - 4.3248621627526287e-017
0.35315179574745681
0.09066254954463232 - 4.4256186919183495e-017
0.3613791907184698
0.062029545629321892 - 4.4990892257133662e-017
0.36737851508253705
0.033014109106469236 - 4.5448215448436214e-017
0.37111284233200159
0.00379512806324378 - 4.5625333479001871e-017
0.37255912080746878
-0.025447235507776 - 4.5521158992493407e-017
0.3717084715706358
-0.054532771798851631 - 4.5136328106992438e-017
0.36856608891982656
-0.083282041507417942 - 4.4473214680852441e-017
0.36315135687952171
-0.11151789173182405 - 4.3535910498007419e-017
0.35549768740112508
-0.13906620353877663 - 4.2330198556247568e-017
0.34565230224518206
-0.16575704730069862 - 4.086349990630816e-017
0.33367579888959753
-0.19142604881686098 - 3.9144862026182265e-017
0.31964205559869541
-0.21591478931407962 - 3.7184887100979125e-017
0.30363764578381858
-0.23907238024002209 - 3.4995654983920908e-017
0.28576120893212842
-0.26075597580441168 - 3.2590659296070554e-017
0.26612292882128497
-0.28083197810692362 - 2.9984731338782487e-017
0.24484391221745749
-0.29917655316000258 - 2.7193938237996159e-017
0.22205535716036362
-0.31567656981703296 - 2.4235484590342424e-017
0.19789774984278008
-0.33023031274909459 - 2.1127607958371989e-017
0.17252001126432415
-0.34274822441919545 - 1.788948316572651e-017
0.14607871574221942
-0.35315282552046728 - 1.454104990666587e-017
0.11873668323625974
-0.36138013781885475 - 1.1102967618213091e-017
0.090662610851907743
-0.36737953360471765 - 7.5964371519896637e-018
0.062029616680324473
-0.37111386085418158 - 4.0430710056321787e-018
0.033014180157471706
-0.37256007959388565 - 4.6477922256820196e-019
0.0037952103650766844
-0.37170947884198546
3.1163861654574683e-018 - 0.025447224192536311
-0.36856707194871008
6.6783327108172587e-018 - 0.054532724990315362
-0.36315239401875293
1.01991078590491e-017 - 0.083282035817593414
-0.35549871804453864
1.3656996387803255e-017 - 0.11151783842746976
-0.34565324415535342
1.7030698997547788e-017 - 0.13906621084058868
-0.33367670530647237
2.0299387604351643e-017 - 0.16575707884497692
-0.3196430604925391
2.3442934983291806e-017 - 0.19142609117676779
-0.30363858531648413
2.6441943029729989e-017 - 0.21591485029103819
-0.28576215171270347
2.9277932905620981e-017 - 0.23907246502424551
-0.26612387160185957
3.1933407495814543e-017 - 0.26075606058863521
-0.24484485499803232
3.4392008691759156e-017 - 0.28083206289114715
-0.22205624701934315
3.66385628815616e-017 - 0.29917656998794095
-0.19789865713005858
3.865924343114322e-017 - 0.31567667884372286
-0.17252090080495364
4.044156438530243e-017 - 0.33023043389701767
-0.14607955236125422
4.1974558108937541e-017 - 0.34274827761083326
-0.11873754290900759
4.3248761885775354e-017 - 0.35315294104297523
-0.090663473772565173
4.4256319968505024e-017 - 0.36138027714862764
-0.062030467479748719
4.4991031879764939e-017 - 0.36737965518784232
-0.03301496797322373
4.5448350777688988e-017 - 0.37111394737921088
-0.0037959990512316799
4.5625470981592287e-017 - 0.37256024360132667
0.025446454123432993
4.5521294428339846e-017 - 0.3717095774882484
0.054531948425393773
4.5136466405091139e-017 - 0.36856721820950256
0.083281265748490096
4.4473353774459377e-017 - 0.36315249266501537
0.11151717570865943
4.3536048213785103e-017 - 0.35549881193578914
0.13906549401143015
4.2330330440927071e-017 - 0.34565337916531602
0.16575642175158189
4.0863626066483128e-017 - 0.3336768290656047
0.19142542283254266
3.914499293078655e-017 - 0.31964312451590793
0.21591424081217292
3.7185018112177076e-017 - 0.3036387155714344
0.23907183866913517
3.4995775419591465e-017 - 0.28576219236400968
0.26075551474624448
3.2590779295000252e-017 - 0.2661239086869065
0.28083152007906487
2.9984850794377827e-017 - 0.24484488764641732
0.29917603929709191
2.719404903922766e-017 - 0.22205626192107975
0.31567615951653016
2.4235595488420991e-017 - 0.19789865539431251
0.33022992138801877
2.1127715460610425e-017 - 0.17252088908671759
0.34274778631399261
1.7889580383597979e-017 - 0.1460795095863836
0.35315246489767615
1.454114723113089e-017 - 0.11873747795082634
0.36137981312456191
1.1103063167094724e-017 - 0.090663391067735688
0.36737918553836124
7.596527558687787e-018 - 0.062030354907037566
0.37111345348726354
4.0431580457302889e-018 - 0.03301489089380949
0.37255970946107042
4.6485025379471211e-019 - 0.0037957903790575287
;
}
// CIRCLE
SPROG
else if ($index == 1){
$return = ` createNode
transform - n $name
`;
// setAttr
".t" - type
"double3" - 5.2045517535961636 - 8.5725275940314722e-016
6.2581315476070047;
string $curve = ` createNode
nurbsCurve - n($name + "Shape") -p $return `;
setAttr
".cc" - type
"nurbsCurve"
1
104
0
no
3
105
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
-0.92616069403557755
1.4932316947893131e-017 - 0.12193162108690923
-0.93415258368274057
2.3865833825238586e-023 - 1.9487932228177878e-007
-0.92616074971538398 - 1.493226921622548e-017
0.12193123132826467
-0.9899104531374886 - 1.5960090558064949e-017
0.13032402950121608
-0.96443103966546695 - 3.1647128701930514e-017
0.25841841683630312
-0.92244980198068793 - 4.6792673237432817e-017
0.38209117330818732
-0.86468517662469502 - 6.1137577007980525e-017
0.49922620179587196
-0.79212553584029477 - 7.4436410597324517e-017
0.60781941902881753
-0.7060123722700351 - 8.646160646113152e-017
0.70601259498926106
-0.60781914062978526 - 9.7007427474208617e-017
0.79212575855952072
-0.49922597907664606 - 1.0589342065759835e-016
0.86468539934392086
-0.38209089490915504 - 1.1296754701221465e-016
0.92245002469991388
-0.25841811059736769 - 1.1810876584770553e-016
0.96443126238469279
-0.13032372326228062 - 1.2122910770059117e-016
0.98991078721632719
-0.1219309390092808 - 1.1342201385753418e-016
0.92616102811441625
5.1503820933164744e-007 - 1.1440072442746853e-016
0.93415280640196652
0.12193196908569946 - 1.1342201385753418e-016
0.92616102811441625
0.13032482293845724 - 1.2122910770059117e-016
0.98991078721632719
0.25841922419349589 - 1.1810876584770553e-016
0.96443126238469279
0.38209200850528324 - 1.1296754701221465e-016
0.92245002469991388
0.49922709267277426 - 1.0589341383878869e-016
0.86468534366411454
0.60782030990571989 - 9.7007413836589287e-017
0.79212564719990797
0.70601354154596974 - 8.6461592823512191e-017
0.7060124836296483
0.7921267051162294 - 7.4436390140895529e-017
0.60781925198939846
0.86468634590062954 - 6.1137563370361196e-017
0.49922609043625921
0.92245097125662256 - 4.6792649371598995e-017
0.38209097842886502
0.96443215326159515 - 3.1647101426691856e-017
0.25841819411707767
0.98991178945284219 - 1.5960061578123877e-017
0.13032379286203902
0.9261619189913185 - 1.4932241940986822e-017
0.1219310086090392
0.93415258368274146
4.0912857986123293e-023 - 3.3407883819733507e-007
0.92616074971538487
1.4932322062000378e-017 - 0.121931662846764
0.98991045313748949
1.5960148517947098e-017 - 0.13032450277957019
0.96443103966546784
3.1647173024193336e-017 - 0.25841877875504454
0.92244985766049525
4.6792703922076311e-017 - 0.38209142386731598
0.86468528798430855
6.1137597464409512e-017 - 0.49922636883529103
0.79212570287971484
7.4436424234943858e-017 - 0.60781953038843028
0.70601265066906782
8.6461613279941178e-017 - 0.70601265066906738
0.60781953038843073
9.7007427474208617e-017 - 0.79212575855952072
0.49922648019490423
1.0589341383878869e-016 - 0.86468534366411454
0.38209145170721959
1.1296753337459531e-016 - 0.92244991334030113
0.25841880659494815
1.1810875221008621e-016 - 0.96443115102508015
0.13032451669952222
1.2122910770059117e-016 - 0.98991078721632719
0.12193167676671604
1.1342200703872449e-016 - 0.92616097243460982
3.201588870498686e-007
1.1440072442746853e-016 - 0.93415280640196652
-0.12193105036889354
1.1342201385753418e-016 - 0.92616102811441625
-0.13032384854184495
1.2122910770059117e-016 - 0.98991078721632719
-0.25841813843727085
1.1810876584770553e-016 - 0.96443126238469279
-0.38209086706925188
1.1296756064983397e-016 - 0.92245013605952664
-0.49922592339683969
1.0589344111402734e-016 - 0.86468556638333993
-0.60781902927017262
9.7007447930637604e-017 - 0.7921259255989398
-0.70601226091042246
8.6461640555179848e-017 - 0.70601287338829288
-0.7921253688008757
7.4436444691372845e-017 - 0.60781969742784936
-0.86468500958527583
6.113762473964817e-017 - 0.49922659155451654
-0.92244957926146254
4.679271755969564e-017 - 0.38209153522692874
-0.9644309283058542
3.1647176433598165e-017 - 0.2584188065949477
-0.9899104531374886
1.5960141699137433e-017 - 0.13032444709976382
-0.92616069403557755
1.4932316947893131e-017 - 0.12193162108690923
-0.93415258368274057
2.3865833825238586e-023 - 1.9487932228177878e-007
-0.92616074971538398 - 1.493226921622548e-017
0.12193123132826467
-0.90232210877736219 - 2.9609068318971113e-017
0.24177639087111563
-0.86304445977050148 - 4.3779246910679408e-017
0.35748468000047218
-0.80899985795764218 - 5.7200348576114937e-017
0.46707629184137051
-0.74111303356291458 - 6.9642739671616097e-017
0.56867612539471857
-0.66054552302692426 - 8.0893523321842429e-017
0.66054574574615021
-0.56867590267549273 - 9.0760197711159535e-017
0.74111325628214042
-0.46707606912214461 - 9.9073935931087702e-017
0.80900008067686813
-0.35748442944134307 - 1.0569249079321885e-016
0.86304468248972743
-0.24177611247208336 - 1.1050261550664736e-016
0.90232233149658814
-0.1219309390092808 - 1.1342201385753418e-016
0.92616102811441625
5.1503820933164744e-007 - 1.1440072442746853e-016
0.93415280640196652
0.12193196908569946 - 1.1342201385753418e-016
0.92616102811441625
0.24177714254850202 - 1.1050261550664736e-016
0.90232233149658814
0.35748545951776173 - 1.0569249079321885e-016
0.86304468248972743
0.46707712703846643 - 9.9073929112278043e-017
0.80900002499706181
0.5686769605918145 - 9.0760184073540206e-017
0.74111314492252767
0.66054663662305246 - 8.0893509684223112e-017
0.66054563438653746
0.74111414715904278 - 6.9642726033996768e-017
0.56867601403510581
0.80900097155377038 - 5.720033493849562e-017
0.46707618048175781
0.86304557336662968 - 4.3779226454250415e-017
0.35748451296105305
0.90232322237349039 - 2.9609044453137284e-017
0.24177619599179334
0.9261619189913185 - 1.4932241940986822e-017
0.1219310086090392
0.93415258368274146
4.0912857986123293e-023 - 3.3407883819733507e-007
0.92616074971538487
1.4932322062000378e-017 - 0.121931662846764
0.90232210877736307
2.96091092318291e-017 - 0.24177672494995384
0.8630445154503088
4.3779277595322895e-017 - 0.35748493055960079
0.80899996931725582
5.7200369032543937e-017 - 0.46707645888078964
0.74111320060233454
6.9642753309235426e-017 - 0.56867623675433132
0.66054580142595698
8.0893530140652087e-017 - 0.66054580142595654
0.56867623675433177
9.0760197711159535e-017 - 0.74111325628214042
0.4670765145605964
9.9073929112278043e-017 - 0.80900002499706181
0.35748495839950445
1.0569247715559951e-016 - 0.86304457113011468
0.24177675278985744
1.1050260868783769e-016 - 0.9023222758167817
0.12193167676671604
1.1342200703872449e-016 - 0.92616097243460982
3.201588870498686e-007
1.1440072442746853e-016 - 0.93415280640196652
-0.12193105036889354
1.1342201385753418e-016 - 0.92616102811441625
-0.24177614031198652
1.1050262232545702e-016 - 0.90232238717639446
-0.35748440160143991
1.0569250443083818e-016 - 0.86304479384934019
-0.46707601344233823
9.9073956387516701e-017 - 0.8090002477162872
-0.56867579131587997
9.0760218167588534e-017 - 0.74111342332155961
-0.66054541166731151
8.0893550597081074e-017 - 0.66054596846537561
-0.74111286652349539
6.9642773765664413e-017 - 0.5686764037937504
-0.8089996909182231
5.7200389488972924e-017 - 0.46707662592020871
-0.86304429273108241
4.3779287823537395e-017 - 0.35748501407931038
-0.90232199741774943
2.9609112641233929e-017 - 0.241776752789857
-0.92616069403557755
1.4932316947893131e-017 - 0.12193162108690923
;
}
// CIRCLE
CROSS
else if ($index == 2){
$return = `createNode
transform - n $name
`;
createNode
nurbsCurve - n($name + "Shape") -p $return;
setAttr - k
off
".v";
setAttr
".cc" - type
"nurbsCurve"
1
105
0
no
3
106
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
5.138258529768791e-007
0 - 0.93195384740829468
-0.12164392322301865
0 - 0.92398089170455933
-0.24120698869228363
0 - 0.90019834041595459
-0.35664293169975281
0 - 0.86101311445236206
-0.46597659587860107
0 - 0.80709570646286011
-0.5673372745513916
0 - 0.739368736743927
-0.65899062156677246
0 - 0.65899085998535156
-0.7393684983253479
0 - 0.5673375129699707
-0.80709552764892578
0 - 0.46597680449485779
-0.86101287603378296
0 - 0.35664317011833191
-0.90019810199737549
0 - 0.24120725691318512
-0.92398059368133545
0 - 0.12164421379566193
-0.93195360898971558
0
1.9442057919150102e-007
-0.92398053407669067
0
0.12164460122585297
-0.90019798278808594
0
0.24120762944221497
-0.86101275682449341
0
0.35664349794387817
-0.80709534883499146
0
0.46597716212272644
-0.73936831951141357
0
0.5673377513885498
-0.65899050235748291
0
0.65899109840393066
-0.56733715534210205
0
0.73936885595321655
-0.4659765362739563
0
0.80709588527679443
-0.35664290189743042
0
0.86101323366165161
-0.24120701849460602
0
0.90019834041595459
-0.121644027531147
0
0.92398089170455933
3.1940524536366866e-007
0
0.93195384740829468
0.12164465337991714
0
0.92398083209991455
0.24120762944221497
0
0.90019828081130981
0.35664346814155579
0
0.86101299524307251
0.46597704291343689
0
0.80709570646286011
0.56733757257461548
0
0.739368736743927
0.65899091958999634
0
0.65899091958999634
0.73936867713928223
0
0.56733757257461548
0.80709564685821533
0
0.46597698330879211
0.86101293563842773
0
0.3566434383392334
0.90019810199737549
0
0.24120759963989258
0.92398059368133545
0
0.12164463847875595
0.93195360898971558
0
3.3329243365187722e-007
0.92398178577423096
0 - 0.12164399027824402
0.90019917488098145
0 - 0.2412070631980896
0.86101400852203369
0 - 0.35664302110671997
0.80709660053253174
0 - 0.46597671508789063
0.73936963081359863
0 - 0.56733739376068115
0.65899175405502319
0 - 0.65899074077606201
0.56733834743499756
0 - 0.73936861753463745
0.46597763895988464
0 - 0.80709570646286011
0.35664394497871399
0 - 0.86101311445236206
0.24120801687240601
0 - 0.90019834041595459
0.12164494395256042
0 - 0.92398089170455933
5.138258529768791e-007
0 - 0.93195384740829468
5.5134296417236328e-007
0 - 1.0000007152557373
0.13052688539028168
0 - 0.99144560098648071
0.25881987810134888
0 - 0.96592652797698975
0.38268440961837769
0 - 0.92388021945953369
0.50000113248825073
0 - 0.86602598428726196
0.60876268148422241
0 - 0.79335379600524902
0.70710819959640503
0 - 0.70710712671279907
0.79335486888885498
0 - 0.60876166820526123
0.86602699756622314
0 - 0.50000011920928955
0.9238811731338501
0 - 0.3826833963394165
0.96592748165130615
0 - 0.2588188648223877
0.99144655466079712
0 - 0.1305258572101593
1.0000004768371582
0
3.5762786865234375e-007
0.99144530296325684
0
0.13052655756473541
0.96592628955841064
0
0.25881943106651306
0.92388004064559937
0
0.38268384337425232
0.86602592468261719
0
0.50000041723251343
0.7933538556098938
0
0.60876190662384033
0.7071073055267334
0
0.7071073055267334
0.60876190662384033
0
0.79335391521453857
0.5000004768371582
0
0.86602598428726196
0.38268387317657471
0
0.92388010025024414
0.25881946086883545
0
0.96592646837234497
0.13052657246589661
0
0.99144554138183594
3.4272670745849609e-007
0
1.0000007152557373
-0.13052590191364288
0
0.99144560098648071
-0.25881880521774292
0
0.96592658758163452
-0.38268327713012695
0
0.92388033866882324
-0.49999994039535522
0
0.86602622270584106
-0.60876142978668213
0
0.7933540940284729
-0.70710688829421997
0
0.70710748434066772
-0.79335349798202515
0
0.60876208543777466
-0.86602562665939331
0
0.50000059604644775
-0.92387980222702026
0
0.38268393278121948
-0.96592617034912109
0
0.25881946086883545
-0.99144524335861206
0
0.13052651286125183
-1.0000004768371582
0
2.0861625671386719e-007
-0.99144530296325684
0 - 0.1305260956287384
-0.96592628955841064
0 - 0.25881907343864441
-0.92387998104095459
0 - 0.38268357515335083
-0.86602580547332764
0 - 0.5000002384185791
-0.79335367679595947
0 - 0.60876178741455078
-0.70710700750350952
0 - 0.70710724592208862
-0.60876154899597168
0 - 0.79335391521453857
-0.5
0 - 0.86602604389190674
-0.38268330693244934
0 - 0.92388021945953369
-0.25881877541542053
0 - 0.96592652797698975
-0.13052578270435333
0 - 0.99144560098648071
5.5134296417236328e-007
0 - 1.0000007152557373
0
0 - 1.1213898827009321
0
0
0
0
0
1.1213898827009321
0
0
0
1.1213898827009321
0
0
0
0
0
-1.1213898827009321
0
0
0
0
0
;
}
// HALF
SPHERE
else if ($index == 3){
$return = ` createNode
transform - n $name
`;
createNode
nurbsCurve - n($name + "Shape") -p $return;
setAttr - k
off
".v";
setAttr
".cc" - type
"nurbsCurve"
1
110
0
no
3
111
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
5.138258529768791e-007
0 - 0.93195384740829468
-0.12164392322301865
0 - 0.92398089170455933
-0.24120698869228363
0 - 0.90019834041595459
-0.35664293169975281
0 - 0.86101311445236206
-0.46597659587860107
0 - 0.80709570646286011
-0.5673372745513916
0 - 0.739368736743927
-0.65899062156677246
0 - 0.65899085998535156
-0.7393684983253479
0 - 0.5673375129699707
-0.80709552764892578
0 - 0.46597680449485779
-0.86101287603378296
0 - 0.35664317011833191
-0.90019810199737549
0 - 0.24120725691318512
-0.92398059368133545
0 - 0.12164421379566193
-0.93195360898971558
0
1.9442057919150102e-007
-0.92398053407669067
0
0.12164460122585297
-0.90019798278808594
0
0.24120762944221497
-0.86101275682449341
0
0.35664349794387817
-0.80709534883499146
0
0.46597716212272644
-0.73936831951141357
0
0.5673377513885498
-0.65899050235748291
0
0.65899109840393066
-0.56733715534210205
0
0.73936885595321655
-0.4659765362739563
0
0.80709588527679443
-0.35664290189743042
0
0.86101323366165161
-0.24120701849460602
0
0.90019834041595459
-0.121644027531147
0
0.92398089170455933
3.1940524536366866e-007
0
0.93195384740829468
0.12164465337991714
0
0.92398083209991455
0.24120762944221497
0
0.90019828081130981
0.35664346814155579
0
0.86101299524307251
0.46597704291343689
0
0.80709570646286011
0.56733757257461548
0
0.739368736743927
0.65899091958999634
0
0.65899091958999634
0.73936867713928223
0
0.56733757257461548
0.80709564685821533
0
0.46597698330879211
0.86101293563842773
0
0.3566434383392334
0.90019810199737549
0
0.24120759963989258
0.92398059368133545
0
0.12164463847875595
0.93195360898971558
0
3.3329243365187722e-007
0.92398178577423096
0 - 0.12164399027824402
0.90019917488098145
0 - 0.2412070631980896
0.86101400852203369
0 - 0.35664302110671997
0.80709660053253174
0 - 0.46597671508789063
0.73936963081359863
0 - 0.56733739376068115
0.65899175405502319
0 - 0.65899074077606201
0.56733834743499756
0 - 0.73936861753463745
0.46597763895988464
0 - 0.80709570646286011
0.35664394497871399
0 - 0.86101311445236206
0.24120801687240601
0 - 0.90019834041595459
0.12164494395256042
0 - 0.92398089170455933
-4.0858293865992203e-016 - 1.9193670652839501e-007 - 0.93195384740829468
-4.584182544605268e-016
0.12009011209011078 - 0.92034361518633645
-5.0040991282065874e-016
0.23812565207481384 - 0.89034445130710083
-5.3383944451258899e-016
0.35208678245544434 - 0.85001277923583984
-5.5813478465956568e-016
0.46002358198165894 - 0.79678422212600708
-5.7288030478228297e-016
0.56008929014205933 - 0.72992247343063354
-5.7782364200201827e-016
0.65057170391082764 - 0.65057152509689331
-5.7288035772184217e-016
0.72992271184921265 - 0.560089111328125
-5.5813478465956568e-016
0.79678446054458618 - 0.46002337336540222
-5.3383944451258899e-016
0.85001301765441895 - 0.35208654403686523
-5.0040991282065874e-016
0.88869756460189819 - 0.23812536895275116
-4.584182544605268e-016
0.91217631101608276 - 0.1200898215174675
5.0726129074973869e-007
0.92004740238189697
4.0858312394837924e-016
-3.5175660995937429e-016
0.91217631101608276
0.12009083479642868
-2.8891163571255192e-016
0.88869756460189819
0.23812638223171234
-2.2112332424599425e-016
0.85001301765441895
0.35208755731582642
-1.4955147542272923e-016
0.79678440093994141
0.46002441644668579
-7.5420766535588563e-017
0.7299225926399231
0.56009012460708618
4.4998625322884706e-022
0.65057158470153809
0.65057259798049927
7.5421613568535818e-017
0.56008917093276978
0.7299235463142395
1.4955228275100708e-016
0.46002349257469177
0.79678529500961304
2.211241183393823e-016
0.35208660364151001
0.8500138521194458
2.8891245627571957e-016
0.23812545835971832
0.8935375794233027
3.5175743052254195e-016
0.12008988857269287
0.91701632583748727
3.1940524536366866e-007
0
0.93195384740829468
3.1940524536366866e-007
0
0.93195384740829468
-0.121644027531147
0
0.92398089170455933
-0.24120701849460602
0
0.90019834041595459
-0.35664290189743042
0
0.86101323366165161
-0.4659765362739563
0
0.80709588527679443
-0.56733715534210205
0
0.73936885595321655
-0.65899050235748291
0
0.65899109840393066
-0.73936831951141357
0
0.5673377513885498
-0.80709534883499146
0
0.46597716212272644
-0.86101275682449341
0
0.35664349794387817
-0.90019798278808594
0
0.24120762944221497
-0.92398053407669067
0
0.12164460122585297
-0.93195360898971558
0
1.9442057919150102e-007
-0.93195360898971558 - 1.9193670652839501e-007 - 8.5237020343418294e-023
-0.92034345163885334
0.12009011209011078
5.3330722988902747e-017
-0.89034441832518496
0.23812565207481384
1.05749032674935e-016
-0.85001277923583984
0.35208678245544434
1.5635794101928916e-016
-0.79678422212600708
0.46002358198165894
2.0429150903463042e-016
-0.72992247343063354
0.56008929014205933
2.4872961030466959e-016
-0.65057152509689331
0.65057170391082764
2.8891187394056834e-016
-0.560089111328125
0.72992271184921265
3.2415080035673178e-016
-0.46002337336540222
0.79678446054458618
3.5384338150405367e-016
-0.35208654403686523
0.85001301765441895
3.7748160937241823e-016
-0.23812536895275116
0.88869756460189819
3.9466099925973195e-016
-0.1200898215174675
0.91217631101608276
4.0508765720307716e-016
-4.0858288572036283e-016
0.92004740238189697
5.0726129074973869e-007
0.12009083479642868
0.91217631101608276
4.0508765720307716e-016
0.23812638223171234
0.88869756460189819
3.9466099925973195e-016
0.35208755731582642
0.85001301765441895
3.7748160937241823e-016
0.46002441644668579
0.79678440093994141
3.5384335503427407e-016
0.56009012460708618
0.7299225926399231
3.2415074741717258e-016
0.65057259798049927
0.65057158470153809
2.8891182100100913e-016
0.7299235463142395
0.56008917093276978
2.4872955736511039e-016
0.79678529500961304
0.46002349257469177
2.0429146932996102e-016
0.8500138521194458
0.35208660364151001
1.5635786160995036e-016
0.89034555436183282
0.23812545835971832
1.0574894664815131e-016
0.92034465153822254
0.12008988857269287
5.3330623727229241e-017
0.93195360898971558 - 3.2903434998843295e-007 - 1.4612060449989215e-022
;
}
// SPHERE
SPROG
else if ($index == 4){
$return = ` createNode - n $name
transform
`;
createNode
nurbsCurve - n($name + "Shape") -p $return;
setAttr
".cc" - type
"nurbsCurve"
1
443
0
no
3
444
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
444
0 - 1.2246467991473542e-016
1
0 - 9.8607613152626476e-032
0
0
1.2246467991473522e-016 - 1
0 - 9.8607613152626476e-032
0
1 - 9.8607613152626476e-032
0
0 - 9.8607613152626476e-032
0
-1.0000004768371582
2.5548123004866385e-023 - 2.0861625671386719e-007
-0.99144524335861206
1.5984887617939689e-017 - 0.13052651286125183
-0.96592617034912109
3.1696242431006195e-017 - 0.25881946086883545
-0.92387980222702026
4.6865265336564035e-017 - 0.38268393278121948
-0.86602562665939331
6.1232412952005005e-017 - 0.50000059604644775
-0.79335349798202515
7.4551853937363732e-017 - 0.60876208543777466
-0.70710688829421997
8.6595691735093488e-017 - 0.70710748434066772
-0.60876142978668213
9.7157855184241659e-017 - 0.7933540940284729
-0.49999994039535522
1.0605762416143801e-016 - 0.86602622270584106
-0.38268327713012695
1.1314270995459458e-016 - 0.92388033866882324
-0.25881880521774292
1.1829189036931734e-016 - 0.96592658758163452
-0.13052590191364288
1.2141706817768165e-016 - 0.99144560098648071
3.4272670745849609e-007
1.2246476750830015e-016 - 1.0000007152557373
0.13052657246589661
1.2141706087821791e-016 - 0.99144554138183594
0.25881946086883545
1.1829187577038983e-016 - 0.96592646837234497
0.38268387317657471
1.1314268075673963e-016 - 0.92388010025024414
0.5000004768371582
1.0605759496358304e-016 - 0.86602598428726196
0.60876190662384033
9.7157833285850433e-017 - 0.79335391521453857
0.7071073055267334
8.6595669836702263e-017 - 0.7071073055267334
0.7933538556098938
7.4551832038972494e-017 - 0.60876190662384033
0.86602592468261719
6.1232391053613767e-017 - 0.50000041723251343
0.92388004064559937
4.6865254387368416e-017 - 0.38268384337425232
0.96592628955841064
3.1696238781274324e-017 - 0.25881943106651306
0.99144530296325684
1.5984893092537499e-017 - 0.13052655756473541
1.0000004768371582
4.3796782364490667e-023 - 3.5762786865234375e-007
0.99144655466079712 - 1.5984807323838704e-017
0.1305258572101593
0.96592748165130615 - 3.1696169436368955e-017
0.2588188648223877
0.9238811731338501 - 4.6865199641390537e-017
0.3826833963394165
0.86602699756622314 - 6.1232354556295243e-017
0.50000011920928955
0.79335486888885498 - 7.4551802841117723e-017
0.60876166820526123
0.70710819959640503 - 8.6595647938311222e-017
0.70710712671279907
0.60876268148422241 - 9.7157818686923146e-017
0.79335379600524902
0.50000113248825073 - 1.0605759496358324e-016
0.86602598428726196
0.38268440961837769 - 1.1314269535566732e-016
0.92388021945953369
0.25881987810134888 - 1.1829188306985377e-016
0.96592652797698975
0.13052688539028168 - 1.2141706817768185e-016
0.99144560098648071
5.5134296417236328e-007 - 1.2246476750830035e-016
1.0000007152557373
-0.13052578270435333 - 1.2141706817768185e-016
0.99144560098648071
-0.25881877541542053 - 1.1829188306985377e-016
0.96592652797698975
-0.38268330693244934 - 1.1314269535566732e-016
0.92388021945953369
-0.5 - 1.0605760226304698e-016
0.86602604389190674
-0.60876154899597168 - 9.715783328585063e-017
0.79335391521453857
-0.70710700750350952 - 8.6595662537238718e-017
0.70710724592208862
-0.79335367679595947 - 7.4551817440045207e-017
0.60876178741455078
-0.86602580547332764 - 6.1232369155222739e-017
0.5000002384185791
-0.92387998104095459 - 4.6865221539781769e-017
0.38268357515335083
-0.96592628955841064 - 3.1696194984492058e-017
0.25881907343864441
-0.99144530296325684 - 1.5984836521693681e-017
0.1305260956287384
-1.0000004768371582
2.5548123004866385e-023 - 2.0861625671386719e-007
-0.99144524335861206
1.5984887617939689e-017 - 0.13052651286125183
-1.0596886873245239
1.7085163161039196e-017 - 0.13951094448566437
-1.032413125038147
3.3877968200209824e-017 - 0.27663460373878479
-0.9874725341796875
5.0091110049419795e-017 - 0.40902495384216309
-0.9256361722946167
6.5447181713413773e-017 - 0.5344167947769165
-0.84796184301376343
7.9683428045536285e-017 - 0.6506645679473877
-0.75577867031097412
9.2556273240118804e-017 - 0.75577932596206665
-0.65066385269165039
1.0384544867922692e-016 - 0.84796243906021118
-0.5344160795211792
1.1335781055219838e-016 - 0.92563676834106445
-0.40902423858642578
1.2093058081754531e-016 - 0.98747313022613525
-0.27663388848304749
1.2643418669435066e-016 - 1.0324134826660156
-0.13951030373573303
1.2977447969924623e-016 - 1.0596890449523926
-0.13052590191364288
1.2141706817768165e-016 - 0.99144560098648071
3.4272670745849609e-007
1.2246476750830015e-016 - 1.0000007152557373
0.13052657246589661
1.2141706087821791e-016 - 0.99144554138183594
0.13951101899147034
1.2977447969924623e-016 - 1.0596890449523926
0.27663460373878479
1.2643417209542315e-016 - 1.0324133634567261
0.40902486443519592
1.2093055161969032e-016 - 0.98747289180755615
0.53441667556762695
1.1335778135434338e-016 - 0.92563652992248535
0.65066438913345337
1.0384542678083568e-016 - 0.84796226024627686
0.75577908754348755
9.2556244042263825e-017 - 0.75577908754348755
0.84796220064163208
7.9683406147145059e-017 - 0.65066438913345337
0.92563647031784058
6.5447152515558806e-017 - 0.5344165563583374
0.98747283220291138
5.0091095450492305e-017 - 0.40902483463287354
1.0324132442474365
3.3877964550477953e-017 - 0.2766345739364624
1.0596886873245239
1.7085170460502941e-017 - 0.13951100409030914
0.99144530296325684
1.5984893092537499e-017 - 0.13052655756473541
1.0000004768371582
4.3796782364490667e-023 - 3.5762786865234375e-007
0.99144655466079712 - 1.5984807323838704e-017
0.1305258572101593
1.0596901178359985 - 1.7085077392340405e-017
0.13951024413108826
1.032414436340332 - 3.3877887906108835e-017
0.27663394808769226
0.98747402429580688 - 5.0091037054782549e-017
0.40902435779571533
0.92563760280609131 - 6.5447116018240281e-017
0.53441625833511353
0.84796327352523804 - 7.9683369649826535e-017
0.65066409111022949
0.75578004121780396 - 9.2556222143872796e-017
0.75577890872955322
0.65066522359848022 - 1.038454121819084e-016
0.8479621410369873
0.53441733121871948 - 1.1335778135434358e-016
0.92563652992248535
0.40902546048164368 - 1.2093056621861802e-016
0.9874730110168457
0.27663505077362061 - 1.2643418669435085e-016
1.0324134826660156
0.1395113468170166 - 1.2977447969924643e-016
1.0596890449523926
0.13052688539028168 - 1.2141706817768185e-016
0.99144560098648071
5.5134296417236328e-007 - 1.2246476750830035e-016
1.0000007152557373
-0.13052578270435333 - 1.2141706817768185e-016
0.99144560098648071
-0.13951016962528229 - 1.2977447969924643e-016
1.0596890449523926
-0.2766338586807251 - 1.2643418669435085e-016
1.0324134826660156
-0.40902426838874817 - 1.2093056621861802e-016
0.9874730110168457
-0.53441613912582397 - 1.1335778865380732e-016
0.92563658952713013
-0.65066397190093994 - 1.0384542678083588e-016
0.84796226024627686
-0.75577878952026367 - 9.255623674280028e-017
0.75577902793884277
-0.84796202182769775 - 7.968339154821776e-017
0.65066426992416382
-0.92563635110855103 - 6.5447130617167765e-017
0.53441637754440308
-0.9874727725982666 - 5.0091062602905658e-017
0.40902456641197205
-1.0324132442474365 - 3.3877917103963815e-017
0.27663418650627136
-1.0596886873245239 - 1.7085108415061314e-017
0.13951049745082855
-0.99144530296325684 - 1.5984836521693681e-017
0.1305260956287384
-1.0000004768371582
2.5548123004866385e-023 - 2.0861625671386719e-007
-0.99144524335861206
1.5984887617939689e-017 - 0.13052651286125183
-1.0000004768371582
2.5548123004866385e-023 - 2.0861625671386719e-007
-0.99144530296325684 - 1.5984836521693681e-017
0.1305260956287384
-1.0596886873245239 - 1.7085108415061314e-017
0.13951049745082855
-1.0324132442474365 - 3.3877917103963815e-017
0.27663418650627136
-0.9874727725982666 - 5.0091062602905658e-017
0.40902456641197205
-0.92563635110855103 - 6.5447130617167765e-017
0.53441637754440308
-0.84796202182769775 - 7.968339154821776e-017
0.65066426992416382
-0.75577878952026367 - 9.255623674280028e-017
0.75577902793884277
-0.65066397190093994 - 1.0384542678083588e-016
0.84796226024627686
-0.53441613912582397 - 1.1335778865380732e-016
0.92563658952713013
-0.40902426838874817 - 1.2093056621861802e-016
0.9874730110168457
-0.2766338586807251 - 1.2643418669435085e-016
1.0324134826660156
-0.13951016962528229 - 1.2977447969924643e-016
1.0596890449523926
-0.13052578270435333 - 1.2141706817768185e-016
0.99144560098648071
5.5134296417236328e-007 - 1.2246476750830035e-016
1.0000007152557373
0.13052688539028168 - 1.2141706817768185e-016
0.99144560098648071
0.1395113468170166 - 1.2977447969924643e-016
1.0596890449523926
0.27663505077362061 - 1.2643418669435085e-016
1.0324134826660156
0.40902546048164368 - 1.2093056621861802e-016
0.9874730110168457
0.53441733121871948 - 1.1335778135434358e-016
0.92563652992248535
0.65066522359848022 - 1.038454121819084e-016
0.8479621410369873
0.75578004121780396 - 9.2556222143872796e-017
0.75577890872955322
0.84796327352523804 - 7.9683369649826535e-017
0.65066409111022949
0.92563760280609131 - 6.5447116018240281e-017
0.53441625833511353
0.98747402429580688 - 5.0091037054782549e-017
0.40902435779571533
1.032414436340332 - 3.3877887906108835e-017
0.27663394808769226
1.0596901178359985 - 1.7085077392340405e-017
0.13951024413108826
0.99144655466079712 - 1.5984807323838704e-017
0.1305258572101593
1.0000004768371582
4.3796782364490667e-023 - 3.5762786865234375e-007
0.99144530296325684
1.5984893092537499e-017 - 0.13052655756473541
1.0596886873245239
1.7085170460502941e-017 - 0.13951100409030914
1.0324132442474365
3.3877964550477953e-017 - 0.2766345739364624
0.98747283220291138
5.0091095450492305e-017 - 0.40902483463287354
0.92563647031784058
6.5447152515558806e-017 - 0.5344165563583374
0.84796220064163208
7.9683406147145059e-017 - 0.65066438913345337
0.75577908754348755
9.2556244042263825e-017 - 0.75577908754348755
0.65066438913345337
1.0384542678083568e-016 - 0.84796226024627686
0.53441667556762695
1.1335778135434338e-016 - 0.92563652992248535
0.40902486443519592
1.2093055161969032e-016 - 0.98747289180755615
0.27663460373878479
1.2643417209542315e-016 - 1.0324133634567261
0.13951101899147034
1.2977447969924623e-016 - 1.0596890449523926
0.13052657246589661
1.2141706087821791e-016 - 0.99144554138183594
3.4272670745849609e-007
1.2246476750830015e-016 - 1.0000007152557373
-0.13052590191364288
1.2141706817768165e-016 - 0.99144560098648071
-0.13951030373573303
1.2977447969924623e-016 - 1.0596890449523926
-0.27663388848304749
1.2643418669435066e-016 - 1.0324134826660156
-0.40902423858642578
1.2093058081754531e-016 - 0.98747313022613525
-0.5344160795211792
1.1335781055219838e-016 - 0.92563676834106445
-0.65066385269165039
1.0384544867922692e-016 - 0.84796243906021118
-0.75577867031097412
9.2556273240118804e-017 - 0.75577932596206665
-0.84796184301376343
7.9683428045536285e-017 - 0.6506645679473877
-0.9256361722946167
6.5447181713413773e-017 - 0.5344167947769165
-0.9874725341796875
5.0091110049419795e-017 - 0.40902495384216309
-1.032413125038147
3.3877968200209824e-017 - 0.27663460373878479
-1.0596886873245239
1.7085163161039196e-017 - 0.13951094448566437
-0.99144524335861206
1.5984887617939689e-017 - 0.13052651286125183
-1.0000004768371582
2.5548123004866385e-023 - 2.0861625671386719e-007
-0.99144530296325684 - 1.5984836521693681e-017
0.1305260956287384
-0.96592628955841064 - 3.1696194984492058e-017
0.25881907343864441
-0.92387998104095459 - 4.6865221539781769e-017
0.38268357515335083
-0.86602580547332764 - 6.1232369155222739e-017
0.5000002384185791
-0.79335367679595947 - 7.4551817440045207e-017
0.60876178741455078
-0.70710700750350952 - 8.6595662537238718e-017
0.70710724592208862
-0.60876154899597168 - 9.715783328585063e-017
0.79335391521453857
-0.5 - 1.0605760226304698e-016
0.86602604389190674
-0.38268330693244934 - 1.1314269535566732e-016
0.92388021945953369
-0.25881877541542053 - 1.1829188306985377e-016
0.96592652797698975
-0.13052578270435333 - 1.2141706817768185e-016
0.99144560098648071
5.5134296417236328e-007 - 1.2246476750830035e-016
1.0000007152557373
0.13052688539028168 - 1.2141706817768185e-016
0.99144560098648071
0.25881987810134888 - 1.1829188306985377e-016
0.96592652797698975
0.38268440961837769 - 1.1314269535566732e-016
0.92388021945953369
0.50000113248825073 - 1.0605759496358324e-016
0.86602598428726196
0.60876268148422241 - 9.7157818686923146e-017
0.79335379600524902
0.70710819959640503 - 8.6595647938311222e-017
0.70710712671279907
0.79335486888885498 - 7.4551802841117723e-017
0.60876166820526123
0.86602699756622314 - 6.1232354556295243e-017
0.50000011920928955
0.9238811731338501 - 4.6865199641390537e-017
0.3826833963394165
0.96592748165130615 - 3.1696169436368955e-017
0.2588188648223877
0.99144655466079712 - 1.5984807323838704e-017
0.1305258572101593
1.0000004768371582
4.3796782364490667e-023 - 3.5762786865234375e-007
0.99144530296325684
1.5984893092537499e-017 - 0.13052655756473541
0.96592628955841064
3.1696238781274324e-017 - 0.25881943106651306
0.92388004064559937
4.6865254387368416e-017 - 0.38268384337425232
0.86602592468261719
6.1232391053613767e-017 - 0.50000041723251343
0.7933538556098938
7.4551832038972494e-017 - 0.60876190662384033
0.7071073055267334
8.6595669836702263e-017 - 0.7071073055267334
0.60876190662384033
9.7157833285850433e-017 - 0.79335391521453857
0.5000004768371582
1.0605759496358304e-016 - 0.86602598428726196
0.38268387317657471
1.1314268075673963e-016 - 0.92388010025024414
0.25881946086883545
1.1829187577038983e-016 - 0.96592646837234497
0.13052657246589661
1.2141706087821791e-016 - 0.99144554138183594
3.4272670745849609e-007
1.2246476750830015e-016 - 1.0000007152557373
-0.13052590191364288
1.2141706817768165e-016 - 0.99144560098648071
-0.25881880521774292
1.1829189036931734e-016 - 0.96592658758163452
-0.38268327713012695
1.1314270995459458e-016 - 0.92388033866882324
-0.49999994039535522
1.0605762416143801e-016 - 0.86602622270584106
-0.60876142978668213
9.7157855184241659e-017 - 0.7933540940284729
-0.70710688829421997
8.6595691735093488e-017 - 0.70710748434066772
-0.79335349798202515
7.4551853937363732e-017 - 0.60876208543777466
-0.86602562665939331
6.1232412952005005e-017 - 0.50000059604644775
-0.92387980222702026
4.6865265336564035e-017 - 0.38268393278121948
-0.96592617034912109
3.1696242431006195e-017 - 0.25881946086883545
-0.99144524335861206
1.5984887617939689e-017 - 0.13052651286125183
-1.0000004768371582
2.5548123004866385e-023 - 2.0861625671386719e-007
0 - 9.8607613152626476e-032
0
1 - 9.8607613152626476e-032
0
0 - 9.8607613152626476e-032
0
0
1.2246467991473522e-016 - 1
0 - 9.8607613152626476e-032
0
0 - 1.2246467991473542e-016
1
0 - 9.8607613152626476e-032
0
0
1.2246467991473522e-016 - 1
0 - 9.8607613152626476e-032
0
-4.4408920985006262e-016
1
1.2246467991473532e-016
0 - 9.8607613152626476e-032
0
4.4408942160829943e-016 - 1.0000004768371582 - 2.0861625683633193e-007
4.4029013473272907e-016 - 0.99144524335861206 - 0.13052651286125194
4.2895738976383817e-016 - 0.96592617034912109 - 0.25881946086883556
4.1028505136742955e-016 - 0.92387980222702026 - 0.38268393278121959
3.845926362530753e-016 - 0.8660256266593932 - 0.50000059604644786
3.5231972805062079e-016 - 0.79335349798202504 - 0.60876208543777477
3.1401853930211664e-016 - 0.70710688829421986 - 0.70710748434066784
2.7034438234116204e-016 - 0.60876142978668202 - 0.79335409402847301
2.2204457845525171e-016 - 0.49999994039535511 - 0.86602622270584118
1.6994551416355062e-016 - 0.38268327713012684 - 0.92388033866882324
1.1493863870348472e-016 - 0.25881880521774281 - 0.96592658758163452
5.7965144645796444e-017 - 0.13052590191364277 - 0.99144560098648071
-1.5220123270975709e-022
3.4272670758096086e-007 - 1.0000007152557373
-5.7965442430816963e-017
0.13052657246589672 - 0.99144554138183594
-1.1493892987106034e-016
0.25881946086883556 - 0.96592646837234497
-1.6994577886134663e-016
0.38268387317657482 - 0.92388010025024414
-2.2204481668326812e-016
0.50000047683715831 - 0.86602598428726185
-2.7034459409939885e-016
0.60876190662384044 - 0.79335391521453846
-3.1401872459057385e-016
0.70710730552673351 - 0.70710730552673329
-3.523198868692984e-016
0.79335385560989391 - 0.60876190662384022
-3.8459276860197331e-016
0.8660259246826173 - 0.50000041723251332
-4.1028515724654796e-016
0.92388004064559937 - 0.38268384337425221
-4.2895744270339737e-016
0.96592628955841064 - 0.25881943106651295
-4.4029016120250867e-016
0.99144530296325684 - 0.1305265575647353
-4.4408942160829943e-016
1.0000004768371582 - 3.5762786852987899e-007
-4.4029071706788031e-016
0.99144655466079712
0.13052585721015941
-4.2895797209898941e-016
0.96592748165130615
0.25881886482238781
-4.1028566017236039e-016
0.9238811731338501
0.38268339633941661
-3.8459324505800614e-016
0.86602699756622303
0.50000011920928966
-3.5232033685555163e-016
0.79335486888885487
0.60876166820526134
-3.1401912163726787e-016
0.70710819959640492
0.70710712671279918
-2.7034493820653367e-016
0.6087626814842223
0.79335379600524913
-2.2204510785084374e-016
0.50000113248825062
0.86602598428726207
-1.6994601708936305e-016
0.38268440961837757
0.92388021945953369
-1.1493911515951755e-016
0.25881987810134877
0.96592652797698975
-5.7965581397159872e-017
0.13052688539028157
0.99144560098648071
-2.4484546131569619e-022
5.5134296404989852e-007
1.0000007152557373
5.7965091706237241e-017 - 0.13052578270435344
0.99144560098648071
1.1493862546859492e-016 - 0.25881877541542064
0.96592652797698975
1.6994552739844042e-016 - 0.38268330693244945
0.92388021945953369
2.2204460492503131e-016 - 0.50000000000000011
0.86602604389190663
2.7034443528072124e-016 - 0.60876154899597179
0.79335391521453846
3.1401859224167584e-016 - 0.70710700750350963
0.70710724592208851
3.523198074599596e-016 - 0.79335367679595958
0.60876178741455067
3.845927156624141e-016 - 0.86602580547332775
0.50000023841857899
4.1028513077676835e-016 - 0.92387998104095459
0.38268357515335072
4.2895744270339737e-016 - 0.96592628955841064
0.2588190734386443
4.4029016120250867e-016 - 0.99144530296325684
0.13052609562873829
4.4408942160829943e-016 - 1.0000004768371582 - 2.0861625683633193e-007
4.4029013473272907e-016 - 0.99144524335861206 - 0.13052651286125194
4.7059631184099789e-016 - 1.0596886873245239 - 0.13951094448566451
4.5848352893702459e-016 - 1.032413125038147 - 0.2766346037387849
4.3852589745249637e-016 - 0.9874725341796875 - 0.4090249538421632
4.1106503636295275e-016 - 0.92563617229461659 - 0.53441679477691661
3.7657070484698504e-016 - 0.84796184301376332 - 0.65066456794738781
3.3563315251993148e-016 - 0.75577867031097401 - 0.75577932596206676
2.8895279621983256e-016 - 0.65066385269165028 - 0.84796243906021129
2.373284144857287e-016 - 0.53441607952117909 - 0.92563676834106456
1.8164325092336932e-016 - 0.40902423858642567 - 0.98747313022613525
1.2285012495418689e-016 - 0.27663388848304737 - 1.0324134826660156
6.1955020551943921e-017 - 0.13951030373573289 - 1.0596890449523926
5.7965144645796444e-017 - 0.13052590191364277 - 0.99144560098648071
-1.5220123270975709e-022
3.4272670758096086e-007 - 1.0000007152557373
-5.7965442430816963e-017
0.13052657246589672 - 0.99144554138183594
-6.1955338189299141e-017
0.13951101899147048 - 1.0596890449523926
-1.2285044259154212e-016
0.2766346037387849 - 1.0324133634567261
-1.8164352885605514e-016
0.40902486443519603 - 0.98747289180755615
-2.3732867918352472e-016
0.53441667556762706 - 0.92563652992248524
-2.8895303444784898e-016
0.65066438913345348 - 0.84796226024627674
-3.3563333780838869e-016
0.75577908754348766 - 0.75577908754348744
-3.7657086366566265e-016
0.84796220064163219 - 0.65066438913345326
-4.1106516871185076e-016
0.92563647031784069 - 0.53441655635833729
-4.3852602980139438e-016
0.98747283220291138 - 0.40902483463287342
-4.5848358187658379e-016
1.0324132442474365 - 0.27663457393646229
-4.7059631184099789e-016
1.0596886873245239 - 0.139511004090309
-4.4029016120250867e-016
0.99144530296325684 - 0.1305265575647353
-4.4408942160829943e-016
1.0000004768371582 - 3.5762786852987899e-007
-4.4029071706788031e-016
0.99144655466079712
0.13052585721015941
-4.7059694711570834e-016
1.0596901178359985
0.1395102441310884
-4.5848411127217582e-016
1.032414436340332
0.27663394808769237
-4.3852655919698641e-016
0.98747402429580688
0.40902435779571544
-4.1106567163766319e-016
0.9256376028060912
0.53441625833511364
-3.7657134012169548e-016
0.84796327352523793
0.6506640911102296
-3.3563376132486231e-016
0.75578004121780384
0.75577890872955333
-2.889534050247634e-016
0.65066522359848011
0.84796214103698742
-2.3732897035110034e-016
0.53441733121871937
0.92563652992248546
-1.8164379355385115e-016
0.40902546048164357
0.9874730110168457
-1.2285064111488913e-016
0.27663505077362049
1.0324134826660156
-6.1955483773086951e-017
0.13951134681701646
1.0596890449523926
-5.7965581397159872e-017
0.13052688539028157
0.99144560098648071
-2.4484546131569619e-022
5.5134296404989852e-007
1.0000007152557373
5.7965091706237241e-017 - 0.13052578270435344
0.99144560098648071
6.1954960994939817e-017 - 0.13951016962528243
1.0596890449523926
1.2285011171929709e-016 - 0.27663385868072521
1.0324134826660156
1.8164326415825912e-016 - 0.40902426838874828
0.9874730110168457
2.373284409555083e-016 - 0.53441613912582409
0.92563658952713002
2.8895284915939176e-016 - 0.65066397190094005
0.84796226024627674
3.3563320545949068e-016 - 0.75577878952026378
0.75577902793884266
3.7657078425632384e-016 - 0.84796202182769786
0.65066426992416371
4.1106511577229156e-016 - 0.92563635110855114
0.53441637754440297
4.3852600333161478e-016 - 0.9874727725982666
0.40902456641197193
4.5848358187658379e-016 - 1.0324132442474365
0.27663418650627125
4.7059631184099789e-016 - 1.0596886873245239
0.13951049745082841
4.4029016120250867e-016 - 0.99144530296325684
0.13052609562873829
4.4408942160829943e-016 - 1.0000004768371582 - 2.0861625683633193e-007
0 - 9.8607613152626476e-032
0
-9.8607613152626476e-032
1 - 9.9579925010295987e-017
0 - 9.8607613152626476e-032
0
-1 - 1.6799045391712068e-031
5.6655388976479796e-016
0 - 9.8607613152626476e-032
0
1.0000004768371582
2.0861625671386719e-007 - 5.6655418069273588e-016
0.99144524335861206
0.13052651286125183 - 5.7470497947620734e-016
0.96592617034912109
0.25881946086883545 - 5.7302245154143327e-016
0.92387980222702026
0.38268393278121948 - 5.6153533295584959e-016
0.86602562665939331
0.50000059604644775 - 5.4044020927928447e-016
0.79335349798202515
0.60876208543777466 - 5.1009799305723016e-016
0.70710688829421997
0.70710748434066772 - 4.710278683074356e-016
0.60876142978668213
0.7933540940284729 - 4.2389829717439136e-016
0.49999994039535522
0.86602622270584106 - 3.6951573742715315e-016
0.38268327713012695
0.92388033866882324 - 3.0881063404914189e-016
0.25881880521774292
0.96592658758163452 - 2.4282169799722007e-016
0.13052590191364288
0.99144560098648071 - 1.7267803604225445e-016
-3.4272670745849609e-007
1.0000007152557373 - 9.9579802062259426e-017
-0.13052657246589661
0.99144554138183594 - 2.4777735314375042e-017
-0.25881946086883545
0.96592646837234497
5.0448287016088487e-017
-0.38268387317657471
0.92388010025024414
1.2481112579702297e-016
-0.5000004768371582
0.86602598428726196
1.9703841246405243e-016
-0.60876190662384033
0.79335391521453857
2.6589430275468299e-016
-0.7071073055267334
0.7071073055267334
3.3020070196869167e-016
-0.7933538556098938
0.60876190662384033
3.888572478449584e-016
-0.86602592468261719
0.50000041723251343
4.4086035221296227e-016
-0.92388004064559937
0.38268384337425232
4.8532020227796408e-016
-0.96592628955841064
0.25881943106651306
5.2147607703858526e-016
-0.99144530296325684
0.13052655756473541
5.4870936806872327e-016
-1.0000004768371582
3.5762786865234375e-007
5.6655412430618841e-016
-0.99144655466079712 - 0.1305258572101593
5.7470565710987428e-016
-0.96592748165130615 - 0.2588188648223877
5.7302313511052633e-016
-0.9238811731338501 - 0.3826833963394165
5.6153605622961206e-016
-0.86602699756622314 - 0.50000011920928955
5.4044093848847308e-016
-0.79335486888885498 - 0.60876166820526123
5.1009872820184469e-016
-0.70710819959640503 - 0.70710712671279907
4.710285756182328e-016
-0.60876268148422241 - 0.79335379600524902
4.2389897665137128e-016
-0.50000113248825073 - 0.86602598428726196
3.6951638907031588e-016
-0.38268440961837769 - 0.92388021945953369
3.0881126379391328e-016
-0.25881987810134888 - 0.96592652797698975
2.4282229990817427e-016
-0.13052688539028168 - 0.99144560098648071
1.7267859323476963e-016
-5.5134296417236328e-007 - 1.0000007152557373
9.9580308600909605e-017
0.13052578270435333 - 0.99144560098648071
2.477818869227541e-017
0.25881877541542053 - 0.96592652797698975 - 5.044789273436394e-017
0.38268330693244934 - 0.92388021945953369 - 1.2481079311835908e-016
0.5 - 0.86602604389190674 - 1.970381363746796e-016
0.60876154899597168 - 0.79335391521453857 - 2.6589410013922292e-016
0.70710700750350952 - 0.70710724592208862 - 3.3020053905790101e-016
0.79335367679595947 - 0.60876178741455078 - 3.8885715840808041e-016
0.86602580547332764 - 0.5000002384185791 - 4.4086030248075384e-016
0.92387998104095459 - 0.38268357515335083 - 4.8532019521813792e-016
0.96592628955841064 - 0.25881907343864441 - 5.2147611265114166e-016
0.99144530296325684 - 0.1305260956287384 - 5.487094140682752e-016
1.0000004768371582
2.0861625671386719e-007 - 5.6655418069273588e-016
0.99144524335861206
0.13052651286125183 - 5.7470497947620734e-016
1.0596886873245239
0.13951094448566437 - 6.1426323713345978e-016
1.032413125038147
0.27663460373878479 - 6.1246492493015406e-016
0.9874725341796875
0.40902495384216309 - 6.0018707950634675e-016
0.9256361722946167
0.5344167947769165 - 5.7763995826864187e-016
0.84796184301376343
0.6506645679473877 - 5.4520920941463216e-016
0.75577867031097412
0.75577932596206665 - 5.0344979406958389e-016
0.65066385269165039
0.84796243906021118 - 4.5307617276496759e-016
0.5344160795211792
0.92563676834106445 - 3.949503485837536e-016
0.40902423858642578
0.98747313022613525 - 3.3006677363682503e-016
0.27663388848304749
1.0324134826660156 - 2.5953566274433228e-016
0.13951030373573303
1.0596890449523926 - 1.8456386087433941e-016
0.13052590191364288
0.99144560098648071 - 1.7267803604225445e-016
-3.4272670745849609e-007
1.0000007152557373 - 9.9579802062259426e-017
-0.13052657246589661
0.99144554138183594 - 2.4777735314375042e-017
-0.13951101899147034
1.0596890449523926 - 2.6483245155923309e-017
-0.27663460373878479
1.0324133634567261
5.3920765479103806e-017
-0.40902486443519592
0.98747289180755615
1.3340215144038287e-016
-0.53441667556762695
0.92563652992248535
2.1060103006153943e-016
-0.65066438913345337
0.84796226024627686
2.8419642230810881e-016
-0.75577908754348755
0.75577908754348755
3.5292915698872224e-016
-0.84796220064163208
0.65066438913345337
4.1562317207025546e-016
-0.92563647031784058
0.5344165563583374
4.7120578216030672e-016
-0.98747283220291138
0.40902483463287354
5.1872591176153084e-016
-1.0324132442474365
0.2766345739364624
5.5737048924523143e-016
-1.0596886873245239
0.13951100409030914
5.8647825241803768e-016
-0.99144530296325684
0.13052655756473541
5.4870936806872327e-016
-1.0000004768371582
3.5762786865234375e-007
5.6655412430618841e-016
-0.99144655466079712 - 0.1305258572101593
5.7470565710987428e-016
-1.0596901178359985 - 0.13951024413108826
6.1426397785404385e-016
-1.032414436340332 - 0.27663394808769226
6.1246560256382099e-016
-0.98747402429580688 - 0.40902435779571533
6.0018786438316973e-016
-0.92563760280609131 - 0.53441625833511353
5.7764071531164761e-016
-0.84796327352523804 - 0.65066409111022949
5.4520997239306393e-016
-0.75578004121780396 - 0.75577890872955322
5.0345052921419852e-016
-0.65066522359848022 - 0.8479621410369873
4.530769197804342e-016
-0.53441733121871948 - 0.92563652992248535
3.9495103399615966e-016
-0.40902546048164368 - 0.9874730110168457
3.3006745403546157e-016
-0.27663505077362061 - 1.0324134826660156
2.5953632124457751e-016
-0.1395113468170166 - 1.0596890449523926
1.8456445183609796e-016
-0.13052688539028168 - 0.99144560098648071
1.7267859323476963e-016
-5.5134296417236328e-007 - 1.0000007152557373
9.9580308600909605e-017
0.13052578270435333 - 0.99144560098648071
2.477818869227541e-017
0.13951016962528229 - 1.0596890449523926
2.6483726367640986e-017
0.2766338586807251 - 1.0324134826660156 - 5.3920331492709881e-017
0.40902426838874817 - 0.9874730110168457 - 1.3340180187709729e-016
0.53441613912582397 - 0.92563658952713013 - 2.1060072020292326e-016
0.65066397190093994 - 0.84796226024627686 - 2.8419618592340538e-016
0.75577878952026367 - 0.75577902793884277 - 3.5292899407793153e-016
0.84796202182769775 - 0.65066426992416382 - 4.1562308263337742e-016
0.92563635110855103 - 0.53441637754440308 - 4.7120573242809809e-016
0.9874727725982666 - 0.40902456641197205 - 5.1872590470170467e-016
1.0324132442474365 - 0.27663418650627136 - 5.573705278255008e-016
1.0596886873245239 - 0.13951049745082855 - 5.8647830286915922e-016
0.99144530296325684 - 0.1305260956287384 - 5.487094140682752e-016
1.0000004768371582
2.0861625671386719e-007 - 5.6655418069273588e-016
0.99144524335861206
0.13052651286125183 - 5.7470497947620734e-016
;
}
//
else if ($index == 5){
$return = ` createNode
transform - n $name
`;
createNode
nurbsCurve - n($name + "Shape") -p $return;
setAttr - k
off
".v";
setAttr
".cc" - type
"nurbsCurve"
1
133
0
no
3
134
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
1.6368320879697377e-014
0.20962235150610231
2.3140424668412067
-0.027339745473508884
0.20766581871757639
2.3140425105718108
-0.054211678731619146
0.20232063502078543
2.3140425105718108
-0.080156027062836241
0.19351368438670744
2.3140425105718108
-0.10472887947965616
0.18139576183507797
2.3140425105718108
-0.12750979165470752
0.16617393891318274
2.3140425105718108
-0.14810917357302589
0.14810895628915099
2.3140425105718108
-0.16617415619705689
0.12750979165472309
2.3140425105718108
-0.18139576183506295
0.10472877083772573
2.3140425105718108
-0.19351390167058194
0.080155918420906594
2.3140425105718108
-0.20232063502076941
0.054211570089690235
2.3140425105718108
-0.20766581871756043
0.027339636831579986
2.3140425105718108
-0.20945775895932559 - 1.0864194448782202e-007
2.3140425105718108
-0.20766581871756043 - 0.027339745473524107
2.3140425105718108
-0.20232063502076941 - 0.05421167873163437
2.3140425105718108
-0.19351368438669217 - 0.080156027062849911
2.3140425105718108
-0.18139576183506287 - 0.10472887947966983
2.3140425105718108
-0.16617415619705686 - 0.12750979165472276
2.3140425105718108
-0.14810895628913606 - 0.14810906493109588
2.3140425105718108
-0.12750979165470747 - 0.16617404755512791
2.3140425105718108
-0.10472887947965616 - 0.18139576183507658
2.3140425105718108
-0.080156027062835311 - 0.19351379302865143
2.3140425105718108
-0.054211678731618314 - 0.20232063502078473
2.3140425105718108
-0.027339745473508061 - 0.20766581871757558
2.3140425105718108
1.7206339962082558e-014 - 0.20962235150610167
2.3140424356050637
0.027339745473542461 - 0.20766603600146524
2.3140425105718121
0.05421167873165271 - 0.20232096094661925
2.3140425105718121
0.080156027062868257 - 0.19351401031254128
2.3140425105718121
0.1047288794796875 - 0.18139597911896693
2.3140425105718121
0.12750979165474044 - 0.16617426483901651
2.3140425105718121
0.14810895628916751 - 0.1481091735730399
2.3140425105718121
0.16617393891320004 - 0.12751000893861159
2.3140425105718121
0.18139576183509409 - 0.10472909676355875
2.3140425105718121
0.19351390167061308 - 0.080156135704794684
2.3140425105718121
0.20232063502080236 - 0.054211787373578395
2.3140425105718121
0.20766581871759318 - 0.027339854115468118
2.3140425105718121
0.2094577589593585 - 1.0864194364984329e-007
2.3140425105718121
0.20766581871759318
0.027339636831580812
2.3140425105718121
0.20232063502080236
0.054211570089691061
2.3140425105718121
0.19351390167061308
0.080155918420907385
2.3140425105718121
0.18139576183509407
0.10472887947967222
2.3140425105718121
0.16617415619708975
0.12750979165472393
2.3140425105718121
0.14810895628916745
0.1481089562891518
2.3140425105718121
0.12750979165474038
0.16617404755512841
2.3140425105718121
0.10472887947968745
0.18139576183507802
2.3140425105718121
0.080156027062867494
0.19351368438670744
2.3140425105718121
0.054211678731651905
0.20232063502078543
2.3140425105718121
0.027339745473541632
0.20766581871757639
2.3140425105718121
1.6368341036470936e-014
0.20945775895934168
2.3140425105718121
1.6368540502047932e-014
0.20782899891905171
2.3414036822739348
1.6369195617145677e-014
0.20247957818640366
2.3682967429952968
1.6370274995738556e-014
0.19366578310978702
2.394261495641822
1.6371760184067581e-014
0.1815383000669927
2.4188536727446199
1.6373625783267535e-014
0.16630452653114161
2.441652510840608
1.6375839848511191e-014
0.14822531181230741
2.4622679038655781
1.6378364501030009e-014
0.12760995952806625
2.4803471321646562
1.6381156553439847e-014
0.10481112143207978
2.4955808242190511
1.6384168228200259e-014
0.080218930749039491
2.5077083480025717
1.6387347995816829e-014
0.054254157732152919
2.5165221838199163
1.639064143965337e-014
0.027361147936701639
2.5218715502315932
1.6393992227182339e-014 - 1.0864194406883266e-007
2.5236648892383999
0.027361039294772387
1.5753001922622978e-015
2.5218715502315932
0.054254266374113402
1.5785936627084439e-015
2.5165221838199163
0.080219039391000793
1.5817734303250157e-015
2.5077083480025717
0.10481101279014982
1.5847850784758138e-015
2.4955808242190511
0.12760995952808141
1.9809153512028791e-015
2.4803471321646562
0.14822542045426823
1.9834400170264994e-015
2.4622679038655781
0.16630452653115843
1.9856540689653489e-015
2.441652510840608
0.18153830006700869
1.9875196681653115e-015
2.4188536727446199
0.19366578310980231
1.989004856494318e-015
2.394261495641822
0.20247968682836448
1.9900842483920118e-015
2.3682967429952968
0.2078289989190677
1.9907393501849644e-015
2.3414036822739348
0.2094577589593585 - 1.0864194364984329e-007
2.3140425105718121
0.2078289989190677
1.9907393501849644e-015
2.2866812522956352
0.20247968682836448
1.9900842483920118e-015
2.2597881966668658
0.19366578310980231
1.989004856494318e-015
2.233823450810466
0.18153830006700869
1.9875196681653115e-015
2.2092312737076703
0.16630452653115843
1.9856540689653489e-015
2.1864324424018067
0.14822542045426823
1.9834400170264994e-015
2.1658170629570814
0.12760995952808141
1.9809153512028791e-015
2.1477378618184928
0.10481101279014982
1.5847850784758138e-015
2.1325041697640965
0.080218822107111107
1.5817734037154144e-015
2.1203766595608182
0.054254266374113402
1.5785936627084439e-015
2.1115628237434718
0.027361039294772387
1.5753001922622978e-015
2.1062134709120421
1.6393992227182339e-014 - 1.0864194406883266e-007
2.1044201319052309
-0.027361256578630876
1.5685986438139639e-015
2.1062134844922822
-0.054254266374082198
1.5653051999774191e-015
2.1115628509039568
-0.080219039390968042
1.5621254323608477e-015
2.1203767003015463
-0.10481123007400821
1.5591137576004483e-015
2.1325042105048233
-0.12760995952805018
1.1629835114829609e-015
2.1477378889789769
-0.14822542045423684
1.1604588456593409e-015
2.16581710369781
-0.16630452653112557
1.1582447937204911e-015
2.1864324831425335
-0.18153830006697583
1.1563791945205268e-015
2.209231307658277
-0.19366578310977106
1.1548940061915211e-015
2.2338234711808282
-0.20247968682833328
1.1538146142938293e-015
2.2597882034569854
-0.20782899891903489
1.1531595125008763e-015
2.2866812421104523
-0.20945775895932559 - 1.0864194448782202e-007
2.3140425105718108
-0.20782921620292613
1.153159485891275e-015
2.3414036313480233
-0.20247990411222294
1.1538145876842257e-015
2.3682966988595062
-0.19366600039366091
1.1548939795819191e-015
2.3942614549010908
-0.18153851735086712
1.1563791679109256e-015
2.4188536523742519
-0.16630474381501534
1.158244767110889e-015
2.4416524836801199
-0.14822563773812658
1.1604588190497385e-015
2.4622678767050905
-0.12761017681193987
1.1629834848733592e-015
2.4803471050041677
-0.10481144735789946
1.5591137309908455e-015
2.4955808106388075
-0.08021925667485931
1.5621254057512457e-015
2.5077083480025704
-0.054254483657971905
1.565305173367819e-015
2.5165221838199154
-0.027361256578630876
1.5685986438139639e-015
2.5218715502315918
-2.1728387488757189e-007
1.5719494047333302e-015
2.5236648892383982
1.6397343014711297e-014 - 0.027361365220589771
2.5218715502315932
1.6400636458547856e-014 - 0.054254375016041086
2.5165221838199163
1.640381622616442e-014 - 0.080219148032927651
2.5077083480025717
1.6406827900924819e-014 - 0.10481133871596797
2.4955808106388084
1.6409619953334682e-014 - 0.12761017681195475
2.480347105004169
1.6412144619158306e-014 - 0.14822563773814104
2.4622678767050923
1.6414358684401964e-014 - 0.16630485245697529
2.4416524836801221
1.6416224270297124e-014 - 0.18153851735088161
2.4188536523742541
1.6417709458626123e-014 - 0.19366600039367607
2.3942614549010921
1.7205465264548663e-014 - 0.20247990411223737
2.368296698859508
1.7206120366341613e-014 - 0.20782921620294059
2.3414036313480251
1.7206319805308983e-014 - 0.20945775895934099
2.3140425105718121
1.7206120339732003e-014 - 0.20782899891905013
2.2866812421104536
1.720546522463427e-014 - 0.20247957818640203
2.2597882034569872
1.7204385846041379e-014 - 0.19366578310978558
2.2338234711808314
1.7202900657712348e-014 - 0.18153830006699093
2.2092313076582792
1.7201035071817198e-014 - 0.16630463517308486
2.1864324831425352
1.7198821006573549e-014 - 0.14822542045425058
2.1658171036978118
1.6409619940029881e-014 - 0.12761006817000908
2.1477378889789782
1.640682788762003e-014 - 0.10481123007402227
2.1325042105048255
1.6403816212859618e-014 - 0.080219039390982835
2.1203767003015481
1.6400636445243041e-014 - 0.054254266374095438
2.111562850903959
1.6397343001406511e-014 - 0.02736125657864491
2.1062134844922848
1.6393992227182339e-014 - 1.0864194406883266e-007
2.1044201319052309
1.5404311788502124e-014
1.5719494313429106e-015 - 0.005327641625049972
;
}
else if ($index == 6){
$return = ` createNode
transform - n $name
`;
createNode
nurbsCurve - n($name + "Shape") -p $return;
setAttr - k
off
".v";
setAttr
".cc" - type
"nurbsCurve"
1
106
0
no
3
107
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106

107
2.0086608017437549e-007
3.0846635913783267 - 0.36432171551468362
-0.047553344957790428
3.0846635913783267 - 0.36120490784466297
-0.094293235828022973
3.0846635913783267 - 0.35190777375494825
-0.13941974172259172
3.0846635913783267 - 0.33658938777951902
-0.18216072960296406
3.0846635913783267 - 0.31551186057206426
-0.2217848981629178
3.0846635913783267 - 0.28903586515315943
-0.25761425249217484
3.0846635913783267 - 0.25761434569535868
-0.28903577194997565
3.0846635913783267 - 0.22178499136610161
-0.31551179066967638
3.0846635913783267 - 0.18216081115574992
-0.33658929457633519
3.0846635913783267 - 0.13941983492577553
-0.35190768055176447
3.0846635913783267 - 0.094293340681604776
-0.36120479134068317
3.0846635913783267 - 0.047553458549170702
-0.36432162231149984
3.0846635913783267
7.6003376282403269e-008
-0.36120476803988727
3.0846635913783267
0.047553610004344403
-0.35190763395017255
3.0846635913783267
0.09429348631157948
-0.33658924797474332
3.0846635913783267
0.13941996308015328
-0.31551172076728856
3.0846635913783267
0.18216095096052565
-0.28903570204758777
3.0846635913783267
0.22178508456928542
-0.25761420589058293
3.0846635913783267
0.25761443889854246
-0.22178485156132588
3.0846635913783267
0.28903591175475135
-0.18216070630216813
3.0846635913783267
0.31551193047445214
-0.13941973007219374
3.0846635913783267
0.33658943438111094
-0.094293247478420952
3.0846635913783267
0.35190777375494825
-0.047553385734183343
3.0846635913783267
0.36120490784466297
1.2486269278128688e-007
3.0846635913783267
0.36432171551468362
0.047553630392540867
3.0846635913783267
0.36120488454386701
0.09429348631157948
3.0846635913783267
0.35190775045415229
0.1394199514297553
3.0846635913783267
0.3365893411779271
0.18216090435893373
3.0846635913783267
0.31551186057206426
0.22178501466689757
3.0846635913783267
0.28903586515315943
0.25761436899615464
3.0846635913783267
0.25761436899615464
0.28903584185236347
3.0846635913783267
0.22178501466689757
0.3155118372712683
3.0846635913783267
0.18216088105813777
0.33658931787713114
3.0846635913783267
0.13941993977935732
0.35190768055176447
3.0846635913783267
0.094293474661181514
0.36120479134068317
3.0846635913783267
0.047553624567341878
0.36432162231149984
3.0846635913783267
1.3029150696012788e-007
0.36120525735660231
3.0846635913783267 - 0.047553371171185875
0.35190809996609163
3.0846635913783267 - 0.094293264954017922
0.33658973729145836
3.0846635913783267 - 0.13941977667378563
0.3155122100840036
3.0846635913783267 - 0.18216077620455598
0.28903621466509877
3.0846635913783267 - 0.22178494476450969
0.25761469520729796
3.0846635913783267 - 0.25761429909376676
0.22178531757724496
3.0846635913783267 - 0.28903581855156751
0.18216113736689327
3.0846635913783267 - 0.31551186057206426
0.13942013783612292
3.0846635913783267 - 0.33658938777951902
0.094293637766753188
3.0846635913783267 - 0.35190777375494825
0.047553743983921141
3.0846635913783267 - 0.36120490784466297
2.0086608017437549e-007
3.0846635913783267 - 0.36432171551468362
2.1553236257656163e-007
3.0846635913783267 - 0.39092276630547479
0.051025894617442696
3.0846635913783267 - 0.38757837976136922
0.10117851035371506
3.0846635913783267 - 0.37760240028232417
0.14959994102777752
3.0846635913783267 - 0.36116555280029627
0.19546168606308478
3.0846635913783267 - 0.33854903132086106
0.23797902125349055
3.0846635913783267 - 0.31013983876402224
0.27642449574930394
3.0846635913783267 - 0.27642407633497679
0.31014025817834939
3.0846635913783267 - 0.23797862513995932
0.33854942743439231
3.0846635913783267 - 0.19546128994955358
0.36116592561303157
3.0846635913783267 - 0.14959954491424629
0.37760277309505946
3.0846635913783267 - 0.10117811424018383
0.38757875257410451
3.0846635913783267 - 0.051025492678712488
0.39092267310229095
3.0846635913783267
1.3980477572533727e-007
0.38757826325738942
3.0846635913783267
0.051025766463064948
0.37760230707914039
3.0846635913783267
0.1011783355977454
0.36116548289790845
3.0846635913783267
0.14959971967021596
0.3385490080200651
3.0846635913783267
0.19546140645353335
0.31013986206481819
3.0846635913783267
0.23797871834314313
0.27642414623736461
3.0846635913783267
0.27642414623736461
0.23797871834314313
3.0846635913783267
0.31013988536561415
0.19546142975432931
3.0846635913783267
0.33854903132086106
0.14959973132061394
3.0846635913783267
0.36116550619870436
0.10117834724814337
3.0846635913783267
0.37760237698152821
0.051025772288263938
3.0846635913783267
0.38757835646057326
1.3397957673678153e-007
3.0846635913783267
0.39092276630547479
-0.051025510154309457
3.0846635913783267
0.38757837976136922
-0.10117809093938789
3.0846635913783267
0.37760242358312013
-0.1495994983126544
3.0846635913783267
0.36116559940188819
-0.19546122004716571
3.0846635913783267
0.3385491245240449
-0.23797853193677551
3.0846635913783267
0.31013995526800203
-0.27642398313179295
3.0846635913783267
0.27642421613975249
-0.31013972226004244
3.0846635913783267
0.23797878824553101
-0.33854889151608536
3.0846635913783267
0.1954614763559212
-0.36116538969472461
3.0846635913783267
0.1495997546214099
-0.37760226047754847
3.0846635913783267
0.10117834724814337
-0.38757823995659352
3.0846635913783267
0.051025748987467985
-0.39092267310229095
3.0846635913783267
8.1552785839780072e-008
-0.38757826325738942
3.0846635913783267 - 0.051025585881896304
-0.37760230707914039
3.0846635913783267 - 0.10117819579296967
-0.36116545959711249
3.0846635913783267 - 0.14959961481663417
-0.33854896141847324
3.0846635913783267 - 0.19546133655114548
-0.31013979216243032
3.0846635913783267 - 0.23797867174155124
-0.27642402973338487
3.0846635913783267 - 0.27642412293656865
-0.23797857853836743
3.0846635913783267 - 0.31013988536561415
-0.19546124334796167
3.0846635913783267 - 0.33854905462165702
-0.14959950996305238
3.0846635913783267 - 0.36116555280029627
-0.10117807928898991
3.0846635913783267 - 0.37760240028232417
-0.051025463552717545
3.0846635913783267 - 0.38757837976136922
2.1553236257656163e-007
3.0846635913783267 - 0.39092276630547479
0
3.0846635913783267 - 0.43837652150109813
0
3.0846635913783267
0
0
3.0846635913783267
0.43837652150109813
0
3.0846635913783267
0
0.43837652150109813
3.0846635913783267
0
0
3.0846635913783267
0
-0.43837652150109813
3.0846635913783267
0
0
3.0846635913783267
0
0
0
0
;
}
else if ($index == 7){
$return = ` createNode
transform - n $name
`;
createNode
nurbsCurve - n($name + "Shape") -p $return;
setAttr - k
off
".v";
setAttr
".cc" - type
"nurbsCurve"
1
117
0
no
3
118
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
-2.1043395389167552e-005
3.0848179396447586 - 0.39100229184082447
-0.051057104685404857
3.0848179396447586 - 0.3876572292483198
-0.10121992417266205
3.0848179396447586 - 0.37767923292851674
-0.14965120475833374
3.0848179396447586 - 0.36123902700987243
-0.19552226735244058
3.0848179396447586 - 0.33861791744244113
-0.2380482548504452
3.0848179396447586 - 0.31020299061620438
-0.27650152036091641
3.0848179396447586 - 0.27648036141809346
-0.31022414955902688
3.0848179396447586 - 0.23802709590762233
-0.33863910139246001
3.0848179396447586 - 0.19550109590601988
-0.36126018595269555
3.0848179396447586 - 0.14963004581551068
-0.37770039187133969
3.0848179396447586 - 0.10119877773343738
-0.38767836318394672
3.0848179396447586 - 0.051035967623878839
-0.39102345078364725
3.0848179396447586
8.1569374123301462e-008
-0.38767833817675051
3.0848179396447586
0.05103613017065415
-0.37770034185694729
3.0848179396447586
0.10119893402841376
-0.36126013593830275
3.0848179396447586
0.14963018335509001
-0.33863902637087162
3.0848179396447586
0.19550124594919704
-0.31022407453743817
3.0848179396447586
0.23802719593640723
-0.27650147034652395
3.0848179396447586
0.27648046144687849
-0.23804820483605282
3.0848179396447586
0.31020304063059623
-0.19552224234524451
3.0848179396447586
0.33861799246402979
-0.14965119225473553
3.0848179396447586
0.36123907702426489
-0.1012199366762602
3.0848179396447586
0.37767923292851674
-0.051057148447998184
3.0848179396447586
0.3876572292483198
-2.1124964775215209e-005
3.0848179396447586
0.39100229184082447
0.0510148930803433
3.0848179396447586
0.3876572042411241
0.10117767505680621
3.0848179396447586
0.37767920792132076
0.1496089118798842
3.0848179396447586
0.36123897699548002
0.19547993696319688
3.0848179396447586
0.33861791744244113
0.23800586194321097
3.0848179396447586
0.31020299061620438
0.27645912745368245
3.0848179396447586
0.27648038642528994
0.31018170663740036
3.0848179396447586
0.23802712091481854
0.33859663346363778
3.0848179396447586
0.19550117092760827
0.36121769301667644
3.0848179396447586
0.14963015834789375
0.37765787392812467
3.0848179396447586
0.1011989215248156
0.38763584524073169
3.0848179396447586
0.051036145800151797
0.39098093284043189
3.0848179396447586
1.3983321789324259e-007
0.38763634538465558
3.0848179396447586 - 0.051035873846893044
0.37765832405765615
3.0848179396447586 - 0.10119869646004986
0.36121814314620782
3.0848179396447586 - 0.14962998329752042
0.33859703357877702
3.0848179396447586 - 0.19550105839522539
0.31018210675253971
3.0848179396447586 - 0.23802704589323015
0.27645947755442918
3.0848179396447586 - 0.27648031140370127
0.23800618703676171
3.0848179396447586 - 0.31020294060181158
0.19548018703515896
3.0848179396447586 - 0.33861791744244113
0.14960911193745377
3.0848179396447586 - 0.36123902700987243
0.10117783760358148
3.0848179396447586 - 0.37767923292851674
0.051015014990424795
3.0848179396447586 - 0.3876572292483198
-2.1258971607710447e-005
3.0848179172710113 - 0.39100229184082447
-2.1258971607731349e-005
3.0988166474806107 - 0.38613120576696502
-2.1258971607748974e-005
3.1125758572084927 - 0.37354502259629724
-2.1258971607762987e-005
3.1258601196767035 - 0.35662382391517128
-2.1258971607773182e-005
3.1384421357561836 - 0.33429172251422418
-2.1258971607779379e-005
3.150106631596389 - 0.30623980014802687
-2.1258971607781449e-005
3.160654018492667 - 0.27294801993324747
-2.1258971607779379e-005
3.1699038356281211 - 0.23498602079212583
-2.1258971607773182e-005
3.1776978002526053 - 0.19300332713516571
-2.1258971607762987e-005
3.1839025660450244 - 0.14771830818400705
-2.1258971607748974e-005
3.1884119603744576 - 0.099905768150315447
-2.1258971607731349e-005
3.1911488394203991 - 0.05038382058367518
-2.1046149558682358e-005
3.1920663596596714
1.7142151225146373e-016
-2.1258971607686595e-005
3.1911488394203991
0.050384245706010605
-2.1258971607660228e-005
3.1884119603744576
0.099906193272650878
-2.1258971607631809e-005
3.1839025660450244
0.14771873330634253
-2.1258971607601766e-005
3.1776977933045893
0.19300376476109929
-2.125897160757067e-005
3.1699038217320892
0.23498644591446141
-2.1258971607539018e-005
3.1606540045966343
0.27294847006277873
-2.1258971607507373e-005
3.1501066177003585
0.30624025027755869
-2.125897160747628e-005
3.138442125334159
0.33429217264375555
-2.1258971607446248e-005
3.1258600988326553
0.35662427404470259
-2.1258971607417808e-005
3.1125758346274415
0.37488470311271838
-2.1258971607391441e-005
3.0988166214255513
0.38473523775348978
-2.1124964775215209e-005
3.0848179396447586
0.39100229184082447
-2.1124964775215209e-005
3.0848179396447586
0.39100229184082447
-0.051057148447998184
3.0848179396447586
0.3876572292483198
-0.1012199366762602
3.0848179396447586
0.37767923292851674
-0.14965119225473553
3.0848179396447586
0.36123907702426489
-0.19552224234524451
3.0848179396447586
0.33861799246402979
-0.23804820483605282
3.0848179396447586
0.31020304063059623
-0.27650147034652395
3.0848179396447586
0.27648046144687849
-0.31022407453743817
3.0848179396447586
0.23802719593640723
-0.33863902637087162
3.0848179396447586
0.19550124594919704
-0.36126013593830275
3.0848179396447586
0.14963018335509001
-0.37770034185694729
3.0848179396447586
0.10119893402841376
-0.38767833817675051
3.0848179396447586
0.05103613017065415
-0.39102345078364725
3.0848179396447586
8.1569374123301462e-008
-0.39102345078364725
3.0848179172710113 - 3.5761288390666826e-023
-0.38615239612204083
3.0988166474806107
2.2374965211183386e-017
-0.37356626773030477
3.1125758572084927
4.4367126388110661e-017
-0.35664508288677849
3.1258601196767035
6.5600151183527739e-017
-0.3343129814858315
3.1384421357561836
8.5710733914879936e-017
-0.3062610591196343
3.150106631596389
1.0435478961566371e-016
-0.27296927890485462
3.160654018492667
1.2121330381857292e-016
-0.23500727976373365
3.1699038356281211
1.359978352940824e-016
-0.19302458610677339
3.1776978002526053
1.4845539133246216e-016
-0.14773956715561468
3.1839025660450244
1.5837283659790024e-016
-0.099927027121923029
3.1884119603744576
1.6558046907567455e-016
-0.050405079555282749
3.1911488394203991
1.6995498522089537e-016
-2.1258971607710444e-005
3.1920663596596714
2.1282204885666235e-007
0.050362986734403072
3.1911488394203991
1.6995498522089537e-016
0.099884934301043365
3.1884119603744576
1.6558046907567455e-016
0.14769747433473487
3.1839025660450244
1.5837283659790024e-016
0.19298250578949167
3.1776977933045893
1.4845538022703623e-016
0.23496518694285384
3.1699038217320892
1.3599781308323037e-016
0.27292721109117124
3.1606540045966343
1.2121328160772081e-016
0.30621899130595082
3.1501066177003585
1.0435476740481158e-016
0.33427091367214828
3.138442125334159
8.5710717256740933e-017
0.35660301507309511
3.1258600988326553
6.5600117867249769e-017
0.37352422641255151
3.1125758346274415
4.4367090295476123e-017
0.38611038159796479
3.0988166214255513
2.2374923565835893e-017
0.39098093284043189
3.0848179012897625 - 6.1305065056074565e-023
-0.39105418295008626
3.0848865847496945
0
-2.1258971607539018e-005
3.0848179396447586
0
-6.1473643697265655e-005
3.0848865847496945
0.39099270930638896
-2.1258971607539018e-005
3.0848179396447586
0
-6.1473643697265655e-005
3.0848865847496945 - 0.39099270930638896
-2.1258971607539018e-005
3.0848179396447586
0
0
0
0
;
}
else if ($index == 8){
$return = ` createNode
transform - n $name
`;
createNode
nurbsCurve - n($name + "Shape") -p $return;
setAttr - k
off
".v";
setAttr
".cc" - type
"nurbsCurve"
1
16
0
no
3
17
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
-0.97457881100883981 - 1.0555940475456194 - 0.97457881100884214
-0.97457881100883981
1.0555940475456198 - 0.97457881100884192
0.97457881100884414
1.0555940475456198 - 0.97457881100884103
0.97457881100884414 - 1.0555940475456194 - 0.97457881100884125
-0.97457881100883981 - 1.0555940475456194 - 0.97457881100884214
-0.9745788110088407 - 1.0555940475456198
0.97457881100884103
-0.9745788110088407
1.0555940475456194
0.97457881100884125
-0.97457881100883981
1.0555940475456198 - 0.97457881100884192
0.97457881100884414
1.0555940475456198 - 0.97457881100884103
0.97457881100884325
1.0555940475456194
0.97457881100884214
0.97457881100884325 - 1.0555940475456198
0.97457881100884192
0.97457881100884414 - 1.0555940475456194 - 0.97457881100884125
0.97457881100884325
1.0555940475456194
0.97457881100884214
-0.9745788110088407
1.0555940475456194
0.97457881100884125
-0.9745788110088407 - 1.0555940475456198
0.97457881100884103
0.97457881100884325 - 1.0555940475456198
0.97457881100884192
0.97457881100884414
1.0555940475456198 - 0.97457881100884103
;
}

return $return;
}



global proc
am_default(int $dbl ){
string $selection[] = `ls - sl`;
string $cbSel[] = `channelBox - q - sma
mainChannelBox
`;
string $cbList[];
string $nonDynamicList[] = {"tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz", "v"};

for ($sel in $selection) {
if ($dbl == 0){
// If there are no channels selected in channelbox
if (`size $cbSel` == 0){
// create a list with all keyable attributes, and add all nonkeyable attributes in cb
$cbList = `listAttr -keyable -shortNames $sel`;
string $cbNonKeyList[] = `listAttr -channelBox $sel`;
int $sizeList = `size $cbNonKeyList`;
appendStringArray($cbList, $cbNonKeyList, $sizeList);
} else {
$cbList = $cbSel;
}
} else {// create a list with all keyable attributes, and add all nonkeyable attributes in cb
$cbList = `listAttr -keyable -shortNames $sel`;
string $cbNonKeyList[] = `listAttr -channelBox $sel`;
int $sizeList = `size $cbNonKeyList`;
appendStringArray($cbList, $cbNonKeyList, $sizeList);
}
for ($attr in $cbList){
// check if attribute is translate, scale, etc (no default values for nondynamic attributes)
int $find = stringArrayFind ($attr, 0, $nonDynamicList);
if ( stringArrayContains ($attr, $nonDynamicList) ) {
if (`attributeExists ($attr + "_dv") $sel`){// Check to see if I created a default value attribute // "translateX_dv"
float $dv = `getAttr ($sel + "." + $attr + "_dv")`;
setAttr ($sel + "." + $attr) $dv;
} else if ($find < 6) {
if (catch ( `setAttr ($sel + "." + $attr) 0` ) ) {warning ("Could not reset " + $sel + "." + $attr);
} else {
setAttr ($sel + "." + $attr) 0; // If not, zero
}
} else {
if (catch ( `setAttr ($sel + "." + $attr) 1` ) ) {warning ("Could not reset " + $sel + "." + $attr);
} else {
setAttr ($sel + "." + $attr) 1;
}
}
} else {
// If not part of nonDynamicList, just query the default value
float $dv[] = `attributeQuery -listDefault -n $sel $attr`;
if ( catch (`setAttr ($sel + "." + $attr) $dv[0]` ) ){
warning ("Default Attribute fail on " + $sel + "." + $attr);
} else {
setAttr ($sel + "." + $attr) $dv[0];
}
}
}
}
}

// Set
index
color
global proc
string[]
am_setIndex(int $col){
// Change
control
to
an
index
value
string $selection[] = `ls - sl`;
if (`size $selection` == 0){
error "Nothing selected.";
}
int $nodeCount;
int $shapeCount;
int $count;
string $returnList[];
am_resetColor(0, 1);

for ($sel in $selection){
string $shapes[] = `listRelatives -s $sel`;
int $size = `size $shapes`;
// If sel has no shapes
if ($size < 1){
if ( `attributeExists "overrideColor" $sel` ){
if ( catch( `setAttr ($sel + ".overrideColor") ($col)` )){
warning ("Error. Check node: " + $sel +  " for name clashes.");
} else {
setAttr ($sel + ".overrideEnabled") 1; // off / on
setAttr ($sel + ".overrideDisplayType") 0; // normal / template / reference
setAttr ($sel + ".overrideRGBColors") 0; // index / rgb
setAttr ($sel + ".overrideColor") ($col); // the colors
$returnList[$count] = $sel;
$count++;
$nodeCount++;
}
}
} else {
for ($shape in $shapes){
if ( `attributeExists "overrideColor" $shape` ){
if ( catch( `setAttr ($shape + ".overrideColor") ($col)` )){
warning ("Error. Check shape: " + $shape +  " for name clashes.");
} else {
setAttr ($shape + ".overrideEnabled") 1;
setAttr ($shape + ".overrideDisplayType") 0;
setAttr ($shape + ".overrideRGBColors") 0;
setAttr ($shape + ".overrideColor") ($col);
$returnList[$count] = $shape;
$count++;
$shapeCount++;
}
}
}
}
}
if ($nodeCount > 0){
print ($nodeCount + " node(s) colored index color: " + $col);
}
if ($shapeCount > 0){
print ($shapeCount + " shape(s) colored index color: " + $col);
}
if ($nodeCount == 0 & & $shapeCount == 0){
warning ("No nodes or shapes colored.");
}
return $returnList;
}

/ *---------------------------------------------------------------------------------------------- * /
global proc
string[]
am_selIndex(int $color){
select - cl;
string $list[];
int $count = 0;
string $returnList[];
int $returnCount = 0;
string $shapesInScene[] = `ls - type
"shape"
`;
string $nodes[] = `ls - dag`;
int $size = `size $nodes
`;
global string $gMainProgressBar;
progressBar - edit
-beginProgress
-isInterruptable
false
-status
"Working..."
-maxValue $size
$gMainProgressBar;

for ($node in $nodes){
progressBar -edit
-step 1 $gMainProgressBar;
if ($color == 31 | | $color == 32){
// Template / Reference
$displayType = $color - 30;
if (`attributeExists "overrideDisplayType" $node` & & `getAttr ($node + ".overrideDisplayType")` == $displayType) {
$returnList[$returnCount] = $node;
$returnCount++;
if ( stringArrayContains($node, $shapesInScene) ){// if object is a shape, select the transform
string $transforms[] = `listRelatives -p $node`;
if (stringArrayContains($transforms[0], $list) == 0){// check if transform is already in the list
$list[$count] = $transforms[0];
$count++;
}
} else {
$list[$count] = $node;
$count++;
}
}
} else if ($color < 31){
if (`attributeExists "overrideColor" $node` & & `getAttr ($node + ".overrideRGBColors")` == 0 & & `getAttr ($node + ".overrideColor")` == $color){// if its the color we're looking for
$returnList[$returnCount] = $node;
$returnCount++;
if ( stringArrayContains($node, $shapesInScene) ){// if object is a shape, select the transform
string $transforms[] = `listRelatives -p $node`;
if (stringArrayContains($transforms[0], $list) == 0){// check if transform is already in the list
$list[$count] = $transforms[0];
$count++;
}
} else {
$list[$count] = $node;
$count++;
}
}
}
}

if (`size $returnList` != 0){
print "\n\nReturn List:\n";
print $returnList;
print "\nSelection List:\n";
print $list;
print ($count + " transform(s) selected.");
print "\n";
} else {
print "\nNo items found.";
}

progressBar - edit
-endProgress
$gMainProgressBar;

select - r $list;
return $returnList;
}

/ *---------------------------------------------------------------------------------------------- * /
   // Sets
RGB
color
global proc
am_setRGB(float $rgb[], int $viewport, int $outliner, int $shapes ){

string $selection[] = `ls - sl`;
int $size = `size $selection
`;
int $count;

for ($sel in $selection){

if ($viewport == 1){
string $nodes[];
if ($shapes == 1){
$nodes = `listRelatives -s $sel`;
} else {
$nodes[0] = $sel;
}
if (`size $nodes` == 0){
$nodes[0] = $sel;
}
for ($node in $nodes){
if ( catch( `setAttr ($node + ".overrideColorR") ($rgb[0])` )){
warning ("Error coloring " + $node + ". Check for name clashes.");
} else {
select -r $sel;
am_resetColor(0, $viewport);
setAttr ($node + ".overrideEnabled") 1;
setAttr ($node + ".overrideDisplayType") 0;
setAttr ($node + ".overrideRGBColors") 1;
setAttr ($node + ".overrideColorR") ($rgb[0]);
setAttr ($node + ".overrideColorG") ($rgb[1]);
setAttr ($node + ".overrideColorB") ($rgb[2]);


$count++;
}
}
}
if ($outliner == 1){
select -r $sel;
am_resetColor($outliner, 0);
setAttr ($sel + ".useOutlinerColor") 1;
setAttr ($sel + ".outlinerColorR") $rgb[0];
setAttr ($sel + ".outlinerColorG") $rgb[1];
setAttr ($sel + ".outlinerColorB") $rgb[2];
}

}
if ($shapes != 2){
print ($count + " nodes colored.\n");
}

select - r $selection;
}

/ *---------------------------------------------------------------------------------------------- * /
global proc
float[]
am_getRGB(int $outliner, int $viewport, int $shapes ){ // Pull
RGB
value
from selected control

string $selection[] = `ls - sl`;
int $size = `size $selection
`;
if ($size < 1) {error "Nothing Selected";}

if ($viewport == 1){
string $nodes[];
// check if shapes is on
if ($shapes == 1) {
$nodes = `listRelatives -s $selection[($size-1)]`;
$size = `size $nodes`;
if ($size < 1) {error "Object has no shape nodes";}
} else {
$nodes[0] = $selection[($size-1)];
$size = 1;
}
int $i = 0;
for ($i=0; $i <= $size; $i++){// for each shape
if (`getAttr ($nodes[$i] + ".overrideRGBColors")` == 0) {
if ($i == $size) {
// warning ( "RGB is off for " + $nodes[$i - $size] ); // If it's the last shape, return an error
float $rgb[];
return $rgb;
continue; // otherwise
check
again
}
} else {
    float $rgb[];
$rgb[0] = `getAttr($nodes[0] + ".overrideColorR")`;
$rgb[1] = `getAttr($nodes[0] + ".overrideColorG")`;
$rgb[2] = `getAttr($nodes[0] + ".overrideColorB")`;
print "\n";
print $rgb;
return $rgb;
}
}
}
$size = `size $selection
`;
if ($outliner == 1){
if (`getAttr($selection[$size - 1] + ".useOutlinerColor")` == 0) {error("Outliner colors is off on " + $selection[
    ($size - 1)]);}
float $rgb[];
$rgb[0] = `getAttr($selection[$size - 1] + ".outlinerColorR")`;
$rgb[1] = `getAttr($selection[$size - 1] + ".outlinerColorG")`;
$rgb[2] = `getAttr($selection[$size - 1] + ".outlinerColorB")`;
print "\n";
print $rgb;
if ($viewport == 1){warning
"Checkbox is selected for both viewport and outliner.  Returning outliner color.";}
return $rgb;
}
}

/ *---------------------------------------------------------------------------------------------- * /
   // Seach
all
nodes
for whether it's set to rgb, and then check each r g and b value, select and print list
global proc string[] am_selRGB(string $selection[], float $rgb[], int $outliner, int $viewport, int $shapes ){
select -cl;
// prepare selection list and selection count
int $count = 0;
int $countV = 0;
int $countO = 0;
string $list[];

global string $gMainProgressBar;

progressBar -edit
-beginProgress
-isInterruptable false
-status "Working..."
-maxValue 500
$gMainProgressBar;

// If Viewport checkbox is on
if ($viewport == 1){
string $nodes[];
if (`size $selection` == 0){
$nodes = `ls -dag`;
} else {
$nodes = $selection;
}

// Apply
to
an
input
array
instead if there
's a selection
string $sceneShapes[] = `ls - type
"shape"
`;
for ($node in $nodes){

progressBar -edit
-step 1 $gMainProgressBar;

// if there's an rgbcolor attribute and it's in use
if (`attributeExists "overrideColor" $node`){
if (`getAttr ($node + ".overrideRGBColors")` == 1){
float $check[];
$check[0] = ` getAttr ($node + ".overrideColorR")`;
$check[1] = ` getAttr ($node + ".overrideColorG")`;
$check[2] = ` getAttr ($node + ".overrideColorB")`;
// if the color is the same
int $check0 = am_colorApprox($check[0], $rgb[0], .01);
int $check1 = am_colorApprox($check[1], $rgb[1], .01);
int $check2 = am_colorApprox($check[2], $rgb[2], .01);
if ( $check0 == 1 & & $check1 == 1 & & $check2 == 1){

progressBar -edit
-step 1 $gMainProgressBar;

// if the object is a shape
if ( stringArrayContains($node, $sceneShapes ) & & $shapes != 2){
string $parentTransform[] = `listRelatives -p $node`;
$node = $parentTransform[0];
}
// if it's not already in the list
if ( stringArrayContains($node, $list) == 0 ){
$list[$count] = $node;
$count++;
$countV++;
}
}
}
}
}
}
// if Outliner checkbox is on
if ($outliner == 1){
string $nodes[] = `ls - dag`;
if ($shapes == 2){
if ( `window -exists am_coloredNodes`)
$nodes = `textScrollList -q -ai coloredOutlinerNodes`;
}
if (`size $selection` > 0)
$nodes = $selection;
for ($node in $nodes){
if (`attributeExists "useOutlinerColor" $node` == 1){
if (`getAttr ($node + ".useOutlinerColor")` == 1){
float $resultRGB[] = `getAttr ($node + ".outlinerColor")`;
if ($resultRGB[0] == $rgb[0] & & $resultRGB[1] == $rgb[1] & & $resultRGB[2] == $rgb[2]){
if (`stringArrayContains $node $list` == 0){
$list[$count] = $node;
$count++;
$countO++;
}
}
}
}
}
if ($viewport == 1 & & $countV > 0 & & $countO > 0){warning "Viewport and outliner options both checked. Selecting both.";}
}

progressBar - edit
- endProgress
$gMainProgressBar;

return $list;
print ($count + " nodes selected");
}

/ *---------------------------------------------------------------------------------------------- * /
global proc
int
am_colorApprox(float $value1, float $value2, float $margin ){
// returns
true if value1 is within
margin
of
value2
float $upValue = $value2 + $margin;
// 1 + .1 = 1.1
float $dnValue = $value2 - $margin;
// 1 - .1 = 0.9
if ($value1 < $upValue & & $value1 > $dnValue){
return 1;
} else {
return 0;
}
}

/ *---------------------------------------------------------------------------------------------- * /
   // Reset
viewport and outliner
color
attributes
global proc
string[]
am_resetColor(int $outliner, int $viewport ){
    string $selection[] = `ls - sl`;
string $resetList[];
for ($sel in $selection){
if (`attributeExists "overrideEnabled" $sel`){
if ($viewport == 1){
setAttr ($sel + ".overrideEnabled") 0;
setAttr ($sel + ".overrideDisplayType") 0;
setAttr ($sel + ".overrideRGBColors") 0;
setAttr ($sel + ".overrideColorR") 0;
setAttr ($sel + ".overrideColorG") 0;
setAttr ($sel + ".overrideColorB") 0;
setAttr ($sel + ".overrideColor") 0;
string $induNode[] = {$sel};
string $shapes[] = `listRelatives -s $sel`;
for ($shape in $shapes){
setAttr ($shape + ".overrideEnabled") 0;
setAttr ($shape + ".overrideDisplayType") 0;
setAttr ($shape + ".overrideRGBColors") 0;
setAttr ($shape + ".overrideColorR") 0;
setAttr ($shape + ".overrideColorG") 0;
setAttr ($shape + ".overrideColorB") 0;
setAttr ($shape + ".overrideColor") 0;
}
int $size = `size $shapes`;
appendStringArray ($resetList, $induNode, 1);
appendStringArray ($resetList, $shapes, $size);
}
if ($outliner == 1){
setAttr ($sel + ".useOutlinerColor") 0;
setAttr ($sel + ".outlinerColorR") 0;
setAttr ($sel + ".outlinerColorG") 0;
setAttr ($sel + ".outlinerColorB") 0;

string $induNode[] = {$sel};
appendStringArray ($resetList, $induNode, 1);
}
}
}
return $resetList;
}



global proc
am_setDefault(int $dbl ){
string $selection[] = `ls - sl`;
string $cbSel[] = `channelBox - q - sma
mainChannelBox
`;
string $cbList[];
string $nonDynamicList[] = {"tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz", "v"};

int $count = 0;
int $nodeCount = 0;
for ($sel in $selection) {
if ($dbl == 0){
if (`size $cbSel` == 0){
$cbList = `listAttr -keyable -sn $sel`;
string $cbNonKeyList[] = `listAttr -channelBox -sn $sel`;
int $sizeList = `size $cbNonKeyList`;
appendStringArray($cbList, $cbNonKeyList, $sizeList);
} else {
$cbList = $cbSel;
}
} else {
$cbList = `listAttr -keyable -sn $sel`;
string $cbNonKeyList[] = `listAttr -channelBox -sn $sel`;
int $sizeList = `size $cbNonKeyList`;
appendStringArray($cbList, $cbNonKeyList, $sizeList);
}

for ($attr in $cbList){
float $dv = `getAttr ($sel + "." + $attr)`;
// print ("\nAttribute: " + $attr + "\Non Dynamic List: ");
// print $nonDynamicList;
int $contains = stringArrayContains ($attr, $nonDynamicList);
// print $contains;
if ( $contains == 1 ) {
// print "got through";
string $dynAttr = ($attr + "_dv");
float $dv = `getAttr ($sel + "." + $attr)`;

if (`attributeExists $dynAttr $sel`){
setAttr ($sel + "." + $dynAttr) $dv;
} else {
addAttr -ln ($attr + "_dv") -at "float" -keyable false;
setAttr ($sel + "." + $dynAttr) $dv;
}
$count++;
} else {
if ( catch (`addAttr -e -dv $dv ($sel + "." + $attr)` ) ){
warning ("Set Default Attribute fail on " + $sel + "." + $attr);
} else {
addAttr -e -dv $dv ($sel + "." + $attr);
print ($sel + "." + $attr + ": " + $dv + "\n");
$count++;
}

}
}
$nodeCount++;
}
print ("Edited default values of " + $count + " attributes across " + $nodeCount + " nodes.");

}

// Script
to
temporarily
show
all
attributes in channelbox, and to
hide
them
again
when
selection
changes
global proc
am_showAllAttr()
{
string $selection[] = `ls - sl`;
int $size = `size $selection
`;
if (`size $selection` < 1){error "No objects selected.";}
string $sel = $selection[$size - 1];

// Establish
list
of
attributes
currently
visible
string $keyableAttrs[] = `listAttr - sn - keyable $sel
`;
string $cbUnkeyableAttrs[] = `listAttr - sn - cb $sel
`;
int $unKeySize = `size $cbUnkeyableAttrs
`;
appendStringArray($keyableAttrs, $cbUnkeyableAttrs, $unKeySize);

// List
of
all
attributes(scalar)
string $attrList[] = `listAttr - sn $sel
`;

// Remove
visible
attributes
from the list
$attrList = stringArrayRemove($keyableAttrs, $attrList);

// Unhide
all
the
attributes in the
list
int $i;
string $dispAttr[];
for ($attr in $attrList){
if ( catchQuiet ( `setAttr -k on ($sel + "." + $attr)` ) ) {
print ("" + $sel + "." + $attr + " Could not be revealed.\n");
} else {
setAttr -k on ($sel + "." + $attr);
$dispAttr[$i] = ($sel + "." + $attr);
$i++;
}
}

// Create
a
hidden
window
to
store
the
attributes
that
were
unhidden
if (`window - exists am_attrHideWin`){
deleteUI am_attrHideWin;
}

window
am_attrHideWin;
columnLayout - p
am_attrHideWin
attrHideColumn;
textScrollList - p
attrHideColumn
attrHideList;
// showWindow
am_attrHideWin;

for ($attr in $dispAttr){
textScrollList -e -append $attr attrHideList;
}

int $jobId = `scriptJob - runOnce
true - event
"SelectionChanged" "am_hideAllAttr()"
`;
print ("Rehide script job number: " + $jobId + "\n");
}

global proc
am_hideAllAttr()
{
// Error
check
if (`textScrollList - q - exists attrHideList` == 0) {error "Hide list not found!";}
// Find
the
window
that
should
hold
the
newly
displayed
attributes
string $dispAttr[] = `textScrollList - q - ai
attrHideList
`;
print "Rehiding Attributes.\n";
for ($attr in $dispAttr){
setAttr -keyable false -cb false $attr;
}
if (`window - exists am_attrHideWin`){
deleteUI am_attrHideWin;
}
}

global proc
am_protectAttr()
{
string $cbSelList[] = `channelBox - q - sma
mainChannelBox
`;
string $selection[] = `ls - sl`;
int $size = `size $selection
`;
int $count;
string $sel = $selection[$size - 1];
for ($attr in $cbSelList){
if (`textScrollList -exists attrHideList`){
textScrollList -e -ri ($sel + "." + $attr) attrHideList;
$count++;
}
// also unhide for any items selected under most recent selection.
for ($i=0; $i < ($size-1); $i++){
if ( catch ( `setAttr -k on ($selection[$i] + "." + $attr)` ) ){
print  ("" + $sel + "." + $attr + " Could not be revealed.\n");
}
}
}

print ("\n" + $count + " attributes will not automatically rehide themselves.\n");
}

global proc
string
am_smartConnect(
    string $inputNode, string $inputAttribute, string $outputNode, string $outputAttribute, int $connection, float $factor){
// connection
// 0: Standard
connection
// 1: Unit
conversion
// 2: Mult
Double
Linear
// (put
checks in here and choose
between(multDoubleLinear or multiply
divide)
// 3: Multiply
Divide
// 4: Set
range
// 5: Set
Driven
Key
//  #: Reverse

int $compound = 0;
string $inputType = `attributeQuery - node $inputNode - attributeType $inputAttribute
`;
string $outputType = `attributeQuery - node $outputNode - attributeType $outputAttribute
`;
string $IdynamicAttrs[] = `listAttr - ud $inputNode
`;
string $OdynamicAttrs[] = `listAttr - ud $outputNode
`;
string $compoundTypeList[] = {"float3", "double3"};
// Determine if attribute is a
compound
if (`stringArrayContains $inputType $compoundTypeList
`){
if (`stringArrayContains $outputType $compoundTypeList
` ){
$compound = 1;
} else {
    error
"Input attribute is a compound but output is not.";
}
} else if (`stringArrayContains $outputType $compoundTypeList` ){
error "Output attribute is a compound but input is not.  Skipping....";
}

// Error check compound
if ($compound == 1){
// If you picked multDoubleLinear, switch to multiply divide
if ($connection == 5){
error ("Compound attribute " + $inputAttribute + " could not be connected to driven key.");
}
}

string $ii = ($inputNode + "." + $inputAttribute);
string $oo = ($outputNode + "." + $outputAttribute);

// int $oldConnection = 0;

// get min / max
float $IminV = 0;
float $ImaxV = 1;
int $Imin = `attributeQuery -minExists -node $inputNode $inputAttribute`;
int $Imax = `attributeQuery -maxExists -node $inputNode $inputAttribute`;
int $Idyn = `stringArrayContains $inputAttribute $IdynamicAttrs`;
if (($Imin * $Idyn) == 1)    $IminV = `addAttr -q -min $ii`;
if (($Imax * $Idyn) == 1) $ImaxV = `addAttr -q -max $ii`;

// get min / max
float $OminV = 0;
float $OmaxV = 1;
int $Omin = `attributeQuery -minExists -node $outputNode $outputAttribute`;
int $Omax = `attributeQuery -maxExists -node $outputNode $outputAttribute`;
int $Odyn = `stringArrayContains $outputAttribute $OdynamicAttrs`;
if (($Omin * $Odyn) == 1)    $OminV = `addAttr -q -min $oo`;
if (($Omax * $Odyn) == 1) $OmaxV = `addAttr -q -max $oo`;

string $suffix[] = {"", "_UC", "_MDL", "_MDV", "_SR", "SDK"};
string $name = ($outputNode + "_" + $outputAttribute + $suffix[$connection]);

if (`objExists $name`){
print ($name + " already exists in scene. Deleting...");
delete $name;
}

// If already connected, disconnect
string $currentConnections[] = `listConnections -d off -p on -s on -scn on $oo`;
if (stringArrayContains( $ii, $currentConnections )) {
disconnectAttr $ii $oo;
} else {
if (`size $currentConnections` > 0) {
// warning ("Disconnecting " + $currentConnections[1] + " from " $oo);
disconnectAttr $currentConnections[0] $oo;
}
}

// Delete old conversion node
for ($i=0; $i < `size $suffix`; $i++){
string $oldConversion = ($outputNode + "_" + $outputAttribute + $suffix[$i]);
if (`objExists $oldConversion` & & $oldConversion != $inputNode & & $oldConversion != $outputNode){
print ("Deleting old conversion node " + $oldConversion);
delete $oldConversion;
}
}

// standard connection
if ($connection == 0){
connectAttr -f $ii $oo;
$name = "";

// unitConversion
} else if ($connection == 1){
string $uc = `createNode -n $name unitConversion`;
setAttr ($uc + ".conversionFactor") $factor;
connectAttr $ii ($uc + ".input");
connectAttr ($uc + ".output") $oo;

// mult double linear
} else if ($connection == 2){
// Check if attributes passed are compounds.If so, switch to multiply divide
string $mult = `createNode -n $name multDoubleLinear`;
setAttr ($mult + ".input2") $factor;
connectAttr $ii ($mult + ".input1");
connectAttr ($mult + ".output") $oo;

// Multiply divide
} else if ($connection == 3){
string $mult = `createNode -n $name multiplyDivide`;
string $compIn[] = {"input1X", "input1"};
string $compOut[] = {"outputX", "output"};
// Use the output max to guess the factor
setAttr ($mult + "." + "input2") ($OmaxV * $factor)  ($OmaxV * $factor) ($OmaxV * $factor);
connectAttr $ii ($mult + "." + $compIn[$compound]);
connectAttr ($mult + "." + $compOut[$compound]) $oo;

// Set Range
} else if ($connection == 4){
string $sr = `createNode -n $name setRange`;
setAttr ($sr + ".oldMin") $IminV $IminV $IminV;
setAttr ($sr + ".oldMax") $ImaxV $ImaxV $ImaxV;
setAttr ($sr + ".max") ($OmaxV * $factor) ($OmaxV * $factor) ($OmaxV * $factor);
// If object is compound
string $compIn[] = {"valueX", "value"};
string $compOut[] = {"outValueX", "outValue"};
connectAttr $ii ($sr + "." + $compIn[$compound]);
connectAttr ($sr + "." + $compOut[$compound]) $oo;

// Set driven key
} else if ($connection == 5){
// string $sdk = `createNode -n $name animCurveUU`;
if ($Imin | | $Imax){
setDrivenKeyframe -currentDriver $ii -v ($OminV * $factor) -dv ($IminV) -inTangentType "spline" -outTangentType "linear" -attribute $outputAttribute $outputNode; // ($outputNode + "." + $outputAttribute)
setDrivenKeyframe -currentDriver $ii -v ($OmaxV * $factor) -dv ($ImaxV) -inTangentType "linear" -outTangentType "spline" -attribute $outputAttribute $outputNode; // ($outputNode + "." + $outputAttribute)
} else {
setDrivenKeyframe -currentDriver $ii -v 0 -dv 0 -inTangentType "spline" -outTangentType "linear" -attribute $outputAttribute $outputNode; // ($outputNode + "." + $outputAttribute)
setDrivenKeyframe -currentDriver $ii -v $factor -dv 1 -inTangentType "linear" -outTangentType "spline" -attribute $outputAttribute $outputNode; // ($outputNode + "." + $outputAttribute)
}
// If input has no min / max value, set to infinity
string $sdk[] = `listConnections -d off -p off -s on -scn on $oo`;
if ($Imin == 0) {
setInfinity -preInfinite linear -at $outputAttribute $outputNode;
}

if ($Imax == 0){
setInfinity -postInfinite linear -at $outputAttribute $outputNode;;
}
$name  = $sdk[0];
}
return $name;
}




global proc
am_snap(string $snapTo[], string $objects[]){
int $sSize = `size $snapTo
`;
int $oSize = `size $objects
`;
if ($sSize < 1 | | $oSize < 1){
error "No objects found in arguments.";
}
if ($sSize != 1 & & $sSize != $oSize){
error "snapTo and objects arguements are unequal";
}
if ($sSize == 1 & & $oSize >= 1){
for ($o in $objects){
float $iT[] = `xform -q -ws -rp $snapTo[0]`;
float $iR[] = `xform -q -ws -ro $snapTo[0]`;
move -ws -rpr $iT[0] $iT[1] $iT[2] $o;
xform -ws -ro $iR[0] $iR[1] $iR[2] $o;
}
} else if ($sSize == $oSize){
for ($i=0; $i < $sSize; $i++){
float $iT[] = `xform -q -ws -rp $snapTo[$i]`;
float $iR[] = `xform -q -ws -ro $snapTo[$i]`;
move -ws -rpr $iT[0] $iT[1] $iT[2] $objects[$i];
xform -ws -ro $iR[0] $iR[1] $iR[2] $objects[$i];
}
} else {
error;
}
}


global proc
string[]
am_transform(string $selection[], string $direction, int $shape, string $search, string $replace){
/ *
Script
creates
a
transform
whose
position in the
world and the
heirarchy is based
on
the
selection.
* /
// string $direction; // "parent" "child" "sibling" "orphan"
// int $shape;
/ *
0 = null
1 = locator
2 = joint
3 = copy
4 = selected
5 = ------sep

6 = circle
7 = square
8 = cog
9 = circleSprog
10 = circleCross
11 = halfSphere
12 = sphereSprog
13 = sperePin
14 = circleCrossPin
15 = halfSpherePin
16 = xcube
* /

// comet
string
library

// if no list is passed to the procedure, try to get selection from scene
int $size = `size $selection
`;
if ($size < 1){
string $selection[] = `ls -sl`;
}
// If
selection
mode is incorrect, error
if (!`selectMode -q -o`){
error "Set selection mode to object";
}
// If
selection
option is used, remove
last
selection
from operating list and use as special
object

string $shapeSelectNode = $selection[$size - 1];
if ($size >= 2 & & $shape == 4 ){
string $array[] = {$shapeSelectNode};
$selection = `stringArrayRemove $array $selection`;
}
$size = `size $selection
`;
// Remove
all
non - transforms
from the list

string $dag[] = `ls - dag`;
string $nonDag[];
int $q = 0;
for ($d in $dag){
if (!`stringArrayContains $d $selection`){
$nonDag[$q] = $d;
$q++;
}
}
$selection = `stringArrayRemove $nonDag $selection
`;

// if there's still no selection, error
if (`size $selection` < 1) {error "No dag objects selected";}
// sanity
check
if ($shape < 0) {error "Shape not found.";}

string $return [];

// ----------------------------------------SEARCH / REPLACE - -----------------------------------------

int $i = 0;
for ($sel in $selection){
// if (` objectType $sel` != "transform" & & ` objectType $sel` != "joint" ) {error "Object selected is not a tranform.";}

// NAME
// Remove pipes ( obj1 | obj2 = obj2 )
string $shortName = objShortName($sel);
string $name = $shortName;

if ($search != ""){
if ($replace != ""){
// Replace $search text in $str with $replace text.
$name = strSearchReplace($shortName, $search, $replace);
if ($name == $shortName){
warning ("Search/Replace string not found for " + $name);
}
} else {
// if search field is active and replace is not, use it as a prefix
$name = ($search + "_" + $shortName);
}
} else {
if ($replace != ""){
// if search field is empty but replace is active, use it as a suffix
$name = ($shortName + "_" + $replace);
}
}

// Run a clash check? If it clashes with sel, skip, otherwise rename


float $rad = 1;
string $parent[] = `listRelatives -p $sel`;

// ----------------------------------------SHAPES------------------------------------------

// NULL
if ( $shape == 0 ) {
if ($parent[0] != ""){
$name = `createNode -n $name -p $parent[0] transform`;
} else {
$name = `createNode -n $name transform`;
}

// LOCATOR
} else if ( $shape == 1 ) {
string $names[] = `spaceLocator -n $name`;
$name = $names[0];

// JOINT
} else if ( $shape == 2 ) {
// if selected object is a joint get radius
if ( `objectType $sel` == "joint") {
$rad = `getAttr ($sel + ".radius")`;
}
if ($parent[0] != ""){
$name = `createNode -n $name -p $parent[0] joint`;
} else {
$name = `createNode -n $name joint`;
}

// COPY
} else if ( $shape == 3 ) {
string $names[] = `duplicate -renameChildren -n $name $sel`;
$name = $names[0];
string $descendents[] = ` listRelatives -c $name`;
string $shapes[] = `ls -s $descendents`;
string $children[] = stringArrayRemove($shapes, $descendents);
if (`size $children` > 0){
delete $children;
}

// SELECTED
} else if ( $shape == 4 ) {
string $names[] = `duplicate -n $name -rc $shapeSelectNode`;
string $descendents[] = `listRelatives -c $names[0]`;
string $shapes[] = `ls -s $descendents`;
string $children[] = stringArrayRemove ($shapes, $descendents);
if (`size $children` > 0){
delete $children;
}
$name = $names[0];
string $currentParent[] = `listRelatives -p $name`;
if ($parent[0] == ""){
if ($currentParent[0] != ""){
while (`objectExists("|" + $name)` ) {
rename name ($name+"clash");
}
parent - w $name;
}
} else {
if ($currentParent[0] != $parent[0]){
parent $names[0] $parent[0];
}
}

// CIRCLE
} else if ( $shape == 6 ) {
if ($name == $shortName){
$name = ($name + "_CTRL");
}
string $names[] = `circle -n $name -ch off -nr 0 1 0`;
$name = $names[0];

// SQUARE
} else if ( $shape == 7 ) {
if ($name == $shortName){
$name = ($name + "_CTRL");
}
string $names[] = ` circle -sections 4 -degree 1 -ch off -n $name -nr 0 1 0 `;
$name = $names[0];
rotate -r 0 45deg 0 $name;
makeIdentity -apply true -t 0 -r 1 -s 0 -n 0 -pn 1 $name;
} else if ( $shape > 7 ) {
if ($name == $shortName){
$name = ($name + "_CTRL");
}
int $getShape = $shape - 8;
if ( $getShape >= 0 ){
// Check if out of range, just make it a null
if ( $getShape > 15 ){
if ($name == $shortName){
$name = ($name + "");
}
$name = ` createNode - n $name
transform
`;
warning
"value out of range";
} else {
// Otherwise, grab
shape
from am_createShape()

if ($name == $shortName){
$name = ($name + "_CTRL");
}
string $newShape = am_createShape($getShape);
$name = ` rename $newShape $name
`;
}
}
}

// -------------------------------------DIRECTION - -----------------------------------------




float $selT[] = `xform - q - ws - rp $sel
`;
float $selR[] = `xform - q - ws - ro $sel
`;
move - ws - rpr $selT[0] $selT[1] $selT[2] $name;
xform - ws - ro $selR[0] $selR[1] $selR[2] $name;

// PARENT
if ($direction == "parent"){
    string $selParent[] = `listRelatives - p $sel
`;
$rad = ($rad * 1.2);
// if (` attributeExists "radius" $name` & & ` attributeExists "radius" $sel` ){
if (`attributeQuery -node $name -exists "radius"` & & `attributeQuery -node $sel -exists "radius"` ){
setAttr($name + ".radius") $rad;
}
parent $sel $name;
string $dupParent[] = `listRelatives - p $name
`;
if ($selParent[0] != "" & & $dupParent[0] != $selParent[0]){
parent $name $selParent[0];
}
// CHILD
} else if ($direction == "child"){
$rad = ($rad * .8);
// if (` attributeExists "radius" $name` & & ` attributeExists "radius" $sel` ){
if (`attributeQuery - node $name -exists "radius"` & & `attributeQuery -node $sel -exists "radius"` ){
setAttr ($name + ".radius") $rad;
}
parent $name $sel;
} else if ($direction == "child2"){
$rad = ($rad * .8);
if (`attributeQuery - node $name -exists "radius"` & & `attributeQuery -node $sel -exists "radius"` ){
// if (` attributeExists "radius" $name` & & ` attributeExists "radius" $sel` ){
setAttr ($name + ".radius") $rad;
}
string $descendents[] = ` listRelatives -c $sel`;
string $shapes[] = `ls -s $descendents`;
string $children[] = stringArrayRemove($shapes, $descendents);
parent $name $sel;
for ($child in $children){
parent $child $name;
}
// SIBLING
} else if ($direction == "sibling"){
string $parentSib[] = `listRelatives -p $sel`;
if (`size $parentSib` > 0){
string $currentParent[] = `listRelatives -p $name`;
if ($currentParent[0] != $parentSib[0]){
parent $name $parentSib[0];
}
}
// WORLD
} else if ($direction == "orphan"){
string $orphanParent[] = `listRelatives -p $name`;
if ($orphanParent[0] != ""){
parent -world $name;
}
}
$return [$i] = $name;
$i + +;
}
return $return;
}

global proc
am_widgetAddAttr(int $widgetCollapse, int $widgetWidth, string $widgetParent, float $widgetScale){
// When
min / max
used
on
dynamic
attributes, set
the
limits?

frameLayout
-w $widgetWidth
-label
"Add Attributes"
-collapsable
true
-collapse $widgetCollapse
-bgc
.3
.2
.2
-p $widgetParent
addAttrFrame;

columnLayout - columnOffset
"left"
10 - p
addAttrFrame
addAttrColumn;
$widgetWidth = $widgetWidth - 15;
int $halfWidth = ($widgetWidth / 2)-5;
int $thirdWidth = ($widgetWidth / 3)-5;
int $labelWidth = ($widgetWidth * .2);

tabLayout
-width($widgetWidth)
-innerMarginHeight
5
-innerMarginWidth
5
-p
addAttrColumn
addAttrTab;

// --------------  # ----------------
columnLayout - p
addAttrTab
floatColumn;
rowColumnLayout - numberOfColumns
3
-columnWidth
1($halfWidth - 3)
-columnWidth
2
5
-columnWidth
3($halfWidth - 3);
text - font
"obliqueLabelFont" - l
""
floatEditingText;
separator - style
"none";
text - font
"obliqueLabelFont" - l
"New Attribute"
floatIntText;
setParent..;
separator - style
"none" - height
4;
rowColumnLayout - numberOfColumns
3
-columnWidth
1($halfWidth - 3)
-columnWidth
2
5
-columnWidth
3($halfWidth - 3);

text
"Long Name";
separator - style
"none";
textField - cc
"am_generateNiceName"
lnFieldFloat;
text
"Nice Name";
separator - style
"none";
textField
nnFieldFloat;
text
"Default Value";
separator - style
"none";
floatField - pre
1 - step
1
dvFieldFloat;
setParent..;
separator - style
"none" - height
5;
rowColumnLayout - numberOfColumns
9
-columnWidth
1 $labelWidth
-columnWidth
2
3
-columnWidth
3
15
-columnWidth
4 $labelWidth
-columnWidth
5
5
-columnWidth
6 $labelWidth
-columnWidth
7
3
-columnWidth
8
15
-columnWidth
9 $labelWidth;

button - l
"Min" - c
"am_resetField(\"minFieldFloat\")";
separator - style
"none";
checkBox - v
0
minCBFloat;
floatField - cc
"am_changeField(\"minCBFloat\")" - v
0 - pre
1 - step
1
minFieldFloat;
separator - style
"none";
button - l
"Max" - c
"am_resetField(\"maxFieldFloat\")";
separator - style
"none";
checkBox - v
0
maxCBFloat;
floatField - cc
"am_changeField(\"maxCBFloat\")" - v
0 - pre
1 - step
1
maxFieldFloat;

button - l
"Soft Min" - c
"am_resetField(\"sMinFieldFloat\")";
separator - style
"none";
checkBox - v
0
sMinCBFloat;
floatField - cc
"am_changeField(\"sMinCBFloat\")" - v
0 - pre
1 - step
1
sMinFieldFloat;
separator - style
"none";
button - l
"Soft Max" - c
"am_resetField(\"sMaxFieldFloat\")";
separator - style
"none";
checkBox - v
0
sMaxCBFloat;
floatField - cc
"am_changeField(\"sMaxCBFloat\")" - v
0 - pre
1 - step
1
sMaxFieldFloat;
setParent..;

rowColumnLayout - numberOfColumns
2
-columnWidth
1 $thirdWidth
-columnWidth
2($thirdWidth * 2);

separator - style
"none" - height
5;
separator - style
"none";

columnLayout;
radioCollection
visRadioFloat;
radioButton - l
"Keyable"
visRadFloat;
radioButton - l
"Unkeyable"
keyRadFloat;
radioButton - l
"Hidden"
hideRadFloat;
radioCollection - e - select
visRadFloat
visRadioFloat;
setParent..;

columnLayout;

rowColumnLayout - numberOfColumns
5
-columnWidth
1(($thirdWidth / 3)*2)
-columnWidth
2
5
-columnWidth
3(($thirdWidth / 3)*2)
-columnWidth
4
5
-columnWidth
5(($thirdWidth / 3)*2);

iconTextButton - label
"XYZ" - c
"am_addAttr(\"XYZ\")" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4;
separator - style
"none";
iconTextButton - label
"RGB" - c
"am_addAttr(\"RGB\")" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4;
separator - style
"none";
intField - v
0
compoundField;
setParent..;

radioCollection
intFloatRadio;
rowColumnLayout - numberOfColumns
3
-columnWidth
1
10
-columnWidth
2($thirdWidth - 5)
-columnWidth
3($thirdWidth - 5);
separator - style
"none" - height
8;
separator - style
"none";
separator - style
"none";

separator - style
"none";
radioButton - label
"Int" - align
"left" - onc
"am_setIntFloat(0)" - ofc
"am_setIntFloat(1)"
intRadio;
radioButton - label
"Float" - align
"right"
floatRadio;
radioCollection - e - select
floatRadio
intFloatRadio;
setParent..;
setParent..;
setParent..;

setParent..;
tabLayout - e - tabLabel
floatColumn
"Float/Int"
addAttrTab;

// --------------ENUM - ---------------
columnLayout - p
addAttrTab
enumColumn;
rowColumnLayout - numberOfColumns
3
-columnWidth
1($halfWidth - 3)
-columnWidth
2
5
-columnWidth
3($halfWidth - 3);
text - font
"obliqueLabelFont" - l
""
enumEditingText;
separator - style
"none";
text - font
"obliqueLabelFont" - l
"New Attribute"
enumText;
setParent..;
separator - style
"none" - height
4;
rowColumnLayout - numberOfColumns
3
-columnWidth
1($halfWidth - 3)
-columnWidth
2
5
-columnWidth
3($halfWidth - 3);

text
"Long Name";
separator - style
"none";
textField - cc
"am_generateNiceName"
lnFieldEnum;
text
"Nice Name";
separator - style
"none";
textField
nnFieldEnum;
text
"Default Value";
separator - style
"none";
floatField - step
1 - pre
0
dvFieldEnum;
setParent..;
separator - style
"none" - height
5;

rowColumnLayout - numberOfColumns
3
-columnWidth
1(($thirdWidth * 2)-15)
-columnWidth
2
15
-columnWidth
3 $thirdWidth;

textScrollList
-annotation
"Enum names and values"
-allowMultiSelection
false
-deleteKeyCommand
"am_removeEnum()"
-selectCommand
"am_selectEnum()"
-h
50
enumList;
columnLayout;
button - l
"^" - w
15 - height
25 - c
"am_moveObjectInList(\"enumList\", \"up\")";
button - l
"v" - w
15 - height
25 - c
"am_moveObjectInList(\"enumList\", \"down\")";
setParent..;
// textScrollList - h
50
enumValueList;
columnLayout;
radioCollection
visRadioEnum;
radioButton - l
"Keyable"
visRadEnum;
radioButton - l
"Unkeyable"
keyRadEnum;
radioButton - l
"Hidden"
hideRadEnum;
radioCollection - e - select
visRadEnum
visRadioEnum;
setParent..;

rowColumnLayout - numberOfColumns
3
-columnWidth
1($thirdWidth - 10)
-columnWidth
2
5
-columnWidth
3($thirdWidth - 10);
button - l
"Add" - c
"am_addEnum()"
addEnum;
separator - style
"none";
button - l
"Remove" - c
"am_remEnum()"
remEnum;
setParent..;
separator - style
"none";
separator - style
"none";

setParent..;

rowColumnLayout - numberOfColumns
3
-columnWidth
1(($widgetWidth)-90)
-columnWidth
2
50
-columnWidth
3
30;
textField - annotation
"Enum name"
enumNameField;
// floatField - pre
0 - step
1 - annotation
"Enum value"
enumValueField;
button - annotation
"Reset enum fields" - c
"am_resetEnumField" - l
"X";
separator - style
"none";
setParent..;

setParent..;
tabLayout - e - tabLabel
enumColumn
"Enum"
addAttrTab;

separator - style
"none" - height
3 - p
addAttrColumn;

rowColumnLayout - numberOfColumns
5
-columnWidth
1 $thirdWidth
-columnWidth
2
5
-columnWidth
3 $thirdWidth
-columnWidth
4
5
-columnWidth
5 $thirdWidth
-p
addAttrColumn;
button - l
"Load" - c
"am_loadAttr" - annotation
"Load selected attribute in channelbox."
loadButton;
separator - style
"none";
iconTextButton - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4 - l
"New" - dcc
"am_resetAttr()" - c
"am_newAttr()"
newButton;
separator - style
"none";
button - l
"Save" - c
"am_addAttr(\"\")" - bgc
.7
.7
.7
saveButton;
setParent..;

separator - style
"single" - horizontal
true - height
10 - w $widgetWidth - p
addAttrColumn;
iconTextButton - label
"Separator" - w($widgetWidth - 5) -c
"am_cbSep(`ls -sl`)" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4 - p
addAttrColumn;
separator - style
"none" - height
5 - p
addAttrColumn;

rowColumnLayout - numberOfColumns
3
-columnWidth
1 $halfWidth
-columnWidth
2
5
-columnWidth
3 $halfWidth
-p
addAttrColumn;

iconTextButton - label
"Lock" - c
"am_lockAttr(1)" - dcc
"am_lockAttr(0);\nam_hideAttr(0);" - enable
true - rpt
true - style
"textOnly" - bgc
0.7
0.7
0.7;
separator - style
"none";
iconTextButton - label
"Shift Up (^)" - c
"am_attrShift(1)" - enable
true - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2;

separator - style
"none" - height
5;
separator - style
"none";
separator - style
"none";

iconTextButton - label
"Unlock" - c
"am_lockAttr(0)" - dcc
"am_lockAttr(0);\nam_unlockAll();" - enable
true - rpt
true - style
"textOnly" - bgc
0.7
0.7
0.7;
separator - style
"none";
iconTextButton - label
"Shift Down (v)" - c
"am_attrShift(0)" - enable
true - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2;

setParent..;
separator - style
"none" - height
5;
iconTextButton - label
"Hide" - w($widgetWidth - 4) -c
"am_hideAttr(0)" - dcc
"am_hideAttr(1)" - enable
true - rpt
true - style
"textOnly" - bgc
0.7
0.7
0.7;
separator - style
"none" - height
5;
iconTextButton - label
"Delete" - w($widgetWidth - 4) -c
"am_delAttr()" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4;
}






global proc
am_delAttr()
{
string $selection[] = `ls - sl`;
int $selSize = `size $selection
`;
string $cbSel[] = `channelBox - q - sma
mainChannelBox
`;
int $cbSize = `size $cbSel
`;

// Error
checks
if ($selSize < 1){error "No objects selected.";}
if ($cbSize < 1){error "No attributes selected.";}
for ($sel in $selection){
for ($cb in $cbSel){
if (!`attributeExists $cb $sel`){
warning ("Attribute " + $cb + " not found on node " + $sel);
} else {
// Check if attribute selection is a child
string $attrParent[] = `attributeQuery -node $sel -listParent $cb`;
if (`size $attrParent` > 0)
$cb = $attrParent[0];
string $deleteableList[] = `deleteAttr -q $sel`;
if ( stringArrayContains($cb, $deleteableList) ){
deleteAttr ($sel + "." + $cb);
} else {
warning ($sel + "." + $cb + " is not a user-defined variable and cannot be deleted.");
}

}
}
}
}





global proc
am_resetAttr()
{
int $activeTabIndex = `tabLayout - q - selectTabIndex
addAttrTab
`;
$activeTabIndex = $activeTabIndex - 1;
string $attrLabels[] = {"floatIntText", "enumText"};
string $lnFields[] = {"lnFieldFloat", "lnFieldEnum"};
string $nnFields[] = {"nnFieldFloat", "nnFieldEnum"};
string $dvFields[] = {"dvFieldFloat", "dvFieldEnum"};
string $floatFields[] = {"minFieldFloat", "maxFieldFloat", "sMinFieldFloat", "sMaxFieldFloat"};
string $CBs[] = {"minCBFloat", "maxCBFloat", "sMinCBFloat", "sMaxCBFloat"};
string $visRads[] = {"visRadioFloat", "visRadioEnum"};
string $editingText[] = {"floatEditingText", "enumEditingText"};

text - e - l
"" $editingText[$activeTabIndex];
text - e - l
"" $editingText[$activeTabIndex];

floatField - e - v
0 $dvFields[$activeTabIndex];

string $activeVisRadioCollection[] = `radioCollection - q - collectionItemArray $visRads[$activeTabIndex]`;
radioCollection - e - select $activeVisRadioCollection[0] $visRads[$activeTabIndex];


text - e - l
"New Attribute" $attrLabels[$activeTabIndex];
text - e - font
"obliqueLabelFont" $attrLabels[$activeTabIndex];
textField - e - tx
"" $lnFields[$activeTabIndex];
textField - e - tx
"" $nnFields[$activeTabIndex];

if ($activeTabIndex == 0){
for ($field in $floatFields)
floatField -e -v 0 $field;
for ($check in $CBs)
checkBox -e -v 0 $check;
intField -e -v 0 compoundField;
}
if ($activeTabIndex == 1){
textScrollList -e -ra enumList;
am_resetEnumField();
}
}


global proc
am_newAttr()
{
int $activeTabIndex = `tabLayout - q - selectTabIndex
addAttrTab
`;
$activeTabIndex = $activeTabIndex - 1;
string $attrLabels[] = {"floatIntText", "enumText"};
string $lnFields[] = {"lnFieldFloat", "lnFieldEnum"};
string $nnFields[] = {"nnFieldFloat", "nnFieldEnum"};
string $editingText[] = {"floatEditingText", "enumEditingText"};

text - e - l
"" $editingText[$activeTabIndex];
text - e - l
"" $editingText[$activeTabIndex];

text - e - l
"New Attribute" $attrLabels[$activeTabIndex];
text - e - font
"obliqueLabelFont" $attrLabels[$activeTabIndex];
// textField - e - tx
"" $lnFields[$activeTabIndex];
// textField - e - tx
"" $nnFields[$activeTabIndex];
}



global proc
am_resetEnumField()
{
textField - e - tx
""
enumNameField;
}





global proc
am_addEnum()
{
string $enum[];
string $value[];
string $inputText = `textField - q - tx
enumNameField
`;
if ($inputText == ""){error "No input text.";}
string $enumListItems[] = `textScrollList - q - ai
enumList
`;
// float $inputValue = `textField - q - tx
enumValueField
`;

// Support
multi
value
input
ie
zero:one:two:thousand = 1000
string $multiTokens[];
int $sizeMulti = `tokenize $inputText
":" $multiTokens
`;
// if ($multi > 1){
int $i = 0;
for ($multi in $multiTokens){
// int $contains = `stringArrayContains $multi $enumListItems`;
// print $contains;
// if ($contains == 0){
textScrollList -e -append $multi enumList;
//} else {
// warning ("Item: " + $multi + " already found in list.");
//}
}
am_resetEnumField();
}

global proc
am_remEnum()
{
    string $si[] = `textScrollList - q - si
enumList
`;
textScrollList - e - ri $si[0]
enumList;
}




global proc
am_resetField(string $field){
    floatField - e - v
0 $field;
}





global proc
am_changeField(string $field){
    checkBox - e - v
1 $field;
}





global proc
am_generateNiceName()
{
// Create
nice
name
from long name

int $activeTabIndex = `tabLayout - q - selectTabIndex
addAttrTab
`;
$activeTabIndex = $activeTabIndex - 1;
string $lnFields[] = {"lnFieldFloat", "lnFieldEnum"};
string $nnFields[] = {"nnFieldFloat", "nnFieldEnum"};
string $ln = `textField - q - tx $lnFields[$activeTabIndex]`;
string $nn = interToUI($ln);
textField - e - tx $nn $nnFields[$activeTabIndex];
}




global proc
am_loadAttr()
{
// Get
attribute
selected
from last selected

object
string $selection[] = `ls - sl`;
int $selSize = `size $selection
`;
string $cbSel[] = `channelBox - q - sma
mainChannelBox
`;
int $cbSize = `size $cbSel
`;

// Error
checks
if ($selSize < 1){error
"No objects selected.";}
if ($cbSize < 1){error "No attributes selected.";}
for ($sel in $selection){
if (!`attributeExists $cbSel[0] $sel`){
warning ("Attribute " + $cbSel[0] + " not found on node " + $sel);
}
}
// Get the attribute type
string $type = `attributeQuery -node $selection[$selSize-1] -attributeType $cbSel[$cbSize-1]`;
string $intTypes[] = {"int", "long"};
string $floatTypes[] = {"float", "doubleLinear", "double"};
string $enumTypes[] = {"enum"};
// Determine which tab to use
int $loadAttrTab;
if (`stringArrayContains $type $intTypes`){
$loadAttrTab = 1;
tabLayout -e -selectTabIndex ($loadAttrTab) addAttrTab;
am_setIntFloat(0);
} else if (`stringArrayContains $type $floatTypes`){
$loadAttrTab = 1;
tabLayout -e -selectTabIndex ($loadAttrTab) addAttrTab;
am_setIntFloat(1);
} else if (`stringArrayContains $type $enumTypes`){
$loadAttrTab = 2;
tabLayout -e -selectTabIndex ($loadAttrTab) addAttrTab;
}
int $activeTabIndex = `tabLayout -q -selectTabIndex addAttrTab`;
$activeTabIndex = $activeTabIndex-1;

// Remove current data from selected tab
am_resetAttr();

string $attrLabels[] = {"floatIntText", "enumText"};
string $lnFields[] = {"lnFieldFloat", "lnFieldEnum"};
string $nnFields[] = {"nnFieldFloat", "nnFieldEnum"};
string $dvFields[] = {"dvFieldFloat", "dvFieldEnum"};
string $minFields[] = {"minFieldFloat"};
string $maxFields[] = {"maxFieldFloat"};
string $sMinFields[] = {"sMinFieldFloat"};
string $sMaxFields[] = {"sMaxFieldFloat"};
string $minCB[] = {"minCBFloat"};
string $maxCB[] = {"maxCBFloat"};
string $sMinCB[] = {"sMinCBFloat"};
string $sMaxCB[] = {"sMaxCBFloat"};
string $visRads[] = {"visRadioFloat", "visRadioEnum"};

// SHARED ATTRIBUTES
string $ln = `attributeQuery -node $selection[$selSize-1] -ln $cbSel[$cbSize-1]`;
textField -e -tx $ln $lnFields[$activeTabIndex];

string $nn = `attributeQuery -node $selection[$selSize-1] -nn $cbSel[$cbSize-1]`;
textField -e -tx $nn $nnFields[$activeTabIndex];

text -e -l $ln $attrLabels[$activeTabIndex];
text -e -font "plainLabelFont" $attrLabels[$activeTabIndex];

float $dv[] = `attributeQuery -listDefault -node $selection[$selSize-1] $cbSel[$cbSize-1]`;
floatField -e -v $dv[0] $dvFields[$activeTabIndex];

int $hidden = `getAttr -cb ($selection[$selSize-1] + "." + $cbSel[$cbSize-1])`;
int $keyable = `getAttr -k ($selection[$selSize-1] + "." + $cbSel[$cbSize-1])`;
int $keyUnkeyHidden;
if ($hidden == 1 & & $keyable == 0){
$keyUnkeyHidden = 1;
} else {
$keyUnkeyHidden = 0;
}
string $activeVisRadioCollection[] = `radioCollection -q -collectionItemArray $visRads[$activeTabIndex]`;
radioCollection -e -select $activeVisRadioCollection[$keyUnkeyHidden] $visRads[$activeTabIndex];

// INT / FLOAT
if ($activeTabIndex == 0){
text -e -l "Editing..." floatEditingText;

// Min
if (`attributeQuery -node $selection[$selSize-1] -minExists $cbSel[$cbSize-1]`){
float $min[] = `attributeQuery -node $selection[$selSize-1] -min $cbSel[$cbSize-1]`;
checkBox -e -v true $minCB[$activeTabIndex];
floatField -e -v $min[0] $minFields[$activeTabIndex];
}
// Max
if (`attributeQuery -node $selection[$selSize-1] -maxExists $cbSel[$cbSize-1]`){
float $max[] = `attributeQuery -node $selection[$selSize-1] -max $cbSel[$cbSize-1]`;
checkBox -e -v true $maxCB[$activeTabIndex];
floatField -e -v $max[0] $maxFields[$activeTabIndex];
}
// Soft Min
if (`attributeQuery -node $selection[$selSize-1] -softMinExists $cbSel[$cbSize-1]`){
float $sMin[] = `attributeQuery -node $selection[$selSize-1] -softMin $cbSel[$cbSize-1]`;
checkBox -e -v true -ed false $sMinCB[$activeTabIndex];
floatField -e -v $sMin[0] $sMinFields[$activeTabIndex];
}
// Soft Max
if (`attributeQuery -node $selection[$selSize-1] -softMaxExists $cbSel[$cbSize-1]`){
float $sMax[] = `attributeQuery -node $selection[$selSize-1] -softMax $cbSel[$cbSize-1]`;
checkBox -e -v true -ed false $sMaxCB[$activeTabIndex];
floatField -e -v $sMax[0] $sMaxFields[$activeTabIndex];
}
// Float vs Int
if (`stringArrayContains $type $floatTypes`){
am_setIntFloat(1);
radioCollection -e -select floatRadio intFloatRadio;
} else if (`stringArrayContains $type $intTypes`){
am_setIntFloat(0);
radioCollection -e -select intRadio intFloatRadio;
}
// ENUM
} else if ($activeTabIndex == 1){
text -e -l "Editing..." enumEditingText;
string $enumList[] = `attributeQuery -listEnum -node $selection[$selSize-1] $cbSel[$cbSize-1]`;
string $listTokens[];
int $numTokens = `tokenize $enumList[0] ":" $listTokens`;
for ($i=0; $i < $numTokens; $i++){
string $enumName = `addAttr -q -enumName ($selection[$selSize-1] + "." + $cbSel[$cbSize-1])`;
// Convert string to separate arrays
// zero:one:two:thousand = 1000
string $listObjects[];
string $enum[];
string $value[];
int $sizeListObjects = `tokenize $enumName
":" $listObjects
`;
if ($sizeListObjects <= 0){error
"Value input error. Ex: \"zero:one:two:thousand=1000\"";}
// Add
the
separated
enum
values
to
the
list
textScrollList - e - append $listObjects[$i] enumList;
}
}
}

global proc
am_selectEnum()
{
    string $enumName[] = `textScrollList - q - si
enumList
`;
int $index[] = `textScrollList - q - sii
enumList
`;
$index[0] = $index[0] - 1;
// Seperate
the
names
from the values

string $nameValue[];
int $valueExists = `tokenize $enumName[0]
"=" $nameValue
`;
$valueExists - -;
if ($valueExists < 0){error
"Value input error. Ex: \"zero:one:two:thousand=1000\"";}
if ($valueExists > 1) {error "Value input error. Ex: \"zero:one:two:thousand=1000\"";}
string $enum = $nameValue[0];
float $value;
if ($valueExists){
$value = $nameValue[1];
} else {
$value = $index[0];
}
textField -e -tx $enumName[0] enumNameField;
// floatField -e -v $value enumValueField;
}

global proc
am_setIntFloat(int $intFloat){
                             // edit
step / precision
values
string $fields[] = {"dvFieldFloat", "minFieldFloat", "maxFieldFloat",
                    "sMinFieldFloat", "sMaxFieldFloat"};

if ($intFloat == 0) { // int
for ($field in $fields){
floatField -e -pre 0 $field;
floatField -e -step 1 $field;
}
}
if ($intFloat == 1){
for ($field in $fields){
// Update precision
float $value = `floatField -q -v $field`;
floatField -e -pre 1 $field;
floatField -e -step .1 $field;
floatField -e -v $value $field;
}
}
}

global proc
am_addAttr(string $tripleType){
                              // Get
selection
string $selection[] = `ls - sl`;
// Get
current
tab
int $activeTabIndex = `tabLayout - q - selectTabIndex
addAttrTab
`;
$activeTabIndex = $activeTabIndex - 1;
int $children = `intField - q - v
compoundField
`;
// Names
of
window
objects
library, separated
based
on
tab
string $attrLabels[] = {"floatIntText", "enumText"};
string $lnFields[] = {"lnFieldFloat", "lnFieldEnum"};
string $nnFields[] = {"nnFieldFloat", "nnFieldEnum"};
string $dvFields[] = {"dvFieldFloat", "dvFieldEnum"};
string $visRads[] = {"visRadioFloat", "visRadioEnum"};

// Check if attribute is a
loaded
attribute
string $title = `text - q - l $attrLabels[$activeTabIndex]`;
string $labelCheck = `text - q - l $attrLabels[$activeTabIndex]`;
int $newAttr = 0;
if ($labelCheck == "New Attribute"){
$newAttr = 1;
}

// Gather
shared
data
string $ln = `textField - q - tx $lnFields[$activeTabIndex]`;
string $nn = `textField - q - tx $nnFields[$activeTabIndex]`;
float $dv = `floatField - q - v $dvFields[$activeTabIndex]`;
float $dv = `floatField - q - v $dvFields[$activeTabIndex]`;
// Get
radio
value
Keyable(0) / Unkeyable(1) / Hidden(2)
string $activeVisRadioCollection[] = `radioCollection - q - collectionItemArray $visRads[$activeTabIndex]`;

for ($i = 0; $i < 3; $i + +){
$activeVisRadioCollection[$i] = objShortName($activeVisRadioCollection[$i]);
}
string $radio = `radioCollection - q - select $visRads[$activeTabIndex]`;
int $radioIndex = stringArrayFind($radio, 0, $activeVisRadioCollection);
if ($radioIndex == (-1)){error;}
// Assemble keyvisString
string $keyVisString;
$i = 0;
if ($radioIndex == 0){
$keyVisString = " -keyable true ";
} else if ($radioIndex == 1){
$keyVisString = " -keyable false -channelBox true ";
} else if ($radioIndex == 2){
$keyVisString = " -keyable false -channelBox false ";
}

// Verify
if ($ln == ""){
error "Enter a long name for attribute.";
}

// INT / FLOAT
if ($activeTabIndex == 0){
// Determine Int / Float
string $intFloat = `radioCollection -q -select intFloatRadio`;
string $floatIntString;
string $floatIntStringP;
// print $intFloat;
if ($intFloat == "intRadio"){
$floatIntString = "-at long ";
} else if ($intFloat == "floatRadio"){
$floatIntString = " -at \"float\" ";
if ($tripleType == "XYZ"){
$floatIntStringP = " -at float3 ";
} else if ($tripleType == "RGB"){
$floatIntStringP = " -at float3 -uac ";
}
} else {
error "Unsupported attribute type.";
}

string $CBs[] = {"minCBFloat", "maxCBFloat", "sMinCBFloat", "sMaxCBFloat"};
string $minMaxFields[] = {"minFieldFloat", "maxFieldFloat", "sMinFieldFloat", "sMaxFieldFloat"};
int $CBvalues[];
float $values[];
int $i = 0;
for ($CB in $CBs){
$CBvalues[$i] = `checkBox -q -v $CB`;
$i++;
}
$i = 0;
for ($minMaxField in $minMaxFields){
$values[$i] = `floatField -q -v $minMaxField`;
$i++;
}

// Assemble minMaxString
string $minMaxString;
$i = 0;

string $minMaxStringParts[] = {" -min ", " -max ", " -smn ", " -smx "};
string $hasMinMaxStringParts[] = {" -hnv ", " -hxv ", " -hsn ", " -hsx "};

// for each min max checkbox, get the value.Assign a string / value pair: " -min 1"
for ($CBv in $CBvalues){
$minMaxString = ($minMaxString + $hasMinMaxStringParts[$i] + $CBv);

if ($CBv == 1){
$minMaxString = ($minMaxString + $minMaxStringParts[$i] + $values[$i]);
}
$i++;
}

for ($objects in $selection){
if ( $tripleType == "RGB" | | $tripleType == "XYZ"){
string $eval;
string $eval2;
string $eval3;
if ($newAttr == 1 | | `attributeExists $labelCheck $objects` == 0){
$eval = ("addAttr -ln \"" + $ln + "\" -nn \"" + $nn + "\" " + $floatIntStringP + " " + $objects + ";"); // \nsetAttr" + $keyVisString + $objects + "." + $ln);
// print ("\n" + $eval);
eval($eval);
}
string $suff[];
if ($tripleType == "XYZ") {
$suff = {"X", "Y", "Z"};
} else if ($tripleType == "RGB") {
$suff = {"R", "G", "B"};
}
for ($i=0; $i < 3; $i++){
$eval2 = ("addAttr -ln \"" + ($ln + $suff[$i]) + "\" -nn \"" + ($nn + $suff[$i]) + "\" -p \"" + $ln + "\" " + $floatIntString + " " + $objects + ";"); // \nsetAttr" + $keyVisString + $objects + "." + $ln);
// print ("\n" + $eval2);
eval($eval2);
}

for ($i=0; $i < 3; $i++){
$eval3 = ("setAttr" + $keyVisString + $objects + "." + ($ln + $suff[$i]));
// print ("\n" + $eval3);
eval($eval3);
}

} else if ($children == 0 ){
// If 0 children
string $eval;
string $eval2;
if ($newAttr == 1 | | `attributeExists $labelCheck $objects` == 0){
$eval = ("addAttr -ln \"" + $ln + "\" -nn \"" + $nn + "\" -dv " + $dv + $minMaxString + " " + $floatIntString + " " + $objects + ";"); // \nsetAttr" + $keyVisString + $objects + "." + $ln);
} else {
$eval = ("addAttr -e -ln " + $ln + " -nn \"" + $nn + "\" -dv " + $dv + $minMaxString + " " + $floatIntString + " " + $objects + "." + $labelCheck + ";");
}
$eval2 = ("setAttr" + $keyVisString + $objects + "." + $ln);
// print $eval;
// print $eval2;
eval($eval);
eval($eval2);

} else if ($children > 0){
// If save button and > 0 children
string $eval;
string $eval2;
string $eval3;
if ($newAttr == 1 | | `attributeExists $labelCheck $objects` == 0){
$eval = ("addAttr -ln \"" + $ln + "\" -nn \"" + $nn + "\" -at compound -numberOfChildren " + $children + " " + $objects + ";"); // \nsetAttr" + $keyVisString + $objects + "." + $ln);
// print $eval;
eval($eval);
for ($i = 0; $i < $children; $i++){
$eval2 = ("addAttr -ln \"" + ($ln + $i) + "\" -nn \"" + ($nn + $i) + "\" -dv " + $dv + $minMaxString + " " + $floatIntString + " -p "+ $ln + " " + $objects + ";"); // \nsetAttr" + $keyVisString + $objects + "." + $ln);
// print "\n";
// print $eval2;
eval($eval2);
}

$eval3 = ("setAttr" + $keyVisString + $objects + "." + $ln);
// print "\n";
// print $eval3;
eval($eval3);

for ($i = 0; $i < $children; $i++){
$eval3 = ("setAttr" + $keyVisString + $objects + "." + ($ln+$i));
// print "\n";
// print $eval3;
eval($eval3);
}
}
}
}
}
// ENUM
if ($activeTabIndex == 1){
// Assemble enum string
string $enumList[] = `textScrollList -q -ai enumList`;
if (`size $enumList` < 1) {error "Nothing in enum list.";}
string $enumString = stringArrayToString($enumList, ":");
$enumString = ("-enumName \"" + $enumString + "\"");

for ($objects in $selection){
string $eval;
string $eval2;
if ($newAttr == 1 | | `attributeExists $labelCheck $objects` == 0){
$eval = ("addAttr -at enum -ln \"" + $ln + "\" -nn \"" + $nn + "\" -dv " + $dv + " " + $enumString + " " + $objects + ";"); // \nsetAttr" + $keyVisString + $objects + "." + $ln);
} else {
$eval = ("addAttr -e -ln \"" + $ln + "\" -nn \"" + $nn + "\" -dv " + $dv + " " + $enumString + " " + $objects + "." + $labelCheck + ";");
}
$eval2 = ("setAttr" + $keyVisString + $objects + "." + $ln);
eval($eval);
eval($eval2);
}
}
}

global proc
string[]
am_convertEnumStringToArray(string $enumName, int $enumOrValue){
                                                               // zero:one:two:thousand = 1000
string $listObjects[];
string $enum[];
string $value[];
int $sizeListObjects = `tokenize $enumName
":" $listObjects
`;
if ($sizeListObjects <= 0){error
"Value input error. Ex: \"zero:one:two:thousand=1000\"";}
for ($i=0; $i < $sizeListObjects; $i++){
string $nameValue[];
int $valueExists = `tokenize $listObjects[$i] "=" $nameValue`;
$valueExists--;
$enum[$i] = $nameValue[0];
if ($valueExists){
$value[$i] = $nameValue[1];
} else {
$value[$i] = $i;
}
}
if (!$enumOrValue){
return $enum;
} else {
return $value;
}
}



global proc
am_hideAttr(int $unhide){
    string $selection[] = `ls - sl`;
int $selSize = `size $selection
`;
string $cbSel[] = `channelBox - q - sma
mainChannelBox
`;
int $cbSize = `size $cbSel
`;
int $keyable;
int $channelBox;
if ($unhide){
$keyable = 1;
$channelBox = 1;
} else {
$keyable = 0;
$channelBox = 0;
}

if ($selSize & & $cbSize){
for ($sel in $selection){
for ($cb in $cbSel){
if (`attributeQuery -node $sel -exists $cb`){
// if (`attributeExists $cb $sel`){
setAttr -keyable $keyable -channelBox $channelBox {$sel + "." + $cb};
}
}
}
}
}

global proc
am_lockAttr(int $onOff){
string $selection[] = `ls - sl`;
int $selSize = `size $selection
`;
string $cbSel[] = `channelBox - q - sma
mainChannelBox
`;
int $cbSize = `size $cbSel
`;
if ($selSize & & $cbSize){
for ($sel in $selection){
for ($cb in $cbSel){
if (`attributeQuery -node $sel -exists $cb`){
setAttr -lock $onOff ($sel + "." + $cb);
}
}
}
}
}

global proc
am_unlockAll()
{
string $selectedList[] = `ls - sl`;
for ($currentObject in $selectedList)
{
    setAttr - lock
false - keyable
true
{$currentObject + ".tx"};
setAttr - lock
false - keyable
true
{$currentObject + ".ty"};
setAttr - lock
false - keyable
true
{$currentObject + ".tz"};
setAttr - lock
false - keyable
true
{$currentObject + ".rx"};
setAttr - lock
false - keyable
true
{$currentObject + ".ry"};
setAttr - lock
false - keyable
true
{$currentObject + ".rz"};
setAttr - lock
false - keyable
true
{$currentObject + ".sx"};
setAttr - lock
false - keyable
true
{$currentObject + ".sy"};
setAttr - lock
false - keyable
true
{$currentObject + ".sz"};
setAttr - lock
false - keyable
true
{$currentObject + ".v"};
}
}


global proc
am_widgetAttributes(int $widgetCollapse, int $widgetWidth, string $widgetParent, float $widgetScale){
/ *To
do:
When
adding
attributes
from cb selection, already in list
error
doesnt
trigger
reset
button
becomes
undo
reset
button
when
pressed?
alphabetize
button
changes
direction
when
pressed, and then
reverts if list
loses
focus?
Add
buttons
for selecting intermediate objects
Add
compound
check
* /

// am_smartConnect(
    string $inputNode, string $inputAttribute, string $outputNode, string $outputAttribute, int $connection)
frameLayout - w $widgetWidth - label
"Connect Attributes" - collapsable
true - collapse $widgetCollapse - bgc
.3
.2
.2 - p $widgetParent
attributesColumn;
columnLayout
-columnOffset
"left"
10;
separator - style
"none";

// iconTextButton - label
"Zero" - h(30 *$widgetScale) -c
"am_zero(0)" - dcc
"am_zero(1)" - enable
true - rpt
true - style
"textOnly" - bgc
0.7
0.7
0.7
zeroButton;
$widgetWidth = $widgetWidth - 10;
int $halfWidth = ($widgetWidth * .45);
int $inbtWidth = ($widgetWidth * .07);

int $columnTitleW = ($halfWidth * .65);
int $abcButtonW = ($halfWidth * .3);
int $addRemButtonW = ($halfWidth * .48);
int $XbuttonW = ($halfWidth * .1);
int $goButtonW = ($halfWidth * .55);

int $attrInputW = (($widgetWidth * .8)-5);
int $attrButtonW = (($widgetWidth * .18)-5);


rowColumnLayout - numberOfColumns
3
-columnWidth
1 $attrInputW
-columnWidth
2
5
-columnWidth
3 $attrButtonW;
button - label
"Temporarily Show Attributes" - annotation
"Temporarily show all attributes of selected node in channelbox." - c
"am_showAllAttr";
separator - style
"none";
button - label
"Save" - annotation
"After [Show Attr] select channelbox attributes to prevent them from being rehidden on deselection." - c
"am_protectAttr";
setParent..;

rowLayout - numberOfColumns
3 - columnWidth3 $halfWidth $inbtWidth $halfWidth - rowAttach
1
"top"
0 - rowAttach
2
"top"
0 - rowAttach
3
"top"
10;

// First
column
columnLayout - adjustableColumn
1 - rowSpacing
3 - columnWidth $halfWidth;
string $attr[];
separator - height
8 - style
"none";

// --------------SOURCE
NODE
LIST - ------------------
textScrollList
-height(150 *$widgetScale)
-width($halfWidth - 8)
-allowMultiSelection
true
-annotation
"Source Node List"
-selectCommand
"am_selectList(0)"
-dkc
"am_removeSrcNodes"
-dcc
"am_doubleClickSrcNodes"
srcNodeList;

rowColumnLayout - numberOfColumns
3
-columnWidth
1 $addRemButtonW
-columnWidth
2
5
-columnWidth
3 $addRemButtonW;

iconTextButton - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Add" - annotation
"Add selected nodes" - command
"am_addSrcNodes" - dcc
"am_selectAttrList(1)";
separator - style
"none";
iconTextButton - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Remove" - annotation
"Remove nodes selected in this list" - command
"am_removeSrcNodes" - dcc
"am_resetSrcNodes";
setParent..;
separator - style
"in";

// --------------SOURCE
ATTRIBUTES
LIST - ------------------
textScrollList
-height(125 *$widgetScale)
-width $halfWidth
-allowMultiSelection
true
-annotation
"Source Attribute List"
-selectCommand
"am_selectList(1)"
-dkc
"am_removeSrcAttr"
-dcc
"am_doubleClickSrcAttr"
srcAttrList;

rowColumnLayout - numberOfColumns
3
-columnWidth
1 $addRemButtonW
-columnWidth
2
5
-columnWidth
3 $addRemButtonW;
iconTextButton - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Add" - annotation
"Add selected source attributes" - command
"am_addSrcAttr" - dcc
"am_selectAttrList(2)";
separator - style
"none";
iconTextButton - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Remove" - annotation
"Remove source attributes selected in this list" - command
"am_removeSrcAttr" - dcc
"am_resetSrcAttr";
setParent..;
setParent..;

// -----------------ARROW
BUTTONS
COLUMN - -------------------
columnLayout - adj
0 - rowSpacing
4 - columnWidth $inbtWidth;
separator - style
"none" - height
7;
int $arrowButton = (68 *$widgetScale);
int $extraButton = (25 *$widgetScale);
iconTextButton - height $arrowButton - width $inbtWidth - l
"<" - style
"textOnly" - bgc
0.35
0.35
0.35 - rpt
true - command
"am_upDownLeftRightAttr(0)";
iconTextButton - height $arrowButton - width $inbtWidth - l
">" - style
"textOnly" - bgc
0.35
0.35
0.35 - rpt
true - command
"am_upDownLeftRightAttr(1)";
iconTextButton - height $extraButton - width $inbtWidth - l
"a" - style
"textOnly" - annotation
"Alphabetize Selected List" - bgc
0.7
0.7
0.7 - rpt
true - command
"am_alphebetize()";
iconTextButton - height $arrowButton - width $inbtWidth - l
"^" - style
"textOnly" - bgc
0.35
0.35
0.35 - rpt
true - command
"am_upDownLeftRightAttr(2)";
iconTextButton - height $arrowButton - width $inbtWidth - l
"v" - style
"textOnly" - bgc
0.35
0.35
0.35 - rpt
true - command
"am_upDownLeftRightAttr(3)";
iconTextButton - height $extraButton - width $inbtWidth - l
"X" - style
"textOnly" - annotation
"Reset Widget" - bgc
0
0
0 - rpt
false - command
"am_connectAttrsReset";
setParent..;

// Second
column
columnLayout - adj
1 - rowSpacing
3 - columnWidth $halfWidth;
// string $attr[];
// --------------DESTINATION
NODE
LIST - ------------------
textScrollList
-height(150 *$widgetScale)
-width $halfWidth
-allowMultiSelection
true
-annotation
"Destination Node List"
-selectCommand
"am_selectList(2)"
-dkc
"am_removeDestNodes"
-dcc
"am_doubleClickDestNodes"
destNodeList;

rowColumnLayout - numberOfColumns
3
-columnWidth
1 $addRemButtonW
-columnWidth
2
5
-columnWidth
3 $addRemButtonW;
iconTextButton - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Add" - annotation
"Add selected nodes" - command
"am_addDestNodes" - dcc
"am_selectAttrList(3)";
separator - style
"none";
iconTextButton - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Remove" - annotation
"Remove nodes selected in this list" - command
"am_removeDestNodes" - dcc
"am_resetDestNodes";
setParent..;
separator - style
"in";

// --------------DESTINATION
ATTRIBUTES
LIST - ------------------
textScrollList
-height(125 *$widgetScale)
-width $halfWidth
-allowMultiSelection
true
-annotation
"Destination Attribute List"
-selectCommand
"am_selectList(3)"
-dkc
"am_removeDestAttr"
-dcc
"am_doubleClickDestAttr"
destAttrList;

rowColumnLayout - numberOfColumns
3
-columnWidth
1 $addRemButtonW
-columnWidth
2
5
-columnWidth
3 $addRemButtonW;
iconTextButton - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Add" - annotation
"Add selected attributes" - command
"am_addDestAttr" - dcc
"am_selectAttrList(4)";
separator - style
"none";
iconTextButton - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Remove" - annotation
"Remove destination attributes selected in this list" - command
"am_removeDestAttr" - dcc
"am_resetDestAttr";
setParent..;
columnLayout;

setParent..;

setParent..;
setParent..;
columnLayout - rowSpacing
5;
// ---------------------ATTRIBUTE
INPUT
FIELD - -----------------------
rowColumnLayout - numberOfColumns
3
-columnWidth
1 $attrInputW
-columnWidth
2
5
-columnWidth
3 $attrButtonW;
textField - w
165 - annotation
"Manual Input"
AttrInput;
separator - style
"none";
iconTextButton - style
"textOnly" - label
"<<" - bgc
0.2
0.2
0.2 - c
"am_writeInButton" - dcc
"am_doubleClickWriteInButton";
setParent..;
// ---------------------EXECUTE
BUTTONS - -----------------------------
iconTextButton - style
"textOnly" - bgc
0.55
0.55
0.55 - l
"Connect Attributes" - w($widgetWidth - 10) -c
"am_executeConnectAttrs(0)";
int $ioSize = (($widgetWidth * .5)-10);

separator - horizontal
true - width($widgetWidth - 10) -style
"single" - height
5;
text - width($widgetWidth - 10) "Conversion Nodes";
gridLayout - width($widgetWidth - 10) -height($widgetWidth / 5 - 2) -numberOfRows
1 - numberOfColumns
5 - cellWidthHeight($widgetWidth / 5 - 2) ($widgetWidth / 5 - 2);
iconTextButton - style
"iconOnly" - i
"render_unitConversion.png" - annotation
"Unit Conversion" - c
"am_executeConnectAttrs(1)";
iconTextButton - style
"iconOnly" - i
"render_multDoubleLinear.png" - annotation
"Mult Double Linear" - c
"am_executeConnectAttrs(2)";
iconTextButton - style
"iconOnly" - i
"render_multiplyDivide.png" - annotation
"Multiply Divide" - c
"am_executeConnectAttrs(3)";
iconTextButton - style
"iconOnly" - i
"render_setRange.png" - annotation
"Set Range" - c
"am_executeConnectAttrs(4)";
iconTextButton - style
"iconOnly" - i / * "menuIconTangents.png" * / "render_clamp.png" - annotation
"Set Driven Key" - c
"am_executeConnectAttrs(5)";
setParent..;

gridLayout - width($widgetWidth - 10) -height($widgetWidth / 6 - 2) -numberOfRows
1 - numberOfColumns
6 - cellWidthHeight($widgetWidth / 6 - 2) ($widgetWidth / 6 - 2);
iconTextButton - style
"textOnly" - bgc
0.55
0.55
0.55 - l
"-1" - c
"am_factor(-1)";
iconTextButton - style
"textOnly" - bgc
0.51
0.51
0.51 - l
"0.1" - c
"am_factor(0.1)";
iconTextButton - style
"textOnly" - bgc
0.55
0.55
0.55 - l
"0.5" - c
"am_factor(0.5)";
iconTextButton - style
"textOnly" - bgc
0.51
0.51
0.51 - l
"2" - c
"am_factor(2)";
iconTextButton - style
"textOnly" - bgc
0.55
0.55
0.55 - l
"10" - c
"am_factor(10)";
floatField - value
1 - precision
1 - step
.1
factorField;
setParent..;

// Reset
button
// iconTextButton - style
"textOnly" - bgc
0.2
0.2
0.2 - label
"Reset" - annotation
"Reset Widget" - width($widgetWidth - 10) -command
"am_connectAttrsReset"
am_connectAttrsReset;
setParent..;
setParent..;
setParent..;
}

global proc
am_factor(float $factor){
float $oldFactor = `floatField - q - v
factorField
`;
$newFactor = ($oldFactor * $factor);
floatField - e - v $newFactor
factorField;

}

global proc
am_transferOutputs(int $io){
// set
values
string $srcNodeListCont[] = `textScrollList - q - ai
srcNodeList
`;
string $destNodeListCont[] = `textScrollList - q - ai
destNodeList
`;
string $srcAttrListCont[] = `textScrollList - q - ai
srcAttrList
`;
string $destAttrListCont[] = `textScrollList - q - ai
destAttrList
`;
// size
list
int $srcSize = `size $srcNodeListCont
`;
int $destSize = `size $destNodeListCont
`;
int $srcASize = `size $srcAttrListCont
`;
int $destASize = `size $destAttrListCont
`;
// return list
int $sizeAttrConnected = 0;
int $sizeNodesConnected = 0;
// Error
Check
// If
there is no
input
if ($srcSize < 1) {error "No input nodes in list.";}
// If
there is no
output
if ($destSize < 1) {error "No output nodes in list.";}
// If
there
are
no
input
attributes
if ($srcASize < 1) {error "No input attributes in list.";}
// if there are no output attributes
if ($destASize < 1) {error "No output attributes in list.";}
// if there are more input attributes than output attributes

/ *
For
Inputs
if there is more than one source attribute, and size dest attr != size src attr
if there is more than one
* /
if ($io == 0){
if ($srcSize > 1 & & $destASize != $srcASize){error;}
}
/ *
For
outputs:
if there is more than one destination attribute
if there is more than one destination node, and size source node != size dest node
if any object in destination node = source node
* /
if ($io == 1){
if ($destASize > 1){error;}
if ($destSize > 1 & & $srcSize != $destSize) {error;}
}

if ($io == 1){
if ($srcSize == 1){
for ($destN in $destNodeListCont){
// If there's one source attribute
if ($srcASize == 1){
for ($destA in $destAttrListCont){
$sizeAttrConnected++;
string $outputsList[] = `listConnections -destination true -plugs true -source false ($srcNodeListCont[0] + "." + $srcAttrListCont[0])`;
string $outputsNodeList[] = `listConnections -destination true -plugs false -source false ($srcNodeListCont[0] + "." + $srcAttrListCont[0])`;
// print $outputsList;
int $i = 0;
for ($output in $outputsList){
// print "\n";
// print $i;
if ( catch( `connectAttr -f ($destNodeListCont[0] + "." + $destAttrListCont[0]) ($outputsList[$i]) ` )) {
warning ("Could not connect " + $outputsList[$i]);
}
}
$i++;
}
}
}
}
}
}

global proc
am_executeConnectAttrs(int $connection){
string $finalList[];
// set
values
string $srcNodeListCont[] = `textScrollList - q - ai
srcNodeList
`;
string $destNodeListCont[] = `textScrollList - q - ai
destNodeList
`;
string $srcAttrListCont[] = `textScrollList - q - ai
srcAttrList
`;
string $destAttrListCont[] = `textScrollList - q - ai
destAttrList
`;
// size
list
int $srcSize = `size $srcNodeListCont
`;
int $destSize = `size $destNodeListCont
`;
int $srcASize = `size $srcAttrListCont
`;
int $destASize = `size $destAttrListCont
`;
// return list
int $sizeAttrConnected = 0;
int $sizeNodesConnected = 0;

float $factor = `floatField - q - v
factorField
`;

// Error
Check
// If
there is no
input
if ($srcSize < 1) {error "No input nodes in list.";}
// If
there is no
output
if ($destSize < 1) {error "No output nodes in list.";}
// If
there
are
no
input
attributes
if ($srcASize < 1) {error "No input attributes in list.";}
// if there are no output attributes
if ($destASize < 1) {error "No output attributes in list.";}
// if there are more input attributes than output attributes
// am_smartConnect(
    string $inputNode, string $inputAttribute, string $outputNode, string $outputAttribute, int $connection)
// int $connection = 5;

// If
the
amount
of
output
nodes is equal
to
the
amount
of
input
attributes, and there is only
one
input
node and only
one
output
attribute, connect
each
input
attribute
to
the
output
node in order
if ($srcSize == 1 & & $srcSize < $destSize & & $destSize == $srcASize & & $destASize == 1) {
for ($i = 0; $i < $srcASize; $i++){
$finalList[$sizeAttrConnected] = am_smartConnect($srcNodeListCont[0], $srcAttrListCont[$i], $destNodeListCont[$i], $destAttrListCont[0], $connection, $factor);
$sizeAttrConnected++;
$sizeNodesConnected++;
}
// If there's one source node
} else if ($srcSize == 1){
for ($i = 0; $i < $destSize; $i++){// $destN in $destNodeListCont){
// If there's one source attribute
if ($srcASize == 1){
for ($k=0; $k < $destASize; $k++) {// $destA in $destAttrListCont){
$finalList[$sizeAttrConnected] = am_smartConnect($srcNodeListCont[0], $srcAttrListCont[0], $destNodeListCont[$i], $destAttrListCont[$k], $connection, $factor);
$sizeAttrConnected++;
}
// If there are multiple but equal source / dest attibutes
} else if ($srcASize == $destASize) {
for ($k = 0; $k < $srcASize; $k++){
$finalList[$sizeAttrConnected] = am_smartConnect($srcNodeListCont[0], $srcAttrListCont[$k], $destNodeListCont[$i], $destAttrListCont[$k], $connection, $factor);
$sizeAttrConnected++;
}
// If there are less source attributes than destination attributes, and source attributes equal greater than 1, error
} else if ($srcASize < $destASize) {error "More than one input attribute and non equal amount of output attributes or output nodes.";}
$sizeNodesConnected++;
}
// If there are equal source and destination nodes
} else if ($srcSize == $destSize) {
// Iterate for size of list
for ($k = 0; $k < $srcSize; $k++) {
// If there's one source attribute
if ($srcASize == 1){
for ($i=0; $i < $destASize; $i++){// $destA in $destAttrListCont){
$finalList[$sizeAttrConnected] = am_smartConnect($srcNodeListCont[$k], $srcAttrListCont[0], $destNodeListCont[$k], $destAttrListCont[$i], $connection, $factor);
$sizeAttrConnected++;
}
// If there are multiple but equal source / dest attibutes
} else if ($srcASize == $destASize) {
for ($i = 0; $i < $srcASize; $i++){
$finalList[$sizeAttrConnected] = am_smartConnect($srcNodeListCont[$k], $srcAttrListCont[$i], $destNodeListCont[$k], $destAttrListCont[$i], $connection, $factor);
$sizeAttrConnected++;
}
}
$sizeNodesConnected++;
}
} else if ($srcSize > $destSize){
if ($destASize == $srcSize & & $srcASize == 1 & & $destSize == 1 ){
// If the amount of input nodes is equal to the amount of output attributes, and there is only one output node and only one input attribute, connect each node's output to each input in order
for ($i=0; $i < $srcSize; $i++){
$finalList[$sizeAttrConnected] = am_smartConnect($srcNodeListCont[$i], $srcAttrListCont[0], $destNodeListCont[0], $destAttrListCont[$i], $connection, $factor);
$sizeAttrConnected++;
$sizeNodesConnected++;
}
} else {
error ( "More source nodes than destination nodes." );
}
} else if ($srcASize < $destASize & & $srcASize != 1) {error "More than one input attribute and non equal amount of output attributes.";
} else if ($srcASize > $destASize & & $destSize == 1 & & $srcASize != $destSize) {error "More than one input attribute and non equal amount of output attributes.";
} else if ($srcASize < $destASize & & $srcASize != 1) {error "More than one input attribute and non equal amount of output attributes.";}
print ("Attributes connected: " + $sizeAttrConnected + "\n");
print ("Nodes connected: " + $sizeNodesConnected + "\n");


string $flatList[];
int $j = 0;
for ($conversionNode in $finalList){
if ($conversionNode != ""){
$flatList[$j] = $conversionNode;
$j++;
}
}
if (`size $flatList` != 0){
select -r $flatList;
}
if ($sizeAttrConnected == 0){error "No attributes connected.";}
}

global proc
am_selectAttrList(int $list ){
string $lists[] = {"placeholder", "srcNodeList", "srcAttrList", "destNodeList", "destAttrList"};
string $nodesInList[] = `textScrollList - q - ai $lists[$list]`;
if ($list != 2 & & $list != 4){
select -cl;
for ($node in $nodesInList){
select -add $node;
textScrollList -e -si $node $lists[$list];
}
} else {
// establish a list of possible outputs to look for in selected node
string $outputCandidates[] = {"output", "outputX", "outputY", "outputZ", "outValue", "outValueX", "outValueY", "outValueZ", "outputR", "outputG", "outputB", "outColor", "outColorR", "outColorG", "outColorB", "output1D", "output2D", "output2Dx", "output2Dy", "output3D", "output3Dx", "output3Dy", "output3Dz", "distance", "arcLength", "matrixSum"};
string $selection[] = `ls -sl`;
int $size = `size $selection`;
if ($size > 0){
// check if an attribute is selected
string $CBSel[] = `channelBox -q -sma mainChannelBox`;
// Check if anything in cb selected
if (`size $CBSel` > 0){
// Add both objects selected and attribute selected
for ($cb in $CBSel){
// Get long name
string $attrLN[] = `listAttr ($selection[$size-1] + "." + $cb)`;
string $itemsInAttrList[] = `textScrollList -q -ai $lists[$list]`;
if (stringArrayContains($attrLN[0], $itemsInAttrList) == false ){
textScrollList -e -append $attrLN[0] $lists[$list];
}
}
for ($item in $selection){
string $itemsInNodeList[] = `textScrollList -q -ai $lists[$list-1]`;
if (stringArrayContains($item, $itemsInNodeList) == false) {
textScrollList -e -append $item $lists[$list-1];
}
}
} else {
// check the last node in list
string $outputList[] = `listAttr $selection[$size-1]`;
for ($output in $outputCandidates){
if (stringArrayContains($output, $outputList)){
textScrollList -e -append $output $lists[$list];
}
}
}
}
}
am_selectList($list - 1);
}

global proc
am_upDownLeftRightAttr(int $updownleftright ){
// get
all
selected in boxes
string $srcNList[] = ` textScrollList - q - si
srcNodeList
`;
string $srcAList[] = ` textScrollList - q - si
srcAttrList
`;
string $destNList[] = ` textScrollList - q - si
destNodeList
`;
string $destAList[] = ` textScrollList - q - si
destAttrList
`;
string $lists[] = {"placeholder", "srcNodeList", "srcAttrList", "destNodeList", "destAttrList"};
int $activeList = 0; // 0 = none, 1 = srcN, 2 = srcA, 3 = destN, 4 = destA
// create
a
special
list
to
hold
the
items
of
active
list
string $activeListItems[];

// Determine
which
list is active
if (` size $srcNList ` != 0){
if ($activeList != 0) {error;}
if ($activeList != 0) {error;}
$activeList = 1;
$activeListItems = $srcNList;
}
if (` size $srcAList ` != 0){
if ($activeList != 0) {error;}
$activeList = 2;
$activeListItems = $srcAList;
}
if (` size $destNList ` != 0){
if ($activeList != 0) {error;}
$activeList = 3;
$activeListItems = $destNList;
}
if (` size $destAList ` != 0){
if ($activeList != 0) {error;}
$activeList = 4;
$activeListItems = $destAList;
}

// ----------------------------Left
Button - ----------------------------------
if ($updownleftright == 0) {
// Check if the list selected even has lists to the left of it
if ($activeList < 3) {error "Wrong direction.";}
// determine the target list
int $resultList = $activeList - 2;
for ($item in $activeListItems){
string $nodeList[] = ` textScrollList -q -ai $lists[$resultList] `;
// Check for duplicates
if (`stringArrayContains $item $nodeList` == 0) {
// append
textScrollList -e -append $item $lists[$resultList];
textScrollList -e -ri $item $lists[$activeList];
} else {
warning ($item + " already exists in list.\n");
}
}

// ----------------------------Right Button-----------------------------------
} else if ($updownleftright == 1) {
// Check if the list selected even has lists to the left of it
if ($activeList > 2) {error "Wrong direction.";}
// determine the target list
int $resultList = $activeList + 2;
for ($item in $activeListItems){
string $nodeList[] = ` textScrollList -q -ai $lists[$resultList] `;
// Check for duplicates
if (`stringArrayContains $item $nodeList` == 0) {
// append
textScrollList -e -append $item $lists[$resultList];
textScrollList -e -ri $item $lists[$activeList];
} else {
warning ($item + " already exists in list.\n");
}
}

// ----------------------------Up Button-----------------------------------
} else if ($updownleftright == 2) {
// get lists
string $nodeList[] = `textScrollList -q -ai $lists[$activeList] `;
string $selectedList[] = `textScrollList -q -si $lists[$activeList] `;
string $newList[]; //
return list
int $i = 0;
int $prev = 0;
for ($node in $nodeList){
int $index = $i;
// If object is selected
if ( stringArrayContains($node, $selectedList) ){
// If the selected object selected is not on the top of the list, append it one space above in the final index
if ($index != 0 & & $prev != $index){
$index = $index-1;
}
// If the first object is selected, check to see if any subsequent objects are selected (to prevent items switching spots when they reach the top)
if ($index == $prev){
$prev++;
}
} else {
$index = $index;
$prev = 0;
}
$i++;
stringArrayInsertAtIndex($index, $newList, $node);
}
// Replace
list
with new items
textScrollList - e - ra $lists[$activeList];
for ($node in $newList){
textScrollList -e -a $node $lists[$activeList];
}
for ($node in $selectedList){
textScrollList -e -si $node $lists[$activeList];
}

// ----------------------------Down
Button - ----------------------------------
} else if ($updownleftright == 3) {
// get
lists
string $nodeList[] = `textScrollList - q - ai $lists[$activeList] `;
string $selectedList[] = `textScrollList - q - si $lists[$activeList] `;
string $newList[]; // return list
int $k = 0;
int $size = `size $nodeList
`;
// int $leaveAlone = 0;
string $holdingList[];
for ($i=0; $i < $size; $i++) {
// if the item we're looking at is not in the selected list
if ( stringArrayContains($nodeList[$i], $selectedList) == 0 ){
$newList[$k] = $nodeList[$i];
$k++;
// check if there are any items we skipped
for ($item in $holdingList){
$newList[$k] = $item;
$k++;
}
clear $holdingList;
// if it is in the selected list, hold onto it for a minute
} else {
string $holdingListItem[] = {$nodeList[$i]};
appendStringArray($holdingList, $holdingListItem, 1);
// print ("Holding: " + $holdingList[0] + "\n");
}
}
for ($item in $holdingList){
$newList[$k] = $item;
$k++;
}
textScrollList - e - ra $lists[$activeList];
for ($node in $newList){
textScrollList -e -a $node $lists[$activeList];
}
for ($node in $selectedList){
textScrollList -e -si $node $lists[$activeList];
}
}
}


global proc
am_alphebetize()
{
// get
all
selected in boxes
string $srcNList[] = `textScrollList - q - si
srcNodeList
`;
string $srcAList[] = `textScrollList - q - si
srcAttrList
`;
string $destNList[] = `textScrollList - q - si
destNodeList
`;
string $destAList[] = `textScrollList - q - si
destAttrList
`;
string $lists[] = {"placeholder", "srcNodeList", "srcAttrList", "destNodeList", "destAttrList"};
int $activeList = 0; // 0 = none, 1 = srcN, 2 = srcA, 3 = destN, 4 = destA
                                                                     // create
a
special
list
to
hold
the
items
of
active
list
string $activeListItems[];
// Determine
which
list is active
if (` size $srcNList
` != 0){
if ($activeList != 0) {error;}
$activeList = 1;
$activeListItems = `textScrollList - q - ai
srcNodeList
`;
}
if (` size $srcAList ` != 0){
if ($activeList != 0) {error;}
$activeList = 2;
$activeListItems = `textScrollList - q - ai
srcAttrList
`;
}
if (` size $destNList ` != 0){
if ($activeList != 0) {error;}
$activeList = 3;
$activeListItems = `textScrollList - q - ai
destNodeList
`;
}
if (` size $destAList ` != 0){
if ($activeList != 0) {error;}
$activeList = 4;
$activeListItems = `textScrollList - q - ai
destAttrList
`;
}
if ($activeList == 0){error "Select items in a list to alphabetize.";}

string $sorted[] = sort($activeListItems);

textScrollList -e -removeAll $lists[$activeList];
for ($sort in $sorted){
textScrollList - e - append $sort $lists[$activeList];
}
}

global proc
am_selectList(int $list ){
                         // Deselects
objects in other
lists
if ($list != 0){
textScrollList - e - da
srcNodeList;
}
if ($list != 1){
textScrollList - e - da
srcAttrList;
}
if ($list != 2){
textScrollList - e - da
destNodeList;
}
if ($list != 3){
textScrollList - e - da
destAttrList;
}
// srcNodeList
   // destNodeList
   // srcAttrList
   // destAttrList
}

global proc
am_addSrcNodes()
{
    string $selectedObjects[] = `ls - sl`;
string $finalObject;
if (`size $selectedObjects
` != 0){

for ($node in $selectedObjects) {
if (`textField -q -text AttrInput` == $node){
textField -e -text "" AttrInput;
}
// check if node exists in list
string $srcNodeListContents[] = `textScrollList -q -ai srcNodeList`;
if (`stringArrayContains $node $srcNodeListContents` == 0){
textScrollList -e -append $node srcNodeList;
$finalObject = $node;
} else {
warning ($node + " already exists in list.\n");
}
}
} else if (`textField - q - text AttrInput` != "" ) {
// otherwise, add
the
item in the
text
field
string $srcNodeListContents[] = `textScrollList - q - ai
srcNodeList
`;
string $inputField = `textField - q - text
AttrInput
`;
// check
to
see if it
's already in list
if (`stringArrayContains $inputField $srcNodeListContents` == 0) {
if (`objExists $inputField`){
textScrollList -e -append $inputField srcNodeList;
textField -e -text "" AttrInput;
} else {error ($inputField + " is not an object in scene.");}
} else {
warning ($inputField + " already exists in list.\n");
}
}
}

global proc
am_removeSrcNodes()
{
// Remove
source
nodes
from list
    string $nodeSelected[] = `textScrollList - q - selectItem
srcNodeList
`;
// string $nodeSelected[] = `stringArrayRemoveDuplicates($nodeSelected)`;
// If
there
are
list
items
selected, remove
from list.

if (`size $nodeSelected` != 0){
for ($nodes in $nodeSelected) {
textScrollList -e -removeItem $nodes srcNodeList;
}
// If
there
are
no
list
items
selected, then
load
array
with items in viewport.
    } else {
$nodeSelected = `ls - sl`;
if (`size $nodeSelected` != 0){
// Check each node selected against the contents of the list
string $srcNodeListContents[] = `textScrollList -q -ai srcNodeList`;
// For each selected object, if it exists in list, delete it from list
for ($vpSelNode in $nodeSelected){
if (`stringArrayContains $vpSelNode $srcNodeListContents` == 1){
textScrollList -e -removeItem $vpSelNode srcNodeList;
// otherwise, let me know.
} else {
warning ($vpSelNode + " does not exist in list.\n");
}
}
// Let me know if there's just nothing selected.
} else {error "Nothing in list selected.";}
}
}

global proc
am_resetSrcNodes()
{
    textScrollList - e - removeAll
srcNodeList;
}

global proc
am_doubleClickSrcNodes()
{
    string $nodeSelected[] = `textScrollList - q - selectItem
srcNodeList
`;
select - r $nodeSelected[0];
textField - e - tx $nodeSelected[0]
AttrInput;
}

// Source
Attribute
Section
global proc
am_addSrcAttr()
{
// If
attribute
input
text
field is empty,
string $input = `textField - q - text
AttrInput
`;
if ($input == "" | | `objExists $input
`){
// Get
selected
CB
items, and for each one,
    string $CBSel[] = `channelBox - q - sma
    mainChannelBox
    `;
// Check if anything in cb
selected
if (`size $CBSel` == 0){
error "Nothing in write-in and nothing selected in channel box.";
} else {
// button -e -label "Reset" am_connectAttrsReset;
for ($CBAttr in $CBSel){
string $srcAttrListContents[] = `textScrollList -q -ai srcAttrList`;
// get associated object and use listAttr to get long name
string $selObj[] = `ls -sl`;
string $attrLN[] = `listAttr ($selObj[0] + "." + $CBAttr)`;
// check to see if it's already in list
if (`stringArrayContains $CBAttr $srcAttrListContents` == 0) {
// append
textScrollList -e -append $attrLN[0] srcAttrList;
} else {
warning ($CBAttr + " already exists in list.\n");
}
}
}
} else {
// otherwise, add
the
item in the
text
field
string $srcAttrListContents[] = `textScrollList - q - ai
srcAttrList
`;
string $inputField = `textField - q - text
AttrInput
`;
// check
to
see if it
's already in list
if (`stringArrayContains $inputField $srcAttrListContents` == 0) {
textScrollList -e -append $inputField srcAttrList;
textField -e -text "" AttrInput;
} else {
warning ($inputField + " already exists in list.\n");
}
}
}

global proc
am_removeSrcAttr()
{
// Remove
source
attr
from list
    string $attrSelected[] = `textScrollList - q - selectItem
srcAttrList
`;
// If
there
are
list
items
selected, remove
from list.

if (`size $attrSelected` != 0){
for ($attr in $attrSelected) {
textScrollList -e -removeItem $attr srcAttrList;
}
// If
there
are
no
list
items
selected, then
load
array
with items in viewport.
    } else {
$attrSelected = `channelBox - q - sma
mainChannelBox
`;
if (`size $attrSelected` != 0){
string $selObj[] = `ls -sl`;
for ($attr in $attrSelected) {
string $attrLN[] = `listAttr ($selObj[0] + "." + $attr)`;
// Check each node selected against the contents of the list
string $srcAttrListContents[] = `textScrollList -q -ai srcAttrList`;
// For each selected object, if it exists in list, delete it from list
if (`stringArrayContains $attrLN[0] $srcAttrListContents` == 1){
textScrollList -e -removeItem $attrLN[0] srcAttrList;
// otherwise, let me know.
} else {
warning ($attrLN[0] + " does not exist in list.\n");
}
}
// Let me know if there's just nothing selected.
} else {error "Nothing in list or cb selected.";}
}
}

global proc
am_resetSrcAttr()
{
    textScrollList - e - removeAll
srcAttrList;
}

global proc
am_doubleClickSrcAttr()
{
    string $attrSelected[] = `textScrollList - q - selectItem
srcAttrList
`;
textField - e - tx $attrSelected[0]
AttrInput;
}

// Destination
Node
Section
global proc
am_selectDestNode()
{
}

global proc
am_addDestNodes()
{
    string $selectedObjects[] = `ls - sl`;
string $finalObject;
if (`size $selectedObjects
` != 0){
for ($node in $selectedObjects) {
if (`textField -q -text AttrInput` == $node){
textField -e -text "" AttrInput;
}
// check if node exists in list
string $destNodeListContents[] = `textScrollList -q -ai destNodeList`;
if (`stringArrayContains $node $destNodeListContents` == 0){
textScrollList -e -append $node destNodeList;
$finalObject = $node;
} else {
warning ($node + " already exists in list.\n");
}
}
} else if (`textField - q - text AttrInput` != "" ) {
// otherwise, add
the
item in the
text
field
string $destNodeListContents[] = `textScrollList - q - ai
destNodeList
`;
string $inputField = `textField - q - text
AttrInput
`;
// check
to
see if it
's already in list
if (`stringArrayContains $inputField $destNodeListContents` == 0) {
if (`objExists $inputField`){
textScrollList -e -append $inputField destNodeList;
textField -e -text "" AttrInput;
} else {error ($inputField + " is not an object in scene.");}
} else {
warning ($inputField + " already exists in list.\n");
}
}
}

global proc
am_removeDestNodes()
{
// Remove
source
nodes
from list
    string $nodeSelected[] = `textScrollList - q - selectItem
destNodeList
`;
// string $nodeSelected[] = `stringArrayRemoveDuplicates($nodeSelected)`;
// If
there
are
list
items
selected, remove
from list.

if (`size $nodeSelected` != 0){
for ($nodes in $nodeSelected) {
textScrollList -e -removeItem $nodes destNodeList;
}
// If
there
are
no
list
items
selected, then
load
array
with items in viewport.
    } else {
$nodeSelected = `ls - sl`;
if (`size $nodeSelected` != 0){
// Check each node selected against the contents of the list
string $destNodeListContents[] = `textScrollList -q -ai destNodeList`;
// For each selected object, if it exists in list, delete it from list
for ($vpSelNode in $nodeSelected){
if (`stringArrayContains $vpSelNode $destNodeListContents` == 1){
textScrollList -e -removeItem $vpSelNode destNodeList;
// otherwise, let me know.
} else {
warning ($vpSelNode + " does not exist in list.\n");
}
}
// Let me know if there's just nothing selected.
} else if (`size $nodeSelected` == 0) {error "Nothing in list selected.";}
}
}

global proc
am_resetDestNodes()
{
    textScrollList - e - removeAll
destNodeList;
}

global proc
am_doubleClickDestNodes()
{
    string $nodeSelected[] = `textScrollList - q - selectItem
destNodeList
`;
select - r $nodeSelected[0];
textField - e - tx $nodeSelected[0]
AttrInput;
}

// Destination
Attribute
Section
global proc
am_addDestAttr()
{
// If
attribute
input
text
field is empty,
string $input = `textField - q - text
AttrInput
`;
if ($input == "" | | `objExists $input
`){
// Get
selected
CB
items, and for each one,
    string $CBSel[] = `channelBox - q - sma
    mainChannelBox
    `;
// Check if anything in cb
selected
if (`size $CBSel` == 0){
error "Nothing in write in and nothing selected in channel box.";
} else {
for ($CBAttr in $CBSel){
string $destAttrListContents[] = `textScrollList -q -ai destAttrList`;
// get associated object and use listAttr to get long name
string $selObj[] = `ls -sl`;
string $attrLN[] = `listAttr ($selObj[0] + "." + $CBAttr)`;
// check to see if it's already in list
if (`stringArrayContains $CBAttr $destAttrListContents` == 0) {
// append
textScrollList -e -append $attrLN[0] destAttrList;
} else {
warning ($CBAttr + " already exists in list.\n");
}
}
}
} else {
// otherwise, add
the
item in the
text
field
string $destAttrListContents[] = `textScrollList - q - ai
destAttrList
`;
string $inputField = `textField - q - text
AttrInput
`;
// check
to
see if it
's already in list
if (`stringArrayContains $inputField $destAttrListContents` == 0) {
textScrollList -e -append $inputField destAttrList;
textField -e -text "" AttrInput;
} else {
warning ($inputField + " already exists in list.\n");
}
}
}

global proc
am_removeDestAttr()
{
// Remove
source
attr
from list
    string $attrSelected[] = `textScrollList - q - selectItem
destAttrList
`;
// If
there
are
list
items
selected, remove
from list.

if (`size $attrSelected` != 0){
for ($attr in $attrSelected) {
textScrollList -e -removeItem $attr destAttrList;
}
// If
there
are
no
list
items
selected, then
load
array
with items in viewport.
    } else {
$attrSelected = `channelBox - q - sma
mainChannelBox
`;
if (`size $attrSelected` != 0){
string $selObj[] = `ls -sl`;
for ($attr in $attrSelected) {
string $attrLN[] = `listAttr ($selObj[0] + "." + $attr)`;
// Check each node selected against the contents of the list
string $destAttrListContents[] = `textScrollList -q -ai destAttrList`;
// For each selected object, if it exists in list, delete it from list
if (`stringArrayContains $attrLN[0] $destAttrListContents` == 1){
textScrollList -e -removeItem $attrLN[0] destAttrList;
// otherwise, let me know.
} else {
warning ($attrLN[0] + " does not exist in list.\n");
}
}
// Let me know if there's just nothing selected.
} else {error "Nothing in list or cb selected.";}
}
}

global proc
am_resetDestAttr()
{
    textScrollList - e - removeAll
destAttrList;
}

global proc
am_doubleClickDestAttr()
{
    string $attrSelected[] = `textScrollList - q - selectItem
destAttrList
`;
textField - e - tx $attrSelected[0]
AttrInput;
}

// Other
Section
global proc
am_writeInButton()
{
    string $CBSel[] = `channelBox - q - sma
mainChannelBox
`;
string $selection[] = `ls - sl`;
int $size = `size $selection
`;
if (`size $CBSel
` != 0){
string $selObj[] = `ls - sl`;
int $size = `size $selObj
`;
string $attrLN[] = `listAttr($selObj[$size - 1] + "." + $CBSel[0])`;
textField - e - tx $attrLN[0]
AttrInput;
} else if ($size != 0){
textField - e - text $selection[$size - 1] AttrInput;
} else {
textField - e - text
""
AttrInput;
warning("No objects or attributes selected.\n");
}
}

global proc
am_doubleClickWriteInButton()
{
    textField - e - text
""
AttrInput;
}

global proc
am_connectAttrsReset()
{
    textScrollList - e - removeAll
srcNodeList;
textScrollList - e - removeAll
srcAttrList;
textScrollList - e - removeAll
destNodeList;
textScrollList - e - removeAll
destAttrList;
textField - e - text
""
AttrInput;
}


global proc
am_widgetColors(int $widgetCollapse, int $widgetWidth, string $widgetParent, float $widgetScale, int $indexRgb ){

                                                                                                                // float $
color[] = `colorManagementConvert - toDisplaySpace
0.5
0.5
0.5
`;
int $radioW = ($widgetWidth * .33);

int $gridWidth = ($widgetWidth * .11);
int $cX = ($widgetWidth - 25) / 30;
int $cY = 32 /$cX;
int $cR = 32 % $cX;

int $rgbInput1 = .15 * $widgetWidth;
int $rgbInput2 = .70 * $widgetWidth;

int $rgbButtonW = .45 * $widgetWidth;

int $rgbInputFrameWidth = .87 * $widgetWidth;
frameLayout - l
"Control Colors"
- collapsable
on
- collapse $widgetCollapse
            - w $widgetWidth
                 - bgc
.3
.2
.2
- parent $widgetParent
          - height
120
- collapseCommand
"am_colorframe(0)"
- expandCommand
"am_colorframe(1)"
colorsColumn;

columnLayout
- columnOffset
"left"
10 - p
colorsColumn
colorsSubColumn;

tabLayout
- width($widgetWidth - 10)
// -scr
true
// -height
120
// -bgc
.2
.2
.2
- innerMarginHeight
5
- innerMarginWidth
5
- p
colorsSubColumn
indexRGBTab;

/ *------------INDEX
SECTION - ----------- * /

          rowColumnLayout
- bgc
.2
.2
.2
// -bgc
.6
.6
.6
- p
indexRGBTab
fmIndex;

// separator - style
"none";

columnLayout
- p
fmIndex
- columnOffset
"left"
5
mainFmColorColumn;

gridLayout - width($widgetWidth - 10) -height(($cY * 20)+5) -numberOfRows $cY - numberOfColumns $cX - cellWidthHeight
30
20 - p
mainFmColorColumn;
iconTextButton - bgc
0
0.016
0.373 - rpt
true - command
"am_setIndex(0)" - doubleClickCommand
"am_selIndex(0)";
iconTextButton - bgc
.000
.000
.000 - rpt
true - command
"am_setIndex(1)" - doubleClickCommand
"am_selIndex(1)";
iconTextButton - bgc
.247
.247
.247 - rpt
true - command
"am_setIndex(2)" - doubleClickCommand
"am_selIndex(2)";
iconTextButton - bgc
.498
.498
.498 - rpt
true - command
"am_setIndex(3)" - doubleClickCommand
"am_selIndex(3)";
iconTextButton - bgc
0.608
0
0.157 - rpt
true - command
"am_setIndex(4)" - doubleClickCommand
"am_selIndex(4)";
iconTextButton - bgc
0
0
1 - rpt
true - command
"am_setIndex(6)" - doubleClickCommand
"am_selIndex(6)";
iconTextButton - bgc
0
0.275
0.094 - rpt
true - command
"am_setIndex(7)" - doubleClickCommand
"am_selIndex(7)";
iconTextButton - bgc
0.145
0
0.263 - rpt
true - command
"am_setIndex(8)" - doubleClickCommand
"am_selIndex(8)";
iconTextButton - bgc
0.78
0
0.78 - rpt
true - command
"am_setIndex(9)" - doubleClickCommand
"am_selIndex(9)";
iconTextButton - bgc
0.537
0.278
0.2 - rpt
true - command
"am_setIndex(10)" - doubleClickCommand
"am_selIndex(10)";
iconTextButton - bgc
0.243
0.133
0.122 - rpt
true - command
"am_setIndex(11)" - doubleClickCommand
"am_selIndex(11)";
iconTextButton - bgc
0.6
0.145
0 - rpt
true - command
"am_setIndex(12)" - doubleClickCommand
"am_selIndex(12)";
iconTextButton - bgc
1
0
0 - rpt
true - command
"am_setIndex(13)" - doubleClickCommand
"am_selIndex(13)";
iconTextButton - bgc
0
1
0 - rpt
true - command
"am_setIndex(14)" - doubleClickCommand
"am_selIndex(14)";
iconTextButton - bgc
0
0.255
0.6 - rpt
true - command
"am_setIndex(15)" - doubleClickCommand
"am_selIndex(15)";
iconTextButton - bgc
1
1
1 - rpt
true - command
"am_setIndex(16)" - doubleClickCommand
"am_selIndex(16)";
iconTextButton - bgc
1
1
0 - rpt
true - command
"am_setIndex(17)" - doubleClickCommand
"am_selIndex(17)";
iconTextButton - bgc
0.388
0.863
1 - rpt
true - command
"am_setIndex(18)" - doubleClickCommand
"am_selIndex(18)";
iconTextButton - bgc
0.263
1
0.635 - rpt
true - command
"am_setIndex(19)" - doubleClickCommand
"am_selIndex(19)";
iconTextButton - bgc
1
0.686
0.686 - rpt
true - command
"am_setIndex(20)" - doubleClickCommand
"am_selIndex(20)";
iconTextButton - bgc
0.89
0.675
0.475 - rpt
true - command
"am_setIndex(21)" - doubleClickCommand
"am_selIndex(21)";
iconTextButton - bgc
1
1
0.384 - rpt
true - command
"am_setIndex(22)" - doubleClickCommand
"am_selIndex(22)";
iconTextButton - bgc
0
0.6
0.325 - rpt
true - command
"am_setIndex(23)" - doubleClickCommand
"am_selIndex(23)";
iconTextButton - bgc
0.627
0.412
0.188 - rpt
true - command
"am_setIndex(24)" - doubleClickCommand
"am_selIndex(24)";
iconTextButton - bgc
0.62
0.627
0.188 - rpt
true - command
"am_setIndex(25)" - doubleClickCommand
"am_selIndex(25)";
iconTextButton - bgc
0.408
0.627
0.188 - rpt
true - command
"am_setIndex(26)" - doubleClickCommand
"am_selIndex(26)";
iconTextButton - bgc
0.188
0.627
0.365 - rpt
true - command
"am_setIndex(27)" - doubleClickCommand
"am_selIndex(27)";
iconTextButton - bgc
0.188
0.627
0.627 - rpt
true - command
"am_setIndex(28)" - doubleClickCommand
"am_selIndex(28)";
iconTextButton - bgc
0.188
0.404
0.627 - rpt
true - command
"am_setIndex(29)" - doubleClickCommand
"am_selIndex(29)";
iconTextButton - bgc
0.435
0.188
0.627 - rpt
true - command
"am_setIndex(30)" - doubleClickCommand
"am_selIndex(30)";
iconTextButton - label
"T" - style
"iconAndTextHorizontal" - bgc
.498
.498
.498 - rpt
true - command
"am_selDisplayType(1)" - doubleClickCommand
"am_selIndex(31)";
iconTextButton - label
"R" - style
"iconAndTextHorizontal" - bgc
0
0
0 - rpt
true - command
"am_selDisplayType(2)" - doubleClickCommand
"am_selIndex(32)";
setParent..;
rowLayout
- numberOfColumns
3;
iconTextButton - w
80 - label
"Reset Color" - style
"textOnly" - bgc
0.4
0.4
0.4 - rpt
true - command
"am_colorLaunchpad(2)"; // am_resetColor
separator - w
10 - style
"none";
iconTextButton - w
150 - label
"Convert Index to RGB" - style
"textOnly" - bgc
0.4
0.4
0.4 - rpt
true - command
"am_convertIndexToRGB()"; // am_convertIndexToRGB
setParent..;
tabLayout - e - tabLabel
fmIndex
"Index"
indexRGBTab;
// END
INDEX

/ * ------------RGB
SECTION - ----------- * /
          columnLayout
- bgc
.2
.2
.2
- p
indexRGBTab
fmRGB;

columnLayout - columnOffset
"left"
10 - parent
fmRGB
offsetColumn;
columnLayout
- columnOffset
"left"
10 - p
offsetColumn
radioSubColumn;
radioButtonGrp
- numberOfRadioButtons
2
- columnAlign2
"right" "right"
- labelArray2
"Nodes" "Shapes"
- cw2 $radioW $radioW
               - sl
2
- p
radioSubColumn
shapesRadio;

separator - p
offsetColumn - style
"none";
// setParent..;

// Checkboxes
int $check = .05 * $widgetWidth;
int $text = .2 * $widgetWidth;
int $rtButtons = .12 * $widgetWidth;
rowColumnLayout
- numberOfColumns
7
- columnWidth
1 $check
   - columnWidth
2 $text
   - columnWidth
3
20
- columnWidth
4 $check
   - columnWidth
5 $text
   - columnWidth
6 $rtButtons
   - columnWidth
7 $rtButtons;

checkBox - value
1 - cc
"am_loadColors()"
viewportCheck;
text - label
"Viewport";
separator - style
"none";
checkBox - value
0 - cc
"am_loadColors()"
outlinerCheck;
text - label
"Outliner";
iconTextButton - label
"T" - style
"iconAndTextHorizontal" - bgc
.498
.498
.498 - rpt
true - command
"am_selDisplayType(1)" - doubleClickCommand
"am_selIndex(31)";
iconTextButton - label
"R" - style
"iconAndTextHorizontal" - bgc
0
0
0 - rpt
true - command
"am_selDisplayType(2)" - doubleClickCommand
"am_selIndex(32)";
setParent..;
// setParent..;

columnLayout - columnOffset
"left"
10 - parent
fmRGB
RGBColumn;

frameLayout - l
"RGB Input"
- width $rgbInputFrameWidth
         - bgc
.5
.5
.5
- collapsable
off
- collapse
off
// -borderStyle
"etchedIn"
- p
RGBColumn
colorInput;

colorInputWidgetGrp - cw3
0 $rgbInput1 $rgbInput2 - height
150 - rgb
0
0
0 - p
colorInput
RGBcolor;

separator - style
"double";

/ *----------------------------- PALETTE
PORT - ---------------------------------- * /
       palettePort - colorEditable
false - dim
10
2 - td
true - height
50 - bgc
0
0
0 - cc
"am_paletteChange" - ce
"am_paletteChange" - p
colorInput
scenePalette;

setParent..;
// end
palette
tabs

// separator - style
"double";
rowColumnLayout - numberOfColumns
3 - p
fmRGB
- columnWidth
1 $rgbButtonW
   - columnWidth
2
5
- columnWidth
3 $rgbButtonW;

separator - style
"none" - height
5;
separator - style
"none";
separator - style
"none";

iconTextButton - label
"Refresh" - style
"textOnly" - bgc
0.51
0.51
0.51 - command
"am_loadColors()"
sceneCButton;
separator - style
"none";
iconTextButton - label
"Convert to RGB" - style
"textOnly" - bgc
0.51
0.51
0.51 - command
"am_convertIndexToRGB()";

separator - style
"none" - height
5;
separator - style
"none";
separator - style
"none";

iconTextButton - label
"Load Color" - style
"textOnly" - bgc
0.4
0.4
0.4 - rpt
true - command
"am_colorLaunchpad(0)"; // am_getRGB
separator - style
"none";
iconTextButton - label
"Select By Color" - style
"textOnly" - bgc
0.4
0.4
0.4 - rpt
true - command
"am_colorLaunchpad(1)" - dcc
"am_colorLaunchpad(4)"; // am_selRGB

separator - style
"none" - height
5;
separator - style
"none";
separator - style
"none";

iconTextButton - label
"Reset Color" - style
"textOnly" - bgc
0.1
0.1
0.1 - rpt
true - command
"am_colorLaunchpad(2)"; // am_resetColor
separator - style
"none";
iconTextButton - label
"Set Color" - style
"textOnly" - bgc
0.7
0.7
0.7 - rpt
true - command
"am_colorLaunchpad(3)"; // am_setRGb

setParent..;
setParent..;
setParent..;
// END
RGB
setParent..;

tabLayout - e - tabLabel
fmRGB
"RGB" - selectCommand
"am_indexRGBTabSel()"
indexRGBTab;
if ($indexRgb == 1){
tabLayout - e - sti
2
indexRGBTab;
am_indexRGBTabSel();
} else if ($indexRgb == 0){
tabLayout - e - sti
1
indexRGBTab;
am_indexRGBTabSel();
} else if ($indexRgb != 0){error "\$indexRgb if out of range";}

setParent..;

if ($widgetCollapse == 1){
am_colorframe(0);
} else {
am_colorframe(1);
}
}

/ *------------------------------------------------------- * /

global proc
am_convertIndexToRGB()
{
// Converts
specified
Index
colors
to
RGB
string $selection[] = `ls - sl`;
int $shapes = `radioButtonGrp - q - sl
shapesRadio
`;
vector $indexToRGB[] =
{
<< 0, 0.016, 0.373 >>,
<< .000, .000, .000 >>,
<< .247, .247, .247 >>,
<< .498, .498, .498 >>,
<< 0.608, 0, 0.157 >>,
<< 0, 0, 0 >>,
<< 0, 0, 1 >>,
<< 0, 0.275, 0.094 >>,
<< 0.145, 0, 0.263 >>,
<< 0.78, 0, 0.78 >>,
<< 0.537, 0.278, 0.2 >>,
<< 0.243, 0.133, 0.122 >>,
<< 0.6, 0.145, 0 >>,
<< 1, 0, 0 >>,
<< 0, 1, 0 >>,
<< 0, 0.255, 0.6 >>,
<< 1, 1, 1 >>,
<< 1, 1, 0 >>,
<< 0.388, 0.863, 1 >>,
<< 0.263, 1, 0.635 >>,
<< 1, 0.686, 0.686 >>,
<< 0.89, 0.675, 0.475 >>,
<< 1, 1, 0.384 >>,
<< 0, 0.6, 0.325 >>,
<< 0.627, 0.412, 0.188 >>,
<< 0.62, 0.627, 0.188 >>,
<< 0.408, 0.627, 0.188 >>,
<< 0.188, 0.627, 0.365 >>,
<< 0.188, 0.627, 0.627 >>,
<< 0.188, 0.404, 0.627 >>,
<< 0.435, 0.188, 0.627 >>
};


global string $gMainProgressBar;

progressBar - edit
- beginProgress
- isInterruptable
false
- status
"Working..."
- maxValue
300
$gMainProgressBar;

int $i = 0;
string $scene[];
if (`size $selection
` == 0){
$scene = `ls - dag`;
} else {
string $shapes[] = `listRelatives - s $selection
`;
$scene = stringArrayCatenate( $selection, $shapes );
}
string $list[];
for ($object in $scene){

// if (`attributeExists "overrideColor" $object`){
if (`attributeQuery -node $object -exists "overrideColor"`){
if (`getAttr ($object + ".overrideEnabled")` == 1){
if (`getAttr ($object + ".overrideRGBColors")` == 0){
progressBar -edit
-step 1 $gMainProgressBar;
$list[$i] = $object;
$i++;
}
}
}
}
for ($object in $list){

int $color = `getAttr ($object + ".overrideColor")`;
vector $rgb = $indexToRGB[$color];
float $colorFloat[] = {$rgb.x, $rgb.y, $rgb.z};
select -r $object;
am_setRGB($colorFloat, 1, 0, 2);

progressBar -edit
-step 1 $gMainProgressBar;
}

progressBar - edit
-endProgress
$gMainProgressBar;

select - r $selection;

am_loadColors();
tabLayout - e - sti
2
indexRGBTab;
am_indexRGBTabSel();

}

/ *------------------------------------------------------- * /
global proc
am_fieldChange()
{
float $sliderS = `floatField - q - value
fieldS
`;
float $sliderV = `floatField - q - value
fieldV
`;
float $sliderSv = `clamp
0
1 $sliderS
`;
float $sliderVv = `clamp
0
1 $sliderV
`;
floatSlider - e - value $sliderSv
winSliderS;
floatSlider - e - value $sliderVv
winSliderV;
int $i = 0;
for ($i = 0; $i < 20; $i++){
float $j = $i;
$j = $j / 20;
int $k = $j * 360;
palettePort -e -scc $i scenePalette;
palettePort -e -hsv $i $k $sliderS $sliderV $k scenePalette;
}
iconTextButton - e - bgc
0.5
0.5
0.5
sceneCButton;
iconTextButton - e - bgc
0.1
0.1
0.1
chromaCButton;
palettePort - e - scc
0
scenePalette;
am_paletteChange();
}

/ *------------------------------------------------------- * /
global proc
am_indexRGBTabSel()
{
int $tabSelected = `tabLayout - q - selectTabIndex
indexRGBTab
`;
if ($tabSelected == 1) {
tabLayout -e -height 143 indexRGBTab;
frameLayout -e -height 160 colorsColumn;
}
if ($tabSelected == 2) {
tabLayout -e -height 400 indexRGBTab;
frameLayout -e -height 430 colorsColumn;
}
}

/ *------------------------------------------------------- * /
global proc
am_colorframe(int $expand ){
if ($expand == 0) {frameLayout -e -height 20 colorsColumn;}
if ($expand == 1) {
int $tabSelected = `tabLayout -q -selectTabIndex indexRGBTab`;
if ($tabSelected == 1){
frameLayout -e -height 175 colorsColumn;
} else {
frameLayout -e -height 430 colorsColumn;
}
}
}

/ *------------------------------------------------------- * /
global proc
am_colorLaunchpad(int $command ){
int $viewport = `checkBox - q - v
viewportCheck
`;
int $outliner = `checkBox - q - v
outlinerCheck
`;
// print $viewport;
int $shapes = `radioButtonGrp - q - sl
shapesRadio
`;
$shapes = ($shapes - 1);
if ($command == 0){// GET RGB
float $rgb[] = am_getRGB( $outliner, $viewport, $shapes );
colorInputWidgetGrp -e -rgbValue $rgb[0] $rgb[1] $rgb[2] RGBcolor;
}
if ($command == 1){// SEL RGB
float $rgb[] = `colorInputWidgetGrp -q -rgbValue RGBcolor`;
string $selList[];
string $list[] = am_selRGB($selList, $rgb, $outliner, $viewport, $shapes );
select -r $list;
print "\n\nSelection List:\n";
print $list;
}
if ($command == 2){// RESET RGB
string $list[] = am_resetColor( $outliner, $viewport );
// print $list;
am_loadColors();
}
if ($command == 3){// SET RGB
float $rgb[] = `colorInputWidgetGrp -q -rgbValue RGBcolor`;
am_resetColor( $outliner, $viewport );
am_setRGB( $rgb, $viewport, $outliner, $shapes );
am_loadColors();
int $paletteIndex = `palettePort -q -scc scenePalette`;
// Check if color input widget is standard grey
if ($rgb[0] != 0.267 & & $rgb[1] != 0.267 & & $rgb[2] != 0.267){
// Check each port for the original color
int $paletteNewIndex = 0;
for ($i=0; $i < 20; $i++){
palettePort -e -scc $i scenePalette;
float $checkRGB[] = `palettePort -q -rgb scenePalette`;
if ($rgb[0] == $checkRGB[0] & & $rgb[1] == $checkRGB[1] & & $rgb[2] == $checkRGB[2]){
$paletteNewIndex = $i;
}
}
palettePort -e -scc $paletteNewIndex scenePalette;
am_paletteChange();
}
}
if ($command == 4){// Double SEL RGB (-add or remove)
string $selection[] = `ls -sl`;
int $remove = 0;
float $rgb[] = `colorInputWidgetGrp -q -rgbValue RGBcolor`;
string $passList[];
string $list[] = am_selRGB($passList, $rgb, $outliner, $viewport, $shapes );
for ($sel in $selection){
if (`stringArrayContains $sel $list`){
$remove = 1;
}
}
select -r $selection;
if ($remove == 1){
select -deselect $list;
} else {
select -add $list;
}
print "\n\nSelection List:\n";
print $list;
}
}

/ *------------------------------------------------------- * /
global proc
am_loadColors()
{
// Get
an
array
of
vectors
for colors in scene
    int $viewport = `checkBox - q - v
    viewportCheck
    `;
int $outliner = `checkBox - q - v
outlinerCheck
`;
// string $scene[] = `ls - dag`;
// Get
initial
color and index
for final wrapup
    float $paletteRGB[] = ` palettePort - q - rgb
    scenePalette
    `;
int $paletteIndex = ` palettePort - q - scc
scenePalette
`;

// int $size = `size $nodes
`;

global string $gMainProgressBar;

progressBar - edit
-beginProgress
-isInterruptable
false
-status
"Working..."
-maxValue
2000
$gMainProgressBar;

int $i = 0;
string $viewportList[];
if ($viewport == 1){
string $nodes[] = `ls -dag`;
$i = 0;
for ($node in $nodes){
// if (`attributeExists "overrideColor" $node`){
if (`attributeQuery -node $node -exists "overrideColor"`){
if (`getAttr ($node + ".overrideRGBColors")` == 1){
$viewportList[$i] = $node;
$i++;
progressBar -edit
-step 1 $gMainProgressBar;
}
}
}
}

string $outlinerList[];

if ($outliner == 1){
string $nodes[] = `ls`;
$i=0;
for ($node in $nodes){
// if (`attributeExists "useOutlinerColor" $node`){
if (`attributeQuery -node $node -exists "useOutlinerColor"`){
if (`getAttr ($node + ".useOutlinerColor")` == 1){
// textScrollList -e -append $node coloredOutlinerNodes;
$outlinerList[$i] = $node;
$i++;
progressBar -edit
-step 1 $gMainProgressBar;
}
}
}
}

progressBar -edit
-endProgress
$gMainProgressBar;

// Clear palette (to grey)
float $rgbGrey[] = {0.267, 0.267, 0.267};
for ($j = 0; $j < 20; $j++){
palettePort -e -rgb $j $rgbGrey[0] $rgbGrey[1] $rgbGrey[2] scenePalette;
}

$i = 0;

vector $colors[];
if ($viewport == 1){
for ($node in $viewportList){
vector $checkColorV = `getAttr($node + ".overrideColorRGB")`;
float $checkColor[] = {$checkColorV.x, $checkColorV.y, $checkColorV.z};
int $match = 0;
for ($color in $colors){
float $colorF[] = {$color.x, $color.y, $color.z};
int $approx0 = am_colorApprox($checkColor[0], $colorF[0], .01);
int $approx1 = am_colorApprox($checkColor[1], $colorF[1], .01);
int $approx2 = am_colorApprox($checkColor[2], $colorF[2], .01);
if ( $approx0 == 1 & & $approx1 == 1 & & $approx2 == 1){
$match = 1;
break;
}
}
if ($match == 0){
$colors[$i] = $checkColorV;
$i++;
}
}
}

if ($outliner == 1){
for ($node in $outlinerList){
vector $checkColorV = `getAttr($node + ".outlinerColor")`;
float $checkColor[] = {$checkColorV.x, $checkColorV.y, $checkColorV.z};
int $match = 0;

for ($color in $colors){
float $colorF[] = {$color.x, $color.y, $color.z};
int $approx0 = am_colorApprox($checkColor[0], $colorF[0], .01);
int $approx1 = am_colorApprox($checkColor[1], $colorF[1], .01);
int $approx2 = am_colorApprox($checkColor[2], $colorF[2], .01);
// print ($approx0 + $approx1 + $approx2);
if ( $approx0 == 1 & & $approx1 == 1 & & $approx2 == 1){
$match = 1;
break;
}
}
if ($match == 0){
$colors[$i] = $checkColorV;
$i++;
}
}
}

// For each color found, add it to the lineup
int $index = 0;
for ($color in $colors){
palettePort -e -scc $index scenePalette;
float $colorFloat[] = {$color.x, $color.y, $color.z};
palettePort -e -rgb $index $colorFloat[0] $colorFloat[1] $colorFloat[2] scenePalette;
if ($index == 20) {
break;
}
$index + +;
}
// replace
all
remaining
colors
with grey
for ($i = $index; $i < 20; $i++){
palettePort -e -scc $i scenePalette;
palettePort -e -rgb $i  $rgbGrey[0] $rgbGrey[1] $rgbGrey[2] scenePalette;
}

// Set to original index
palettePort -e -scc $paletteIndex scenePalette;
// change to search for the color of original selection, and use prev index if not found
// unless it's starting grey. then do prev index


progressBar -edit
-endProgress
$gMainProgressBar;

// Update palette
am_paletteChange();

}

/ * ------------------------------------------------------- * /
global proc am_chromaColors(){
float $sliderS; // = `floatSlider -q -value winSliderS`;
float $sliderV; //= `floatSlider -q -value winSliderV`;
for ($i = 0; $i < 20; $i++){

float $j = $i;
$j = $j / 20;
palettePort -e -scc $i palette;
palettePort -e -hsv $i $i $j $sliderS $sliderV palette;
}

palettePort -e -scc 0 palette;
am_paletteChange();
}

/ * ------------------------------------------------------- * /
// Index: Set
Template / Reference
global proc
am_selDisplayType(int $col ){
    string $ctrlSet[] = `ls - sl`;
string $word[] = {"", "templated.", "referenced."};
int $count = 0;

int $shapes = `radioButtonGrp - q - sl
shapesRadio
`;
for ($ctrl in $ctrlSet){
if ($shapes == 1){
setAttr($ctrl + ".overrideEnabled") 1; // enable
Override
setAttr($ctrl + ".overrideDisplayType") $col;
} else {
string $nodes[] = `listRelatives - s $ctrl
`;
for ($node in $nodes){
if ( catch( `setAttr ($node + ".overrideDisplayType") $col` )){
warning "Name Clash Error, probably";
} else {
setAttr ($node + ".overrideEnabled") 1; // enable Override
setAttr ($node + ".overrideDisplayType") $col;
$count++;
}
}
}
}
print ($count + " nodes " + $word[$col]);
}

/ *------------------------------------------------------- * /
global proc
am_paletteChange()
{
// Update
palette
based
on
selected
palettePort
square
int $pIndex = `palettePort - q - setCurCell
scenePalette
`;
float $pRGB[] = `palettePort - q - rgbValue
scenePalette
`;
colorInputWidgetGrp - e - rgbValue $pRGB[0] $pRGB[1] $pRGB[2]
RGBcolor;
}


global proc
am_widgetPickWalk(int $widgetCollapse, int $widgetWidth, string $widgetParent, float $widgetScale){
    frameLayout
    - w $widgetWidth
         - label
"Pickwalk Setup"
- collapsable
true
- collapse $widgetCollapse
            - bgc
.3
.2
.2
- p $widgetParent
pickWalkColumn;

int $halfWidth = ($widgetWidth / 2);
int $quarterWidth = ($widgetWidth / 4);
int $nsewSpace = ($halfWidth * .33);

rowColumnLayout
- p
pickWalkColumn
- numberOfColumns
3
- columnWidth
1 $halfWidth
   - columnWidth
3
5
- columnWidth
3 $halfWidth
nsewColumn;
columnLayout
- p
nsewColumn
buttonColumn;
iconTextButton - w($halfWidth - 5) -rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4 - label
"Select Scriptnode" - annotation
"Select the pickwalk script node." - command
"am_PWscriptNodeSel";
iconTextButton - w($halfWidth - 5) -rpt
true - style
"textOnly" - bgc
0.3
0.3
0.3 - label
"Select Network" - annotation
"Select nodes in scene with manual pickwalk attributes." - command
"am_PWselectNetwork";
rowColumnLayout
- numberOfColumns
2
- columnWidth
1($quarterWidth - 2)
-columnWidth
2($quarterWidth - 3);
// Determine
color
base
on
script
node if in scene
float $onC = 0.1;
float $offC = 0.4;
if (`objExists
"am_PickWalk_SN"
`){
if (!`getAttr
"am_PickWalk_SN.pickWalk"
`){
$onC = 0.4;
$offC = 0.1;
}
}
iconTextButton - w($quarterWidth - 2) -rpt
true - style
"textOnly" - bgc $onC $onC $onC - label
"On" - annotation
"Turn custom pickwalk on" - command
"am_pickWalkOnOff(1)"
pickWalkOnButton;
iconTextButton - w($quarterWidth - 3) -rpt
true - style
"textOnly" - bgc $offC $offC $offC - label
"Off" - annotation
"Turn custom pickwalk off" - command
"am_pickWalkOnOff(0)"
pickWalkOffButton;

setParent..;
rowColumnLayout
- p
nsewColumn
- numberOfColumns
3
- columnWidth
1 $nsewSpace
   - columnWidth
2 $nsewSpace
   - columnWidth
3 $nsewSpace;

separator - style
"none";
iconTextButton - label
"Up" - c
"am_pickWalkButton(\"Up\", 0)" - dcc
"am_pickWalkButton(\"Up\", 1)" - enable
true - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2;
separator - style
"none";

iconTextButton - label
"Left" - c
"am_pickWalkButton(\"Left\", 0)" - dcc
"am_pickWalkButton(\"Left\", 1)" - enable
true - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2;
iconTextButton - label
"" - c
"am_pickWalkSource()" - dcc
"am_PWSelectSource()" - enable
true - rpt
true - style
"textOnly" - bgc
0.5
0.5
0.5
pwSourceButton;
iconTextButton - label
"Right" - c
"am_pickWalkButton(\"Right\", 0)" - dcc
"am_pickWalkButton(\"Right\", 1)" - enable
true - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2;

separator - style
"none";
iconTextButton - label
"Down" - c
"am_pickWalkButton(\"Down\", 0)" - dcc
"am_pickWalkButton(\"Down\", 1)" - enable
true - rpt
true - style
"textOnly" - bgc
0.2
0.2
0.2;
separator - style
"none";

setParent..;
setParent..;
}


global proc
am_pickWalkOnOff(int $onOff){
if (!`objExists
"am_PickWalk_SN"
`){
    warning
"Initialize a custom connection to create script node.";
}
if ($onOff == 1){
// Determine the state of the control based on the color (darker is off)
float $onOffCheck[] = `iconTextButton -q -bgc pickWalkOnButton`;
if ($onOffCheck[0] > 0.2){
iconTextButton - e - bgc
0.1
0.1
0.1
pickWalkOnButton;
iconTextButton - e - bgc
0.4
0.4
0.4
pickWalkOffButton;
if (`objExists "am_PickWalk_SN"`){
setAttr "am_PickWalk_SN.pickWalk" 1;
}

}
} else if ($onOff == 0){
float $onOffCheck[] = `iconTextButton -q -bgc pickWalkOnButton`;
if ($onOffCheck[0] < 0.2){
iconTextButton - e - bgc
0.4
0.4
0.4
pickWalkOnButton;
iconTextButton - e - bgc
0.1
0.1
0.1
pickWalkOffButton;
if (`objExists "am_PickWalk_SN"`){
setAttr "am_PickWalk_SN.pickWalk" 0;
}
}
}
}

global proc
am_pickWalkSource()
{
    string $selection[] = `ls - sl`;
iconTextButton - e - label $selection[0]
pwSourceButton;
}

global proc
am_PWSelectSource()
{
    string $source = `iconTextButton - q - label
pwSourceButton
`;
if (`objExists $source
`){
    select - r $source;
}
}

global proc
am_pickWalkButton(string $direction, int $doubleClick){
                                                      // Get
reverse
direction
string $inputDirections[] = {"Up", "Down", "Left", "Right"};
string $reverseDirections[] = {"Down", "Up", "Right", "Left"};
int $index = stringArrayFind($direction, 0, $inputDirections);
if ($index == (-1)) {error ("$direction attribute : " + $direction + " reverse not found.");}
string $selection[] = `ls -sl`;
string $source = `iconTextButton -q -label pwSourceButton`;
int $size = `size $selection`;

if ($doubleClick == 0){
if ($source == ""){
// If
there
are
more
than
two
objects
selected and source
not set, consider
the
first
selected
the
source
if (`size $selection` <= 1){
error ("No source object set or selected.");
} else {
$source = $selection[0];
string $removeArray[] = {$selection[0]};
$selection = stringArrayRemove($removeArray, $selection);
}
}
am_pickWalk($direction, $source, $selection);
for ($sel in $selection){
string $array[] = {$source};
am_pickWalk($reverseDirections[$index], $sel, $array);
}
} else if ($doubleClick == 1){
// Apply to chain
for ($i=0; $i > ($size-1); $i++){
string $selArray[] = {$selection[$i + 1]};
am_pickWalk($direction, $selection[$i], $selArray);
$selArray[0] = $selection[$i];
am_pickWalk($reverseDirections[$index], $selection[$i + 1], $selArray);
}
if ($source != ""){
iconTextButton - e - label $selection[$size - 1] pwSourceButton;
}
}
}

global proc
am_PWscriptNodeSel()
{
if (`objExists
"am_PickWalk_SN"
`){
    select - r
"am_PickWalk_SN";
}
}

global proc
am_PWselectNetwork()
{
    string $nodes[] = `ls`;
// print $nodes;
select - cl;
int $count = 0;
for ($node in $nodes){
if (`attributeExists
"am_pick" $node
`){
select - add $node;
$count + +;
}
}
if ($count == 0){
warning "No connections found.";
}
}

global proc am_widgetReset( int $widgetCollapse, int $widgetWidth, string $widgetParent, float $widgetScale){

frameLayout -w $widgetWidth -label "Position" -collapsable true -collapse $widgetCollapse -bgc .3 .2 .2 -p $widgetParent resetColumn;
separator -style "none";

iconTextButton -label "Zero" -h (30 * $widgetScale) -c "am_zero(0)" -dcc "am_zero(1)" -enable true -rpt true -style "textOnly" -bgc 0.7 0.7 0.7  zeroButton;

int $setDefaultSpace = ($widgetWidth * .33);
int $resetInbtw = ($widgetWidth * .01);
int $defaultSpace = ($widgetWidth * .65);

int $srWidth = (($widgetWidth / 2)-5);


rowColumnLayout  -numberOfColumns 3
-columnWidth 1 $setDefaultSpace
-columnWidth 2 $resetInbtw
-columnWidth 3 $defaultSpace;

iconTextButton -label "Set Default" -h (30 * $widgetScale) -c "am_setDefault(0)" -dcc "am_setDefault(1)" -enable true -rpt true -style "textOnly" -bgc 0.2 0.2 0.2  setDefaultButton;
separator -style "none";
iconTextButton -label "Default" -c "am_default(0)" -dcc "am_default(1)" -enable true -rpt true -style "textOnly" -bgc 0.7 0.7 0.7  defaultButton;
setParent..;

iconTextButton -label "Snap" -h (30 * $widgetScale) -c "am_snapGo(0)" -dcc "am_snapGo(1)" -enable true -rpt true -style "textOnly" -bgc 0.7 0.7 0.7  snapButton;

separator -style "none";

setParent..;
}

global proc am_snapGo(int $dbl){
string $selection[] = `ls -sl`;
int $size = `size $selection`;
string $snapTo[];
string $objects[];
if ($dbl == 0){
$snapTo = {$selection[$size-1]};
$objects = stringArrayRemove($snapTo, $selection);
} else {
$snapTo = {$selection[0]};
$objects = stringArrayRemove($snapTo, $selection);
}
am_snap($snapTo, $objects);
}

global proc am_mirrorSnapGo(int $dbl){

string $selection[] = `ls -sl`;
string $left = `textField -q -tx mirrorLeft`;
string $right = `textField -q -tx mirrorRight`;
if ($left != "" & & $right != ""){
for ($sel in $selection){
$name = strSearchReplace($sel, $left, $right);
if ($name != $sel){
if (`objExists $name`){
if ($dbl == 0){
select -r $sel;
select -add $name;
} else {
select -r $name;
select -add $sel;
}
am_mirrorSnap();
} else {
warning ("No object matches name: " + $name);
}
} else {
$name = strSearchReplace($sel, $right, $left);
if ($name != $sel){
if (`objExists $name`){
if ($dbl == 0){
select -r $sel;
select -add $name;
} else {
select -r $name;
select -add $sel;
}
am_mirrorSnap();
} else {
warning ("No object matches name: " + $name);
}
} else {
warning ("Search string: " + $left + "/" + $right + " not found");
}
}
}
select - r $selection;
} else {
    am_mirrorSnap();
}
}



global proc
am_widgetTransform(int $widgetCollapse, int $widgetWidth, string $widgetParent, float $widgetScale){

                                                                                                   //
                                                                                                   frameLayout - l
"Duplicate Transform"
- w $widgetWidth
     - collapsable
on
- collapse $widgetCollapse
            - bgc
.3
.2
.2
- parent $widgetParent
shapesColumn;

// columnOffsetFix
$widgetWidth = $widgetWidth - 15;
// Length
of
shapes
list
int $listLen = 5;
// half
width
int $halfWidth = $widgetWidth / 2;
// Search
Replace
String
int $srSpace = ($widgetWidth * .37);
int $srButtonSpace = ($widgetWidth * .085);
// Parent
Buttons
int $nsewSpace = ($halfWidth * .33);

columnLayout
- columnOffset
"left"
10
- rowSpacing
3
transformSubColumn;

rowColumnLayout
- numberOfColumns
5
- columnWidth
1 $srButtonSpace
   - columnWidth
2 $srSpace
   - columnWidth
3 $srButtonSpace
   - columnWidth
4 $srSpace
   - columnWidth
5 $srButtonSpace;

// separator - style
"none";
iconTextButton - l
"P" - c
"am_prefixSuffixButton()" - dcc
"am_prefixSuffixSwitch()" - annotation
"Click to load prefix.  Double-click to set to suffix mode." - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4
prefixSuffixButton;
textField - placeholderText
"Search/Prefix" - annotation
"Search Field. Use as prefix if replace field empty."
searchText;
button - l
"<->" - c
"am_srSwitch()" - annotation
"Switch"
srSwitchButton;
textField - placeholderText
"Replace/Suffix" - annotation
"Replace Field. Use as suffix if search field empty."
replaceText;

string $srPopup = "srPopup";
button - l
"X" - c
"am_resetSR()" - annotation
"Clear fields."
srResetButton;

setParent..;

rowColumnLayout
- numberOfColumns
3
- columnWidth
1 $halfWidth
   - columnWidth
2
5
- columnWidth
3 $halfWidth
transformColumns;

textScrollList - height(15 *$listLen) -p
transformColumns - width($halfWidth) -allowMultiSelection
false - annotation
"Select tranform type.  Double-click to create transform at origin." - dcc
"am_shapeLaunch()"
shapeList;

textScrollList - e - append
"Null"
shapeList;
textScrollList - e - append
"Locator"
shapeList;
textScrollList - e - append
"Joint"
shapeList;
textScrollList - e - append
"Copy"
shapeList;
textScrollList - e - append
"Selected"
shapeList;

textScrollList - e - append
"----------"
shapeList;

textScrollList - e - append
"Circle"
shapeList;
textScrollList - e - append
"Square"
shapeList;

textScrollList - e - append
"Cog"
shapeList;
textScrollList - e - append
"Circle Sprog"
shapeList;
textScrollList - e - append
"Circle Cross"
shapeList;
textScrollList - e - append
"Half Sphere"
shapeList;
textScrollList - e - append
"Sphere Sprog"
shapeList;
textScrollList - e - append
"Sphere Pin"
shapeList;
textScrollList - e - append
"Circle Cross Pin"
shapeList;
textScrollList - e - append
"Half Sphere Pin"
shapeList;
textScrollList - e - append
"XCube"
shapeList;

textScrollList - e - sii
1
shapeList;

separator - style
"none" - p
transformColumns;
columnLayout
dpad;
rowColumnLayout
- p
dpad
- numberOfColumns
3
- columnWidth
1 $nsewSpace
   - columnWidth
2 $nsewSpace
   - columnWidth
3 $nsewSpace;
separator - style
"none";
iconTextButton - label
"Parent" - c
"am_transformButton(0)" - dcc
"am_transformButton(10)" - annotation
"Double-click to find parents for selected items." - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4
parentTransformButton;
separator - style
"none";

iconTextButton - label
"Sibling" - c
"am_transformButton(1)" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4
siblingTransformButton;
separator - style
"none";
iconTextButton - label
"Orphan" - c
"am_transformButton(2)" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4
orphanTransformButton;

separator - style
"none";
iconTextButton - label
"Child" - c
"am_transformButton(3)" - dcc
"am_transformButton(4)" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4
childTransformButton;
separator - style
"none";
setParent..;
separator - style
"none" - height
6;
iconTextButton - label
"Chain" - w $halfWidth - c
"am_transformButton(5)" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4 - p
dpad;
// iconTextButton - label
"Mirror" - w $halfWidth - c
"am_transformButton(6)" - dcc
"am_transformButton(7)" - enable
true - rpt
true - style
"textOnly" - bgc
0.3
0.3
0.3 - p
dpad
mirrorTransformButton;
separator - style
"none" - height
6;
iconTextButton - label
"Shape" - w $halfWidth - c
"am_transformButton(9)" - dcc
"am_transformButton(8)" - enable
true - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4 - p
dpad;

// iconTextButton - label
"Remove" - w $halfWidth - c
"am_transformButton(6)" - enable
false - rpt
true - style
"textOnly" - bgc
0.4
0.4
0.4 - p
dpad;
// iconTextButton - label
"Rename" - w $halfWidth - c
"am_transformButton(6)" - enable
false - rpt
true - style
"textOnly" - bgc
0.3
0.3
0.3 - p
dpad;

setParent..;

// separator - style
"none" - p
transformSubColumn;
setParent..;

}

/ *------------------------------------------------- * /
global proc
am_prefixSuffixButton()
{
    string $selection[] = `ls - sl`;
int $size = `size $selection
`;
string $tokens[];
int $numTokens = `tokenize $selection[$size - 1] "_" $tokens
`;
string $state = `iconTextButton - q - l
prefixSuffixButton
`;
// prefix
if ($state == "P"){
    textField - e - tx $tokens[0]
searchText;
} else if ($state == "S"){
textField -e -tx $tokens[$numTokens-1] searchText;
}
}
global proc am_prefixSuffixSwitch(){
string $state = `iconTextButton -q -l prefixSuffixButton`;
// prefix
if ($state == "P"){
iconTextButton -e -l "S" prefixSuffixButton;
iconTextButton -e -annotation "Click to load suffix.  Double-click to set to prefix mode." prefixSuffixButton;
am_prefixSuffixButton();
} else if ($state == "S"){
iconTextButton -e -l "P" prefixSuffixButton;
am_prefixSuffixButton();
}
}
/ * ------------------------------------------------- * /
global proc am_transformButton( int $button ){
string $search = `textField -q -text searchText`;
string $replace = `textField -q -text replaceText`;
int $shape[] = `textScrollList -q -sii shapeList`;
int $inputShape = $shape[0] - 1;
string $selection[] = `ls -sl`;

if ($button < 5){
string $direction[] = {"parent", "sibling", "orphan", "child", "child2"};
string $
return [] = am_transform($selection, $direction[$button], $inputShape, $search, $replace);
select $return;
if ($inputShape >= 4){
SelectCurveCVsAll;
selectMode -component;
manipMoveContext -e -mode 0 Move;
manipRotateContext -e -mode 0 Rotate;
manipScaleContext -e -mode 0 Scale;
}
} // Chain
if ($button == 5){
am_chain($selection, $search, $replace);
} // Mirror(single
click)
if ($button == 6){
// am_mirror(0, $selection, $inputShape, $search, $replace);
} // Mirror(double
click)
if ($button == 7){
// am_mirror(1, $selection, $inputShape, $search, $replace);
} // Add / Replace
Shape
if ($button == 8 | | $button == 9){
if ($inputShape < 4 | | $inputShape == 5) {
error "Select an option from list with a shape node.";
}
string $object[] = am_transform($selection, "orphan", $inputShape, $search, $replace);
int $size = `size $object
`;
for ($i=0; $i < $size; $i++){
// string $shape[] = `listRelatives -s $object[$i]`;
select -r $selection[$i];
select -add $object[$i];
am_addShape(($button-8));
select -cl;
delete $object[$i];
}
select - r $selection;
SelectCurveCVsAll;
selectMode - component;
manipMoveContext - e - mode
0
Move;
manipRotateContext - e - mode
0
Rotate;
manipScaleContext - e - mode
0
Scale;
} // Find
parent
if ($button == 10){
for ($sel in $selection){
// NAME
// Remove pipes ( obj1 | obj2 = obj2 )
if ($search == "" & & $replace == ""){
error "Use search/replace fields to find parents for selected objects.";
}
string $shortName = objShortName($sel);
string $name = $shortName;
if ($search != ""){
if ($replace != ""){
// Replace $search text in $str with $replace text.
$name = strSearchReplace($shortName, $search, $replace);
if ($name == $shortName){
warning ("Search/Replace string not found for " + $name);
}
} else {
// if search field is active and replace is not, use it as a prefix
$name = ($search + "_" + $shortName);
}
} else {
if ($replace != ""){
// if search field is empty but replace is active, use it as a suffix
$name = ($shortName + "_" + $replace);
}
}
if ($name != $sel){
if (`objectExists $name`){
parent $sel $name;
} else {
warning ("No parent found for: " + $sel);
}
} else {
warning ("Search string not found: " + $sel);
}
}
}
}

/ *------------------------------------------------- * /
   // gets
search /
return history and populates
popup
menu
global proc
am_srSwitch()
{
    string $search = `textField - q - text
searchText
`;
string $replace = `textField - q - text
replaceText
`;
textField - e - text $replace
searchText;
textField - e - text $search
replaceText;
}
/ *------------------------------------------------- * /
// gets
search /
return history and populates
popup
menu
global proc
am_resetSR()
{
    textField - e - text
""
replaceText;
textField - e - text
""
searchText;
setFocus
searchText;
}

/ *------------------------------------------------- * /
global proc
string
am_shapeLaunch()
{
    int $shape[] = `textScrollList - q - sii
shapeList
`;
string $return;
int $inputShape = $shape[0] - 1;
string $selection[] = `ls - sl`;
string $nodeType[] = {"transform", "locator", "joint"};
if ($inputShape == 0 | | $inputShape == 2){
$
return = `createNode - n
"temp" $nodeType[$inputShape]`;
} else if ($inputShape == 1){// Locator
string $locator = `createNode $nodeType[$inputShape]`;
string $parent[] = `listRelatives - p $locator
`;
$parent[0] = `rename $parent[0]
"temp"
`;
$return = $parent[0];
} else if ($inputShape == 3 | | $inputShape == 4 ) {
if (`size $selection` == 0){error "Nothing Selected.";}
for ($sel in $selection){
string $dup[] = `duplicate -n "temp" -rc $sel`;
string $descendents[] = `listRelatives -c $dup[0]`;
string $shapes[] = `ls -s $descendents`;
string $children[] = stringArrayRemove ($shapes, $descendents);
if (`size $children` > 0){
delete $children;
}
$
return = $dup[0];
string $parent[] = `listRelatives - p $dup[0]
`;
if ($parent[0] != ""){
while (`objectExists("|" + $dup[0])` ) {
rename $dup[0] ($dup[0]+"clash");
}
parent - w $dup[0];
}

setAttr($dup[0] + ".translate") 0
0
0;
setAttr($dup[0] + ".rotate") 0
0
0;
setAttr($dup[0] + ".scale") 1
1
1;
}
} else if ($inputShape == 6){
string $circle[] = `circle -n "temp" -ch off -nr 0 1 0`;
$
return = $circle[0];
} else if ($inputShape == 7){
string $names[] = `circle - sections
4 - degree
1 - ch
off - n
"temp" - nr
0
1
0
`;
$name = $names[0];
rotate - r
0
45
deg
0 $name;
makeIdentity - apply
true - t
0 - r
1 - s
0 - n
0 - pn
1 $name;
$return = $name;
} else if ($inputShape >= 8){
$return = `am_createShape($inputShape - 8)`;
}
return $return;
}



global proc
am_zero(int $dbl ){
string $selection[] = `ls - sl`;
string $cbSel[] = `channelBox - q - sma
mainChannelBox
`;
string $cbList[];
string $nonDynamicList[] = {"tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz", "v"};
// string $nonDynamicList[] = {"translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "scaleX",
                               "scaleY", "scaleZ"};

for ($sel in $selection) {
if ($dbl == 0){
// string $attributes[] = `listAttr -keyable $sel`;
// If there are no channels selected in channelbox
if (`size $cbSel` == 0){
// create a list with all keyable attributes, and add all nonkeyable attributes in cb
$cbList = `listAttr -keyable -sn $sel`;
string $cbNonKeyList[] = `listAttr -channelBox $sel`;
int $sizeList = `size $cbNonKeyList`;
appendStringArray($cbList, $cbNonKeyList, $sizeList);
} else {
$cbList = $cbSel;
}
} else {
$cbList = `listAttr -keyable -sn $sel`;
string $cbNonKeyList[] = `listAttr -channelBox $sel`;
int $sizeList = `size $cbNonKeyList`;
appendStringArray($cbList, $cbNonKeyList, $sizeList);
}
for ($attr in $cbList){
// check if attribute is translate, scale, etc
int $find = stringArrayFind ($attr, 0, $nonDynamicList);
if ( stringArrayContains ($attr, $nonDynamicList) ) {
if ($find < 6) {
// if it's translate, rotate, set to 0
if (catch ( `setAttr ($sel + "." + $attr) 0` ) ) {warning ("Could not reset " + $sel + "." + $attr);
} else {
setAttr ($sel + "." + $attr) 0;
}
} else {
// if it's scale, vis, set to 1
if (catch ( `setAttr ($sel + "." + $attr) 1` ) ) {warning ("Could not reset " + $sel + "." + $attr);
} else {
setAttr ($sel + "." + $attr) 1;
}
}
}
}
}
}

// --------------------------------------------------------------------------
   // libString.mel - MEL
Script
// --------------------------------------------------------------------------
//
// DESCRIPTION:
// This is a
nice
library
of
"string"
procedures
to
help
those
that
// do
MEL
scripting.
//
// REQUIRES:
// Nothing.
   //
   //
   // USAGE:
//
//
// // Replace $search
text in $str
with $replace text.
// string $s = strSearchReplace(string $str, string $search, string $replace);
//
// // Remove last character from $str
// string $s = strChop(string $str);
//
// // UPPER or lower case the character at $index in $str
// // $index is one based.
// string $s = strUpperIdx(string $str, int $index);
// string $s = strLowerIdx(string $str, int $index);
//
// // Convert and int or a float to a string with specified padding
// string $s = intToStr(int $i, int $padding);
// string $s = floatToStr(float $f, int $prePad, int $decPad);
//
// // Returns the short name of an object, even if it has | pipes in the name.
// string $s = objShortName(string $obj);
//
// // Given an object name like foo_bar, returns the "foo" part.Works
// // even if the obj passed in has a long name with | pipes in it.
// string $s = objGetPrefix(string $obj);
//
// AUTHORS:
    //
Michael
B.Comet - comet @ comet - cartoons.com
                          // Copyright ©2003
Michael
B.Comet - All
Rights
Reserved.
//
// VERSIONS:
// 1.00 - Feb
28, 2003 - Initial
Release.
//
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
// Library
Functions
// --------------------------------------------------------------------------

/ *
* strSearchReplace() - Given
a
main
string $str, looks
for ALL occurances
        * of $search, and replaces them with $replace.
*
* This properly handles the replace string being similar or a part
* of the search string, and handling multiple matches.
* /
global proc string strSearchReplace(string $str, string $search, string $replace)
{
string $retstr = "";

// Sanity
check
please!
if ($search == "")
return $str;

if ($str == "")
return $str;

int $len = size($str);
int $lenS = size($search);

int $i, $j;
int $match;

for ($i=1; $i <= $len; ++$i)
{
$match = 0;

// Now
get
substring
from where we

are
currently
// to
the
number
of
letters
past
of
the
length
// of
the
search
string.Basically
the
same
// length as the
search
string.So if it is identical
                   // we
know
we
have
a
match.
//
// If
not, we
don
't.  We also make sure we aren'
t
// trying
to
look
past
the
end
of
the
string...
//
$j = $i + ($lenS - 1);

if ($j <= $len)
{
string $part = `substring $str $i $j`;
if ($part == $search)
$match = 1;
}

if ($match == 1)
{
$retstr += $replace; // we did it, so insert replace str
$i = $j; // skip forward
}
else
{
string $char = `substring $str $i $i`;
$retstr += $char;
}
}

return $retstr;

}

// --------------------------------------------------------------------------

   / *
   * strChop() - Removes
last
char
from a string
* /
global proc
string
strChop(string $str)
{
string $ret = "";

int $cnt = size($str);

if ($cnt <= 1)
return $ret;

$ret = `substring $str
1($cnt - 1)`;

return $ret;
}

// --------------------------------------------------------------------------

   / *
   * strUpperIdx() - Upper
cases
only
the
given $index
character
of
a
string
*
* ie:    strUpperIdx("michael", 1);
* // Result: Michael //
             *
             * strUpperIdx("michael", 3);
* // Result: miChael /
             * /
global proc
string
strUpperIdx(string $str, int $index)
{
int $cnt = size($str);
if ($index < 1 | | $index > $cnt)
return $str;

string $pre = "";
string $post = "";
string $mid = "";

if ($index > 1)
$pre = `substring $str
1($index - 1)`;
if ($index < $cnt)
$post = `substring $str($index + 1) $cnt
`;
$mid = `substring $str $index $index
`;
$mid = `toupper $mid
`;

string $ret = ($pre + $mid + $post);

return $ret;
}

// --------------------------------------------------------------------------

   / *
   * strLowerIdx() - Upper
cases
only
the
given $index
character
of
a
string
*
* ie:    strUpperIdx("MICHAEL", 1);
* // Result: mICHAEL //
             *
             * strUpperIdx("MICHAEL", 3);
* // Result: MIcHAEL /
             * /
global proc
string
strLowerIdx(string $str, int $index)
{
int $cnt = size($str);
if ($index < 1 | | $index > $cnt)
return $str;

string $pre = "";
string $post = "";
string $mid = "";

if ($index > 1)
$pre = `substring $str
1($index - 1)`;
if ($index < $cnt)
$post = `substring $str($index + 1) $cnt
`;
$mid = `substring $str $index $index
`;
$mid = `tolower $mid
`;

string $ret = ($pre + $mid + $post);

return $ret;
}

// --------------------------------------------------------------------------

   / *
   * intToStr() - Converts
the
int $i
to
a
string,
with the specified  # of
* 0 field padding in it.ie: 2
padding
would
be
01, 02..
.09, 10, 11
* 3
padding is 001, 002..
.099, 100, 101
etc...
* padding
of
0 and 1 or less is identical.
                   *
                   * /
global proc
string
intToStr(int $i, int $padding)
{
string $s = (string)$i;

while (size($s) < $padding)
$s = ("0" + $s); // add
zero in front as needed.

return $s;
}

// --------------------------------------------------------------------------

   / *
   * floatToStr() - Converts
the
float $f
to
a
string,
with the specified  # of
* 0 field padding in it.
* $prePad is the  # of fields to have before the decimal.
* $decPad is the  # to have after.  This value will extend extra 0's
* at the end of the value, or will CROP the  # 's after the decimal
* so exactly and only that number of post decimal values are shown.
*
*
* ie:
    *floatToStr(0.2, 2, 3);
    * //
Result: 00.200 //
        *
        * floatToStr(12.34, 3, 5);
* // Result: 012.34000 //
             *
             * // Not
this
CROPS
the
after
decimal
value as specified //
         * floatToStr(12.345, 1, 1);
* // Result: 12.3 //
             *
             * // Not
this
CROPS
the
after
decimal
value as specified //
         * floatToStr(12.345, 1, 0);
* // Result: 12 //
             *
             * /
global proc
string
floatToStr(float $f, int $prePad, int $decPad)
{
string $s = (string)$f;

string $parts[];
tokenize($s, ".", $parts);

while (size($parts[0]) < $prePad)
$parts[0] = ("0" + $parts[0]); // add
zero in front as needed.

while (size($parts[1]) < $decPad)
$parts[1] = ($parts[1] + "0"); // add
zero in back as needed.

// Now
crop
so
we
ONLY
have
the
part
after
the
decimal
we
want.
//
if ($decPad >= 1)
{
$parts[1] = `substring $parts[1]
1 $decPad
`;

$s = ($parts[0] + "." + $parts[1]); // put
it
back
together
now.
}
else
$s = $parts[0]; // if 0 pad, means only want part before.

return $s;
}

// --------------------------------------------------------------------------
   // Object
string
Procedures
// --------------------------------------------------------------------------

/ *
* objShortName() - Given
a | Obj | Obj | Obj
string, get
last
part
after
* last | pipe.
         * /
global proc
string
objShortName(string $obj)
{
string $ret = "";

if ($obj == "")
return $ret;

string $parts[];
int $cnt = tokenize($obj, "|", $parts);

if ($cnt <= 0)
$ret = $obj;
else
$ret = $parts[($cnt - 1)];

return $ret;
}

// --------------------------------------------------------------------------

   / *
   * objGetPrefix() - Given
an
object
name
like
foo_bar_myObj(as if it was
*referenced, parse
out and
return the
prefix
up
to
the
last
_
*Works
even if you
pass in a
full
path
object.
*
*Returns
"" if no
prefix is found
*Otherwise
returns
prefix
without
trailing
_
*
*ie:  foo_bar -->  foo
*biz -->  ""(empty
string)
*biz_bang_doo -->  biz_bang
* | a_b_c | d_e_f -->  d_e
*
* /
global proc
string
objGetPrefix(string $obj)
{
    string $ret = "";

if ($obj == "")
return $ret;

$obj = objShortName($obj); // First
make
sure
we
only
have
short
name
part
of
object

string $parts[];
int $cnt = tokenize($obj, "_", $parts);

if ($cnt <= 1)
$ret = "";
else
{
// Add
all
pre
parts
together
for ($i=0; $i < $cnt-1; ++$i)
{
if ($i > 0)
$ret += "_";
$ret += $parts[$i];
}
}

return $ret;
}

// --------------------------------------------------------------------------

